
f407zgt_driveless1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080094e8  080094e8  000194e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009914  08009914  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  08009914  08009914  00019914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800991c  0800991c  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800991c  0800991c  0001991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009920  08009920  00019920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08009924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020248  2**0
                  CONTENTS
 10 .bss          000002f4  20000248  20000248  00020248  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000053c  2000053c  00020248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127aa  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003032  00000000  00000000  00032a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00035a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da0  00000000  00000000  00036990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025232  00000000  00000000  00037730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018523  00000000  00000000  0005c962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd564  00000000  00000000  00074e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001423e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c50  00000000  00000000  0014243c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094cc 	.word	0x080094cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	080094cc 	.word	0x080094cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <CRC_Check>:
	* @brief  CRC校验
	* @param  CRC_Ptr->数组指针，LEN->长度
	* @retval CRC校验值
*/
uint16_t CRC_Check(uint8_t *CRC_Ptr,uint8_t LEN)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	uint16_t CRC_Value = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81fb      	strh	r3, [r7, #14]
	uint8_t  i         = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	737b      	strb	r3, [r7, #13]
	uint8_t  j         = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	733b      	strb	r3, [r7, #12]

	CRC_Value = 0xffff;
 8000f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f68:	81fb      	strh	r3, [r7, #14]
	for(i=0;i<LEN;i++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	737b      	strb	r3, [r7, #13]
 8000f6e:	e022      	b.n	8000fb6 <CRC_Check+0x6a>
	{
		CRC_Value ^= *(CRC_Ptr+i);
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	4053      	eors	r3, r2
 8000f7e:	81fb      	strh	r3, [r7, #14]
		for(j=0;j<8;j++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	733b      	strb	r3, [r7, #12]
 8000f84:	e011      	b.n	8000faa <CRC_Check+0x5e>
		{
			if(CRC_Value & 0x00001)
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <CRC_Check+0x52>
				CRC_Value = (CRC_Value >> 1) ^ 0xA001;
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <CRC_Check+0x88>)
 8000f98:	4053      	eors	r3, r2
 8000f9a:	81fb      	strh	r3, [r7, #14]
 8000f9c:	e002      	b.n	8000fa4 <CRC_Check+0x58>
			else
				CRC_Value = (CRC_Value >> 1);
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	085b      	lsrs	r3, r3, #1
 8000fa2:	81fb      	strh	r3, [r7, #14]
		for(j=0;j<8;j++)
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	733b      	strb	r3, [r7, #12]
 8000faa:	7b3b      	ldrb	r3, [r7, #12]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d9ea      	bls.n	8000f86 <CRC_Check+0x3a>
	for(i=0;i<LEN;i++)
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	737b      	strb	r3, [r7, #13]
 8000fb6:	7b7a      	ldrb	r2, [r7, #13]
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3d8      	bcc.n	8000f70 <CRC_Check+0x24>
		}
	}
	CRC_Value = ((CRC_Value >> 8) +  (CRC_Value << 8)); //交换高低字节
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	ba5b      	rev16	r3, r3
 8000fc2:	81fb      	strh	r3, [r7, #14]

	return CRC_Value;
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	ffffa001 	.word	0xffffa001

08000fd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	KEY_Scan(GPIO_Pin);//按键控制
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f8d3 	bl	8001190 <KEY_Scan>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_UARTEx_RxEventCallback>:
/* UASRT callback function
 * 串口回调函数
 * */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{//Size为接收到的数据大小
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART6)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_UARTEx_RxEventCallback+0x34>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d109      	bne.n	800101e <HAL_UARTEx_RxEventCallback+0x2a>
	{
	    HAL_UART_DMAStop(&huart6);//关闭是为了重新设置发送多少数据，不关闭会造成数据错误
 800100a:	4808      	ldr	r0, [pc, #32]	; (800102c <HAL_UARTEx_RxEventCallback+0x38>)
 800100c:	f004 fac2 	bl	8005594 <HAL_UART_DMAStop>

	    Read_Speed();//接收
 8001010:	f000 fa92 	bl	8001538 <Read_Speed>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart6,Buf_Rx, 50);//继续开启空闲中断DMA发送
 8001014:	2232      	movs	r2, #50	; 0x32
 8001016:	4906      	ldr	r1, [pc, #24]	; (8001030 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <HAL_UARTEx_RxEventCallback+0x38>)
 800101a:	f004 fb3a 	bl	8005692 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40011400 	.word	0x40011400
 800102c:	20000424 	.word	0x20000424
 8001030:	20000298 	.word	0x20000298

08001034 <HAL_TIM_PeriodElapsedCallback>:
 * */
//int Position=2000,Target_Position=5000;
//unsigned int MotorSpeed;  // 电机当前速度数值，从编码器中获取
//int MotorOutput;		  // 电机输出
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	//printf("\r\ncallback now!\r\n");
//    static unsigned char i = 0;

    if (htim == (&htim2))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d12b      	bne.n	800109c <HAL_TIM_PeriodElapsedCallback+0x68>
    {

    	Motor.Encoder_pulse_Left = __HAL_TIM_GET_COUNTER(&htim3);//左轮用TIM3 PA6 PA7
 8001044:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 800104e:	831a      	strh	r2, [r3, #24]
    	Motor.Encoder_pulse_Right = __HAL_TIM_GET_COUNTER(&htim4);//右轮用TIM4 PB6 PB7
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 800105a:	835a      	strh	r2, [r3, #26]

    	Motor.WheelSpeed_Left  = Encoder.Encoder_PWMtoSpeed(Motor.Encoder_pulse_Left);//PWM转换速度
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001062:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8001066:	4610      	mov	r0, r2
 8001068:	4798      	blx	r3
 800106a:	eef0 7a40 	vmov.f32	s15, s0
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001070:	edc3 7a00 	vstr	s15, [r3]
    	Motor.WheelSpeed_Right  = Encoder.Encoder_PWMtoSpeed(Motor.Encoder_pulse_Right);
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 800107a:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 800107e:	4610      	mov	r0, r2
 8001080:	4798      	blx	r3
 8001082:	eef0 7a40 	vmov.f32	s15, s0
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001088:	edc3 7a01 	vstr	s15, [r3, #4]

    	__HAL_TIM_SET_COUNTER(&htim3,0);
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
    	__HAL_TIM_SET_COUNTER(&htim4,0);  // 计数器清零
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24


    }
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000308 	.word	0x20000308
 80010a8:	20000350 	.word	0x20000350
 80010ac:	20000020 	.word	0x20000020
 80010b0:	20000398 	.word	0x20000398
 80010b4:	20000010 	.word	0x20000010

080010b8 <Peripheral_Init>:
	Peripheral_Init,
	Peripheral_Stop
};

void Peripheral_Init()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

//	HAL_UART_Receive_DMA(&huart3,Buf_Rx,20); //串口3开启DMA接收
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6,Buf_Rx, 20);//开启串口空闲3中断DMA接收数据
 80010bc:	2214      	movs	r2, #20
 80010be:	4904      	ldr	r1, [pc, #16]	; (80010d0 <Peripheral_Init+0x18>)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <Peripheral_Init+0x1c>)
 80010c2:	f004 fae6 	bl	8005692 <HAL_UARTEx_ReceiveToIdle_DMA>
//	FIFO_init(&FIFO,Buf_Rx,Rx_size);

	Motor.Motor_Start_Init();
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <Peripheral_Init+0x20>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	4798      	blx	r3

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000298 	.word	0x20000298
 80010d4:	20000424 	.word	0x20000424
 80010d8:	20000020 	.word	0x20000020

080010dc <Peripheral_Stop>:

void Peripheral_Stop()
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <Encoder_PWMtoSpeed>:
	Encoder_PWMtoSpeed,
	Encoder_SpeedtoPWM
};

float Encoder_PWMtoSpeed(int Encoder_pulse)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	static float WheelSpeed;
	//static unsigned int Wheel_circumference = 3.14 * 0.13;
	//static unsigned int Encoder_accuracy = 4*13*30;
	WheelSpeed = (Encoder_pulse * 100 * Encoder.Wheel_circumference)/(Encoder.Encoder_accuracy);//求轮子速度
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2264      	movs	r2, #100	; 0x64
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <Encoder_PWMtoSpeed+0x48>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <Encoder_PWMtoSpeed+0x48>)
 8001110:	ed93 7a01 	vldr	s14, [r3, #4]
 8001114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <Encoder_PWMtoSpeed+0x4c>)
 800111a:	edc3 7a00 	vstr	s15, [r3]

	return WheelSpeed;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <Encoder_PWMtoSpeed+0x4c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	ee07 3a90 	vmov	s15, r3
}
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	20000010 	.word	0x20000010
 8001138:	20000264 	.word	0x20000264

0800113c <Encoder_SpeedtoPWM>:

int Encoder_SpeedtoPWM(float Speed)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	ed87 0a01 	vstr	s0, [r7, #4]
	static int MotorPWM;
	MotorPWM = Speed/100/Encoder.Wheel_circumference*Encoder.Encoder_accuracy;
 8001146:	edd7 7a01 	vldr	s15, [r7, #4]
 800114a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001184 <Encoder_SpeedtoPWM+0x48>
 800114e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <Encoder_SpeedtoPWM+0x4c>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <Encoder_SpeedtoPWM+0x4c>)
 800115e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116a:	ee17 2a90 	vmov	r2, s15
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <Encoder_SpeedtoPWM+0x50>)
 8001170:	601a      	str	r2, [r3, #0]

	return MotorPWM;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <Encoder_SpeedtoPWM+0x50>)
 8001174:	681b      	ldr	r3, [r3, #0]
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	42c80000 	.word	0x42c80000
 8001188:	20000010 	.word	0x20000010
 800118c:	20000268 	.word	0x20000268

08001190 <KEY_Scan>:
	* @name   KEY_Detect
	* @brief  按键检测，低电平有效
	* 初始化方式：KEY_Detect(&KEY1, KEY1_GPIO_Port, KEY1_Pin,&Position_KP);
*/
void KEY_Scan(uint16_t GPIO_Pin)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == KEY_up_Pin)
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b80      	cmp	r3, #128	; 0x80
 800119e:	d10c      	bne.n	80011ba <KEY_Scan+0x2a>
	{
		pid_count++;
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <KEY_Scan+0xc0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <KEY_Scan+0xc0>)
 80011aa:	701a      	strb	r2, [r3, #0]
		if(pid_count == 3)
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <KEY_Scan+0xc0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d102      	bne.n	80011ba <KEY_Scan+0x2a>
			{pid_count =0;}
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <KEY_Scan+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == KEY0_Pin)
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c0:	d11b      	bne.n	80011fa <KEY_Scan+0x6a>
	{
		pid[pid_count] = pid[pid_count]+0.1;
 80011c2:	4b23      	ldr	r3, [pc, #140]	; (8001250 <KEY_Scan+0xc0>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4a23      	ldr	r2, [pc, #140]	; (8001254 <KEY_Scan+0xc4>)
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9ba 	bl	8000548 <__aeabi_f2d>
 80011d4:	a31c      	add	r3, pc, #112	; (adr r3, 8001248 <KEY_Scan+0xb8>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff f857 	bl	800028c <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	491b      	ldr	r1, [pc, #108]	; (8001250 <KEY_Scan+0xc0>)
 80011e4:	7809      	ldrb	r1, [r1, #0]
 80011e6:	460c      	mov	r4, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fcdc 	bl	8000ba8 <__aeabi_d2f>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4918      	ldr	r1, [pc, #96]	; (8001254 <KEY_Scan+0xc4>)
 80011f4:	00a3      	lsls	r3, r4, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	601a      	str	r2, [r3, #0]
	};
	if(GPIO_Pin == KEY1_Pin)
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001200:	d11b      	bne.n	800123a <KEY_Scan+0xaa>
	{
		pid[pid_count]= pid[pid_count]-0.1;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <KEY_Scan+0xc0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <KEY_Scan+0xc4>)
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f99a 	bl	8000548 <__aeabi_f2d>
 8001214:	a30c      	add	r3, pc, #48	; (adr r3, 8001248 <KEY_Scan+0xb8>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f835 	bl	8000288 <__aeabi_dsub>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	490b      	ldr	r1, [pc, #44]	; (8001250 <KEY_Scan+0xc0>)
 8001224:	7809      	ldrb	r1, [r1, #0]
 8001226:	460c      	mov	r4, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fcbc 	bl	8000ba8 <__aeabi_d2f>
 8001230:	4602      	mov	r2, r0
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <KEY_Scan+0xc4>)
 8001234:	00a3      	lsls	r3, r4, #2
 8001236:	440b      	add	r3, r1
 8001238:	601a      	str	r2, [r3, #0]
	};

}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	f3af 8000 	nop.w
 8001248:	9999999a 	.word	0x9999999a
 800124c:	3fb99999 	.word	0x3fb99999
 8001250:	2000026c 	.word	0x2000026c
 8001254:	2000005c 	.word	0x2000005c

08001258 <Motor_Start_Init>:
	Motor_Solve,
	Motor_ouput
};

void Motor_Start_Init()//Motor initialization
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800125c:	2100      	movs	r1, #0
 800125e:	4812      	ldr	r0, [pc, #72]	; (80012a8 <Motor_Start_Init+0x50>)
 8001260:	f002 ff22 	bl	80040a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001264:	2104      	movs	r1, #4
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <Motor_Start_Init+0x50>)
 8001268:	f002 ff1e 	bl	80040a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800126c:	2108      	movs	r1, #8
 800126e:	480e      	ldr	r0, [pc, #56]	; (80012a8 <Motor_Start_Init+0x50>)
 8001270:	f002 ff1a 	bl	80040a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001274:	210c      	movs	r1, #12
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <Motor_Start_Init+0x50>)
 8001278:	f002 ff16 	bl	80040a8 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1); // enable Encoder_A
 800127c:	2100      	movs	r1, #0
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <Motor_Start_Init+0x54>)
 8001280:	f003 f8f0 	bl	8004464 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2); // enable Encoder_A
 8001284:	2104      	movs	r1, #4
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <Motor_Start_Init+0x54>)
 8001288:	f003 f8ec 	bl	8004464 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1); // enable Encoder_B
 800128c:	2100      	movs	r1, #0
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <Motor_Start_Init+0x58>)
 8001290:	f003 f8e8 	bl	8004464 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2); // enable Encoder_B
 8001294:	2104      	movs	r1, #4
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <Motor_Start_Init+0x58>)
 8001298:	f003 f8e4 	bl	8004464 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);                // enable TIM2_interrupt
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <Motor_Start_Init+0x5c>)
 800129e:	f002 fe39 	bl	8003f14 <HAL_TIM_Base_Start_IT>

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002c0 	.word	0x200002c0
 80012ac:	20000398 	.word	0x20000398
 80012b0:	20000350 	.word	0x20000350
 80012b4:	20000308 	.word	0x20000308

080012b8 <Motor_Start_Stop>:

void Motor_Start_Stop()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80012bc:	2100      	movs	r1, #0
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <Motor_Start_Stop+0x18>)
 80012c0:	f002 ffba 	bl	8004238 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80012c4:	2104      	movs	r1, #4
 80012c6:	4802      	ldr	r0, [pc, #8]	; (80012d0 <Motor_Start_Stop+0x18>)
 80012c8:	f002 ffb6 	bl	8004238 <HAL_TIM_PWM_Stop>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002c0 	.word	0x200002c0

080012d4 <Motor_PWM_Left>:
void Motor_PWM_Left (uint16_t Left,uint16_t Right)//PWM set
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	460a      	mov	r2, r1
 80012de:	80fb      	strh	r3, [r7, #6]
 80012e0:	4613      	mov	r3, r2
 80012e2:	80bb      	strh	r3, [r7, #4]
	TIM1->CCR1 = Left; //左轮PA8 PA9
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <Motor_PWM_Left+0x28>)
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = Right;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <Motor_PWM_Left+0x28>)
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40010000 	.word	0x40010000

08001300 <Motor_PWM_Right>:
void Motor_PWM_Right (uint16_t Left,uint16_t Right)//PWM set
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	80fb      	strh	r3, [r7, #6]
 800130c:	4613      	mov	r3, r2
 800130e:	80bb      	strh	r3, [r7, #4]
	TIM1->CCR3 = Left; //右轮PA10 PA11
 8001310:	4a05      	ldr	r2, [pc, #20]	; (8001328 <Motor_PWM_Right+0x28>)
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4 = Right;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <Motor_PWM_Right+0x28>)
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40010000 	.word	0x40010000

0800132c <Motor_Solve>:
		pwm = pwm;
	return pwm;
}

static void Motor_Solve()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

		/*速度转换为占空比*/
		Motor.MotorOutput_Left = Encoder.Encoder_SpeedtoPWM(Speed_left_target);
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <Motor_Solve+0x78>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <Motor_Solve+0x7c>)
 8001336:	edd2 7a00 	vldr	s15, [r2]
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	4798      	blx	r3
 8001340:	4603      	mov	r3, r0
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <Motor_Solve+0x80>)
 8001344:	6093      	str	r3, [r2, #8]
		Motor.MotorOutput_Right = Encoder.Encoder_SpeedtoPWM(Speed_right_target);
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <Motor_Solve+0x78>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <Motor_Solve+0x84>)
 800134c:	edd2 7a00 	vldr	s15, [r2]
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	4798      	blx	r3
 8001356:	4603      	mov	r3, r0
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <Motor_Solve+0x80>)
 800135a:	60d3      	str	r3, [r2, #12]

//		Motor.PWMOutput_Left = Motor.MotorOutput_Left;//开环
//		Motor.PWMOutput_Right = Motor.MotorOutput_Right;

		Motor.PWMOutput_Left = Position_PID(Motor.Encoder_pulse_Left, Motor.MotorOutput_Left);
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <Motor_Solve+0x80>)
 800135e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001362:	461a      	mov	r2, r3
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <Motor_Solve+0x80>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f000 f868 	bl	8001440 <Position_PID>
 8001370:	4603      	mov	r3, r0
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <Motor_Solve+0x80>)
 8001374:	6113      	str	r3, [r2, #16]
		Motor.PWMOutput_Right = Position_PID(Motor.Encoder_pulse_Right,Motor.MotorOutput_Right);
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <Motor_Solve+0x80>)
 8001378:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800137c:	461a      	mov	r2, r3
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <Motor_Solve+0x80>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4619      	mov	r1, r3
 8001384:	4610      	mov	r0, r2
 8001386:	f000 f85b 	bl	8001440 <Position_PID>
 800138a:	4603      	mov	r3, r0
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <Motor_Solve+0x80>)
 800138e:	6153      	str	r3, [r2, #20]
//		float FL_err = FeedforwardController(Motor.MotorOutput_Left);
//		float FR_err = FeedforwardController(Motor.MotorOutput_Right);
//		Motor.PWMOutput_Left = FL_err + Position_PID(Motor.Encoder_pulse_Left, Motor.MotorOutput_Left);
//		Motor.PWMOutput_Right = FR_err + Position_PID(Motor.Encoder_pulse_Right,Motor.MotorOutput_Right);
//
		Motor.Motor_ouput(Motor.PWMOutput_Left,Motor.PWMOutput_Right);
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <Motor_Solve+0x80>)
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <Motor_Solve+0x80>)
 8001396:	6912      	ldr	r2, [r2, #16]
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <Motor_Solve+0x80>)
 800139a:	6949      	ldr	r1, [r1, #20]
 800139c:	4610      	mov	r0, r2
 800139e:	4798      	blx	r3

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000010 	.word	0x20000010
 80013a8:	20000280 	.word	0x20000280
 80013ac:	20000020 	.word	0x20000020
 80013b0:	20000284 	.word	0x20000284

080013b4 <Motor_ouput>:

void Motor_ouput(int Output_Left,int Output_Right )
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	if(Output_Left >= 0)//正转
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db07      	blt.n	80013d4 <Motor_ouput+0x20>
	{
		Motor.Motor_PWM_Left(Output_Left,0);
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <Motor_ouput+0x64>)
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	b292      	uxth	r2, r2
 80013cc:	2100      	movs	r1, #0
 80013ce:	4610      	mov	r0, r2
 80013d0:	4798      	blx	r3
 80013d2:	e008      	b.n	80013e6 <Motor_ouput+0x32>
	}
	else
	{
		Motor.Motor_PWM_Left(0,-Output_Left);
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <Motor_ouput+0x64>)
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	b292      	uxth	r2, r2
 80013dc:	4252      	negs	r2, r2
 80013de:	b292      	uxth	r2, r2
 80013e0:	4611      	mov	r1, r2
 80013e2:	2000      	movs	r0, #0
 80013e4:	4798      	blx	r3
	}
	if(Output_Right >= 0)//正转
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db07      	blt.n	80013fc <Motor_ouput+0x48>
	{
		Motor.Motor_PWM_Right(Output_Right,0);
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <Motor_ouput+0x64>)
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	b292      	uxth	r2, r2
 80013f4:	2100      	movs	r1, #0
 80013f6:	4610      	mov	r0, r2
 80013f8:	4798      	blx	r3
//	{
//		Motor.Motor_PWM_Right(Output_Right,0);
////		Motor.Motor_PWM_Right(Motor.MotorOutput_Right,0);//开环正常
//	}

}
 80013fa:	e008      	b.n	800140e <Motor_ouput+0x5a>
		Motor.Motor_PWM_Right(0,-Output_Right);
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <Motor_ouput+0x64>)
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	b292      	uxth	r2, r2
 8001404:	4252      	negs	r2, r2
 8001406:	b292      	uxth	r2, r2
 8001408:	4611      	mov	r1, r2
 800140a:	2000      	movs	r0, #0
 800140c:	4798      	blx	r3
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000020 	.word	0x20000020

0800141c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5 , (uint8_t *)&ch, 1, 0xFFFF);
 8001424:	1d39      	adds	r1, r7, #4
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	2201      	movs	r2, #1
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <__io_putchar+0x20>)
 800142e:	f003 ffa0 	bl	8005372 <HAL_UART_Transmit>
	return ch;
 8001432:	687b      	ldr	r3, [r7, #4]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200003e0 	.word	0x200003e0

08001440 <Position_PID>:
∑e(k)代表e(k)以及之前的偏差的累积和;其中k为1,2,,k;
pwm代表输出
**************************************************************************/

int Position_PID(int position,int target)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
	 static float Bias,Integral_bias,Last_Bias;
	 static int16_t Pwm;
	 Bias = target - position;                                  //计算偏差
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <Position_PID+0xd4>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
	 Integral_bias += Bias;	                                 //求出偏差的积分
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <Position_PID+0xd8>)
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <Position_PID+0xd4>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <Position_PID+0xd8>)
 8001470:	edc3 7a00 	vstr	s15, [r3]

	 if(Integral_bias>3000)Integral_bias = 10000;				//限幅
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <Position_PID+0xd8>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800151c <Position_PID+0xdc>
 800147e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	dd02      	ble.n	800148e <Position_PID+0x4e>
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <Position_PID+0xd8>)
 800148a:	4a25      	ldr	r2, [pc, #148]	; (8001520 <Position_PID+0xe0>)
 800148c:	601a      	str	r2, [r3, #0]
	 if(Integral_bias<-3000)Integral_bias = -10000;
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <Position_PID+0xd8>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001524 <Position_PID+0xe4>
 8001498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d502      	bpl.n	80014a8 <Position_PID+0x68>
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <Position_PID+0xd8>)
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <Position_PID+0xe8>)
 80014a6:	601a      	str	r2, [r3, #0]

	 Pwm=pid[0] * Bias + pid[1] * Integral_bias + pid[2] * (Bias-Last_Bias);       //位置式PID控制器
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <Position_PID+0xec>)
 80014aa:	ed93 7a00 	vldr	s14, [r3]
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <Position_PID+0xd4>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <Position_PID+0xec>)
 80014ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <Position_PID+0xd8>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <Position_PID+0xec>)
 80014ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <Position_PID+0xd4>)
 80014d4:	ed93 6a00 	vldr	s12, [r3]
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <Position_PID+0xf0>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ee:	ee17 3a90 	vmov	r3, s15
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <Position_PID+0xf4>)
 80014f6:	801a      	strh	r2, [r3, #0]
	 Last_Bias = Bias;                                       //保存上一次偏差
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <Position_PID+0xd4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <Position_PID+0xf0>)
 80014fe:	6013      	str	r3, [r2, #0]
	 return Pwm;                                           //增量输出
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <Position_PID+0xf4>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000270 	.word	0x20000270
 8001518:	20000274 	.word	0x20000274
 800151c:	453b8000 	.word	0x453b8000
 8001520:	461c4000 	.word	0x461c4000
 8001524:	c53b8000 	.word	0xc53b8000
 8001528:	c61c4000 	.word	0xc61c4000
 800152c:	2000005c 	.word	0x2000005c
 8001530:	20000278 	.word	0x20000278
 8001534:	2000027c 	.word	0x2000027c

08001538 <Read_Speed>:
     float float_dat;
     unsigned char byte_data[4];
}Speed_x_write,Speed_w_write,Speed_left_receive,Speed_right_receive;

void Read_Speed()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0

	uint8_t Index = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	75fb      	strb	r3, [r7, #23]
	uint8_t* pBuf_Rx = Buf_Rx;
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <Read_Speed+0xcc>)
 8001544:	607b      	str	r3, [r7, #4]
	for(int i = 0;i<Rx_size;i++)
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	e01c      	b.n	8001586 <Read_Speed+0x4e>
	{
		if(Index ==0)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <Read_Speed+0x28>
		{
			if(*(pBuf_Rx+i) != Message_Header)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	22b0      	movs	r2, #176	; 0xb0
 800155c:	4293      	cmp	r3, r2
 800155e:	d10e      	bne.n	800157e <Read_Speed+0x46>
				continue;
		}
		*(pBuf_Rx+Index) = *(pBuf_Rx+i);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	441a      	add	r2, r3
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	440b      	add	r3, r1
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	701a      	strb	r2, [r3, #0]
		if(Index == Protocol_length)
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b0b      	cmp	r3, #11
 8001574:	d00b      	beq.n	800158e <Read_Speed+0x56>
		{
			break;
		}
		Index++;
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	3301      	adds	r3, #1
 800157a:	75fb      	strb	r3, [r7, #23]
 800157c:	e000      	b.n	8001580 <Read_Speed+0x48>
				continue;
 800157e:	bf00      	nop
	for(int i = 0;i<Rx_size;i++)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	3301      	adds	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b13      	cmp	r3, #19
 800158a:	dddf      	ble.n	800154c <Read_Speed+0x14>
 800158c:	e000      	b.n	8001590 <Read_Speed+0x58>
			break;
 800158e:	bf00      	nop
//	//校验CRC-16
//	if(((*(pBuf_Rx+12) == CRC_16.CRC_L) && (*(pBuf_Rx+13) == CRC_16.CRC_H))
//			||
//		  ((*(pBuf_Rx+12) == CRC_16.CRC_H) && (*(pBuf_Rx+13) == CRC_16.CRC_L)))
//	{
		for(int j=0;j<4;j++)
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e00b      	b.n	80015ae <Read_Speed+0x76>
		{
			Speed_left_receive.byte_data[j] = Buf_Rx[1+j];
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <Read_Speed+0xcc>)
 800159c:	5cd1      	ldrb	r1, [r2, r3]
 800159e:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <Read_Speed+0xd0>)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	460a      	mov	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<4;j++)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	ddf0      	ble.n	8001596 <Read_Speed+0x5e>
		}
		for(int j=0;j<4;j++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	e00b      	b.n	80015d2 <Read_Speed+0x9a>
		{
			Speed_right_receive.byte_data[j] = Buf_Rx[5+j];
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	3305      	adds	r3, #5
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <Read_Speed+0xcc>)
 80015c0:	5cd1      	ldrb	r1, [r2, r3]
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <Read_Speed+0xd4>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<4;j++)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	ddf0      	ble.n	80015ba <Read_Speed+0x82>
		}
		//获取左右轮目标速度
		Speed_right_target = Speed_right_receive.float_dat;//接收 目标值
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <Read_Speed+0xd4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <Read_Speed+0xd8>)
 80015de:	6013      	str	r3, [r2, #0]
		Speed_left_target = Speed_left_receive.float_dat;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <Read_Speed+0xd0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <Read_Speed+0xdc>)
 80015e6:	6013      	str	r3, [r2, #0]
		Steering_engine_Angle = Buf_Rx[9];                    //获取舵机角度
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <Read_Speed+0xcc>)
 80015ea:	7a5a      	ldrb	r2, [r3, #9]
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <Read_Speed+0xe0>)
 80015ee:	701a      	strb	r2, [r3, #0]
//		for(int j=0;j<10;j++){
//				  printf("RXbuf[%d]: %x \r\n",j,Buf_Tx[j]); //打印buf内容需要用16进制才能正常显示
//				}
//	}//CRC
	memset(Buf_Rx,0,sizeof(Buf_Rx));
 80015f0:	2214      	movs	r2, #20
 80015f2:	2100      	movs	r1, #0
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <Read_Speed+0xcc>)
 80015f6:	f005 fa3f 	bl	8006a78 <memset>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000298 	.word	0x20000298
 8001608:	200002b4 	.word	0x200002b4
 800160c:	200002b8 	.word	0x200002b8
 8001610:	20000284 	.word	0x20000284
 8001614:	20000280 	.word	0x20000280
 8001618:	20000288 	.word	0x20000288

0800161c <Write_Speed>:

 /*发送给树莓派的变量定义*/
float Wheel_Distance = 0.48;//两前轮轮距，待录入！
//传入编码器读取后左右轮速度，并计算出直行速度Vx，转弯线速度Vz并上传决策层
void Write_Speed(float Speed_right_send,float Speed_left_send)//传入实际值
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	ed87 0a01 	vstr	s0, [r7, #4]
 8001626:	edc7 0a00 	vstr	s1, [r7]
	int i = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
    float Speed_x = 0;
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
    float Speed_z = 0;
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
	Speed_x = (Speed_right_send + Speed_left_send)/2;
 800163a:	ed97 7a01 	vldr	s14, [r7, #4]
 800163e:	edd7 7a00 	vldr	s15, [r7]
 8001642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001646:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800164a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164e:	edc7 7a04 	vstr	s15, [r7, #16]
	Speed_z = (Speed_left_send - Speed_right_send)/Wheel_Distance;//运动学解算得到公式
 8001652:	ed97 7a00 	vldr	s14, [r7]
 8001656:	edd7 7a01 	vldr	s15, [r7, #4]
 800165a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <Write_Speed+0xf8>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001668:	edc7 7a03 	vstr	s15, [r7, #12]
//      printf("\r\nSend Data\r\n");
//      printf("\r\nSpeed_x:%f\r\nSpeed_z:%f\r\n",Speed_x,Speed_z);

      //计算CRC-16
	CRC_16.CRC_Value   =  CRC_16.CRC_Check(Buf_Tx,9); //计算CRC值
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <Write_Speed+0xfc>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2109      	movs	r1, #9
 8001672:	482a      	ldr	r0, [pc, #168]	; (800171c <Write_Speed+0x100>)
 8001674:	4798      	blx	r3
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <Write_Speed+0xfc>)
 800167c:	801a      	strh	r2, [r3, #0]
	CRC_16.CRC_H       = (uint8_t)(CRC_16.CRC_Value >> 8);
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <Write_Speed+0xfc>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	b29b      	uxth	r3, r3
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b23      	ldr	r3, [pc, #140]	; (8001718 <Write_Speed+0xfc>)
 800168a:	709a      	strb	r2, [r3, #2]
	CRC_16.CRC_L       = (uint8_t)CRC_16.CRC_Value;
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <Write_Speed+0xfc>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <Write_Speed+0xfc>)
 8001694:	70da      	strb	r2, [r3, #3]
	Buf_Tx[0] = 0xB0;//header
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <Write_Speed+0x100>)
 8001698:	22b0      	movs	r2, #176	; 0xb0
 800169a:	701a      	strb	r2, [r3, #0]
    Buf_Tx[9] = 0XA0;//ender;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <Write_Speed+0x100>)
 800169e:	22a0      	movs	r2, #160	; 0xa0
 80016a0:	725a      	strb	r2, [r3, #9]
    Buf_Tx[10] = CRC_16.CRC_H ;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <Write_Speed+0xfc>)
 80016a4:	789a      	ldrb	r2, [r3, #2]
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <Write_Speed+0x100>)
 80016a8:	729a      	strb	r2, [r3, #10]
    Buf_Tx[11] = CRC_16.CRC_L;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <Write_Speed+0xfc>)
 80016ac:	78da      	ldrb	r2, [r3, #3]
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <Write_Speed+0x100>)
 80016b0:	72da      	strb	r2, [r3, #11]
    Speed_x_write.float_dat = Speed_x;//线速度
 80016b2:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <Write_Speed+0x104>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	6013      	str	r3, [r2, #0]
    Speed_w_write.float_dat = Speed_z;//角速度
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <Write_Speed+0x108>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6013      	str	r3, [r2, #0]
//      printf("\r\nSpeed_x_write.float_dat:%f\r\n",Speed_x_write.float_dat);
//      printf("Speed_w_write.float_dat:%f\r\n",Speed_w_write.float_dat);

    for(i=0;i<4;i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e00a      	b.n	80016da <Write_Speed+0xbe>
    {
      	Buf_Tx[i+1] = Speed_x_write.byte_data[i];
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	4915      	ldr	r1, [pc, #84]	; (8001720 <Write_Speed+0x104>)
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	440a      	add	r2, r1
 80016ce:	7811      	ldrb	r1, [r2, #0]
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <Write_Speed+0x100>)
 80016d2:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<4;i++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	ddf1      	ble.n	80016c4 <Write_Speed+0xa8>
     }
	for(i=0;i<4;i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <Write_Speed+0xe0>
    {
		Buf_Tx[i+5] = Speed_w_write.byte_data[i];
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3305      	adds	r3, #5
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <Write_Speed+0x108>)
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	440a      	add	r2, r1
 80016f0:	7811      	ldrb	r1, [r2, #0]
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <Write_Speed+0x100>)
 80016f4:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<4;i++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	ddf1      	ble.n	80016e6 <Write_Speed+0xca>
     }
/*      for(int j=0;j<20;j++){
    	  printf("TXbuf[%d]: %x \r\n",j,Buf_Tx[j]); //打印buf内容需要用16进制才能正常显示
      }*/
      //此处写发送buf_TX函数！
    HAL_UART_Transmit_DMA(&huart6,Buf_Tx,12);
 8001702:	220c      	movs	r2, #12
 8001704:	4905      	ldr	r1, [pc, #20]	; (800171c <Write_Speed+0x100>)
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <Write_Speed+0x10c>)
 8001708:	f003 fec6 	bl	8005498 <HAL_UART_Transmit_DMA>

}
 800170c:	bf00      	nop
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000068 	.word	0x20000068
 8001718:	20000000 	.word	0x20000000
 800171c:	2000028c 	.word	0x2000028c
 8001720:	200002ac 	.word	0x200002ac
 8001724:	200002b0 	.word	0x200002b0
 8001728:	20000424 	.word	0x20000424

0800172c <Print_Function>:

void Read_Speed();
void Write_Speed(float Speed_right_send,float Speed_left_send);
void Run_Function();

void Print_Function(){
 800172c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af04      	add	r7, sp, #16
//	  printf("%f,%f,%d,%d,",
//			Speed_left_target,//上层_L
//			Speed_right_target,//上层_R
//			Motor.PWMOutput_Left,//L_pwm
//			Motor.PWMOutput_Right);//R_pwm
	  printf("%f,%f,%f,",pid[0],pid[1],pid[2]);
 8001734:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <Print_Function+0xbc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff05 	bl	8000548 <__aeabi_f2d>
 800173e:	4680      	mov	r8, r0
 8001740:	4689      	mov	r9, r1
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <Print_Function+0xbc>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fefe 	bl	8000548 <__aeabi_f2d>
 800174c:	4604      	mov	r4, r0
 800174e:	460d      	mov	r5, r1
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <Print_Function+0xbc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fef7 	bl	8000548 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001762:	e9cd 4500 	strd	r4, r5, [sp]
 8001766:	4642      	mov	r2, r8
 8001768:	464b      	mov	r3, r9
 800176a:	4820      	ldr	r0, [pc, #128]	; (80017ec <Print_Function+0xc0>)
 800176c:	f005 fdf6 	bl	800735c <iprintf>
	  printf("%ld,%ld,%ld,%ld,",TIM1->CCR1,TIM1->CCR2,TIM1->CCR3,TIM1->CCR4);
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <Print_Function+0xc4>)
 8001772:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <Print_Function+0xc4>)
 8001776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <Print_Function+0xc4>)
 800177a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <Print_Function+0xc4>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4603      	mov	r3, r0
 8001784:	481b      	ldr	r0, [pc, #108]	; (80017f4 <Print_Function+0xc8>)
 8001786:	f005 fde9 	bl	800735c <iprintf>
	  printf("%f,%f,",Speed_left_target,Speed_right_target);
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <Print_Function+0xcc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe feda 	bl	8000548 <__aeabi_f2d>
 8001794:	4604      	mov	r4, r0
 8001796:	460d      	mov	r5, r1
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <Print_Function+0xd0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fed3 	bl	8000548 <__aeabi_f2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9cd 2300 	strd	r2, r3, [sp]
 80017aa:	4622      	mov	r2, r4
 80017ac:	462b      	mov	r3, r5
 80017ae:	4814      	ldr	r0, [pc, #80]	; (8001800 <Print_Function+0xd4>)
 80017b0:	f005 fdd4 	bl	800735c <iprintf>
	  printf("%f,%f\r\n",Motor.WheelSpeed_Left,Motor.WheelSpeed_Right);
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <Print_Function+0xd8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fec5 	bl	8000548 <__aeabi_f2d>
 80017be:	4604      	mov	r4, r0
 80017c0:	460d      	mov	r5, r1
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <Print_Function+0xd8>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe febe 	bl	8000548 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	e9cd 2300 	strd	r2, r3, [sp]
 80017d4:	4622      	mov	r2, r4
 80017d6:	462b      	mov	r3, r5
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <Print_Function+0xdc>)
 80017da:	f005 fdbf 	bl	800735c <iprintf>
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e6:	bf00      	nop
 80017e8:	2000005c 	.word	0x2000005c
 80017ec:	080094e8 	.word	0x080094e8
 80017f0:	40010000 	.word	0x40010000
 80017f4:	080094f4 	.word	0x080094f4
 80017f8:	20000280 	.word	0x20000280
 80017fc:	20000284 	.word	0x20000284
 8001800:	08009508 	.word	0x08009508
 8001804:	20000020 	.word	0x20000020
 8001808:	08009510 	.word	0x08009510

0800180c <Run_Function>:

void Run_Function()
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	/*已改用串口空闲中断接收*/
	//Read_Speed();

	Motor.Motor_Solve();//解算输出
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <Run_Function+0x3c>)
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	4798      	blx	r3
	HAL_Delay(10);
 8001816:	200a      	movs	r0, #10
 8001818:	f000 ffa8 	bl	800276c <HAL_Delay>

	Write_Speed(Motor.WheelSpeed_Left,Motor.WheelSpeed_Right);//发送
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <Run_Function+0x3c>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <Run_Function+0x3c>)
 8001824:	ed93 7a01 	vldr	s14, [r3, #4]
 8001828:	eef0 0a47 	vmov.f32	s1, s14
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	f7ff fef4 	bl	800161c <Write_Speed>
	HAL_Delay(1);
 8001834:	2001      	movs	r0, #1
 8001836:	f000 ff99 	bl	800276c <HAL_Delay>



	Print_Function();//打印测试
 800183a:	f7ff ff77 	bl	800172c <Print_Function>
	HAL_Delay(1);
 800183e:	2001      	movs	r0, #1
 8001840:	f000 ff94 	bl	800276c <HAL_Delay>



}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000020 	.word	0x20000020

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_DMA_Init+0x4c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <MX_DMA_Init+0x4c>)
 800185c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <MX_DMA_Init+0x4c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2039      	movs	r0, #57	; 0x39
 8001874:	f001 f879 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001878:	2039      	movs	r0, #57	; 0x39
 800187a:	f001 f892 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2045      	movs	r0, #69	; 0x45
 8001884:	f001 f871 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001888:	2045      	movs	r0, #69	; 0x45
 800188a:	f001 f88a 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <MX_GPIO_Init+0x110>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <MX_GPIO_Init+0x110>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <MX_GPIO_Init+0x110>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <MX_GPIO_Init+0x110>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a35      	ldr	r2, [pc, #212]	; (80019ac <MX_GPIO_Init+0x110>)
 80018d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b33      	ldr	r3, [pc, #204]	; (80019ac <MX_GPIO_Init+0x110>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <MX_GPIO_Init+0x110>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a2e      	ldr	r2, [pc, #184]	; (80019ac <MX_GPIO_Init+0x110>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <MX_GPIO_Init+0x110>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <MX_GPIO_Init+0x110>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a27      	ldr	r2, [pc, #156]	; (80019ac <MX_GPIO_Init+0x110>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <MX_GPIO_Init+0x110>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <MX_GPIO_Init+0x110>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a20      	ldr	r2, [pc, #128]	; (80019ac <MX_GPIO_Init+0x110>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <MX_GPIO_Init+0x110>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_GPIO_Init+0x110>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a19      	ldr	r2, [pc, #100]	; (80019ac <MX_GPIO_Init+0x110>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_GPIO_Init+0x110>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <MX_GPIO_Init+0x110>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_GPIO_Init+0x110>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_GPIO_Init+0x110>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = KEY_up_Pin|KEY1_Pin|KEY0_Pin;
 8001976:	f44f 7360 	mov.w	r3, #896	; 0x380
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4808      	ldr	r0, [pc, #32]	; (80019b0 <MX_GPIO_Init+0x114>)
 800198e:	f001 fc25 	bl	80031dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2017      	movs	r0, #23
 8001998:	f000 ffe7 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800199c:	2017      	movs	r0, #23
 800199e:	f001 f800 	bl	80029a2 <HAL_NVIC_EnableIRQ>

}
 80019a2:	bf00      	nop
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40021400 	.word	0x40021400

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b8:	f000 fe66 	bl	8002688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019bc:	f000 f818 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c0:	f7ff ff6c 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 80019c4:	f7ff ff42 	bl	800184c <MX_DMA_Init>
  MX_TIM1_Init();
 80019c8:	f000 f9f8 	bl	8001dbc <MX_TIM1_Init>
  MX_TIM2_Init();
 80019cc:	f000 faba 	bl	8001f44 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019d0:	f000 fb04 	bl	8001fdc <MX_TIM3_Init>
  MX_TIM4_Init();
 80019d4:	f000 fb56 	bl	8002084 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80019d8:	f000 fcf8 	bl	80023cc <MX_USART6_UART_Init>
  MX_UART5_Init();
 80019dc:	f000 fccc 	bl	8002378 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  Driver_Init.Peripheral_Init();
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <main+0x38>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4798      	blx	r3

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Run_Function();
 80019e6:	f7ff ff11 	bl	800180c <Run_Function>
 80019ea:	e7fc      	b.n	80019e6 <main+0x32>
 80019ec:	20000008 	.word	0x20000008

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	; 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 f83a 	bl	8006a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <SystemClock_Config+0xcc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <SystemClock_Config+0xcc>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <SystemClock_Config+0xcc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <SystemClock_Config+0xd0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <SystemClock_Config+0xd0>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <SystemClock_Config+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a60:	2304      	movs	r3, #4
 8001a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a64:	23a8      	movs	r3, #168	; 0xa8
 8001a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 fd65 	bl	8003544 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a80:	f000 f820 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	230f      	movs	r3, #15
 8001a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 ffc6 	bl	8003a34 <HAL_RCC_ClockConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aae:	f000 f809 	bl	8001ac4 <Error_Handler>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3750      	adds	r7, #80	; 0x50
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001acc:	e7fe      	b.n	8001acc <Error_Handler+0x8>
	...

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_MspInit+0x4c>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 fdde 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_up_Pin);
 8001b78:	2080      	movs	r0, #128	; 0x80
 8001b7a:	f001 fccb 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8001b7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b82:	f001 fcc7 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8001b86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b8a:	f001 fcc3 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM2_IRQHandler+0x10>)
 8001b9a:	f002 fcf1 	bl	8004580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000308 	.word	0x20000308

08001ba8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <TIM3_IRQHandler+0x10>)
 8001bae:	f002 fce7 	bl	8004580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000350 	.word	0x20000350

08001bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <TIM4_IRQHandler+0x10>)
 8001bc2:	f002 fcdd 	bl	8004580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000398 	.word	0x20000398

08001bd0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DMA2_Stream1_IRQHandler+0x10>)
 8001bd6:	f001 f897 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000468 	.word	0x20000468

08001be4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <DMA2_Stream6_IRQHandler+0x10>)
 8001bea:	f001 f88d 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200004c8 	.word	0x200004c8

08001bf8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <USART6_IRQHandler+0x10>)
 8001bfe:	f003 fdad 	bl	800575c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000424 	.word	0x20000424

08001c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	return 1;
 8001c10:	2301      	movs	r3, #1
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_kill>:

int _kill(int pid, int sig)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c26:	f004 feef 	bl	8006a08 <__errno>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2216      	movs	r2, #22
 8001c2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_exit>:

void _exit (int status)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffe7 	bl	8001c1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c4e:	e7fe      	b.n	8001c4e <_exit+0x12>

08001c50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00a      	b.n	8001c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c62:	f3af 8000 	nop.w
 8001c66:	4601      	mov	r1, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf0      	blt.n	8001c62 <_read+0x12>
	}

return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e009      	b.n	8001cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fbb9 	bl	800141c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf1      	blt.n	8001c9c <_write+0x12>
	}
	return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_isatty>:

int _isatty(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
	return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f004 fe54 	bl	8006a08 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20020000 	.word	0x20020000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	200002bc 	.word	0x200002bc
 8001d94:	20000540 	.word	0x20000540

08001d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b096      	sub	sp, #88	; 0x58
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2220      	movs	r2, #32
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 fe3f 	bl	8006a78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfa:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001dfc:	4a50      	ldr	r2, [pc, #320]	; (8001f40 <MX_TIM1_Init+0x184>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168000000/10000-1;
 8001e00:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e02:	f244 129f 	movw	r2, #16799	; 0x419f
 8001e06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000000/10000-1;
 8001e0e:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e10:	2263      	movs	r2, #99	; 0x63
 8001e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e26:	4845      	ldr	r0, [pc, #276]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e28:	f002 f824 	bl	8003e74 <HAL_TIM_Base_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e32:	f7ff fe47 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e40:	4619      	mov	r1, r3
 8001e42:	483e      	ldr	r0, [pc, #248]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e44:	f002 fd66 	bl	8004914 <HAL_TIM_ConfigClockSource>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e4e:	f7ff fe39 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e52:	483a      	ldr	r0, [pc, #232]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e54:	f002 f8ce 	bl	8003ff4 <HAL_TIM_PWM_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e5e:	f7ff fe31 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4832      	ldr	r0, [pc, #200]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001e72:	f003 f94f 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e7c:	f7ff fe22 	bl	8001ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e80:	2360      	movs	r3, #96	; 0x60
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4825      	ldr	r0, [pc, #148]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001ea6:	f002 fc73 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001eb0:	f7ff fe08 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481f      	ldr	r0, [pc, #124]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001ebe:	f002 fc67 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001ec8:	f7ff fdfc 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4819      	ldr	r0, [pc, #100]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001ed6:	f002 fc5b 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ee0:	f7ff fdf0 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee8:	220c      	movs	r2, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	4813      	ldr	r0, [pc, #76]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001eee:	f002 fc4f 	bl	8004790 <HAL_TIM_PWM_ConfigChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001ef8:	f7ff fde4 	bl	8001ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4807      	ldr	r0, [pc, #28]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001f20:	f003 f974 	bl	800520c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8001f2a:	f7ff fdcb 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f2e:	4803      	ldr	r0, [pc, #12]	; (8001f3c <MX_TIM1_Init+0x180>)
 8001f30:	f000 f9c6 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8001f34:	bf00      	nop
 8001f36:	3758      	adds	r7, #88	; 0x58
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	200002c0 	.word	0x200002c0
 8001f40:	40010000 	.word	0x40010000

08001f44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001f6a:	f244 129f 	movw	r2, #16799	; 0x419f
 8001f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001f78:	2263      	movs	r2, #99	; 0x63
 8001f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f88:	4813      	ldr	r0, [pc, #76]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001f8a:	f001 ff73 	bl	8003e74 <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f94:	f7ff fd96 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001fa6:	f002 fcb5 	bl	8004914 <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fb0:	f7ff fd88 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_TIM2_Init+0x94>)
 8001fc2:	f003 f8a7 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001fcc:	f7ff fd7a 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000308 	.word	0x20000308

08001fdc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f004 fd44 	bl	8006a78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <MX_TIM3_Init+0xa0>)
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <MX_TIM3_Init+0xa4>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <MX_TIM3_Init+0xa0>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <MX_TIM3_Init+0xa0>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <MX_TIM3_Init+0xa0>)
 800200c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002010:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <MX_TIM3_Init+0xa0>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_TIM3_Init+0xa0>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800201e:	2301      	movs	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002026:	2301      	movs	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002036:	2301      	movs	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_TIM3_Init+0xa0>)
 800204a:	f002 f965 	bl	8004318 <HAL_TIM_Encoder_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002054:	f7ff fd36 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_TIM3_Init+0xa0>)
 8002066:	f003 f855 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002070:	f7ff fd28 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3730      	adds	r7, #48	; 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000350 	.word	0x20000350
 8002080:	40000400 	.word	0x40000400

08002084 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2224      	movs	r2, #36	; 0x24
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f004 fcf0 	bl	8006a78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <MX_TIM4_Init+0xa0>)
 80020a2:	4a21      	ldr	r2, [pc, #132]	; (8002128 <MX_TIM4_Init+0xa4>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <MX_TIM4_Init+0xa0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <MX_TIM4_Init+0xa0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <MX_TIM4_Init+0xa0>)
 80020b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_TIM4_Init+0xa0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_TIM4_Init+0xa0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ce:	2301      	movs	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020de:	2301      	movs	r3, #1
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	480c      	ldr	r0, [pc, #48]	; (8002124 <MX_TIM4_Init+0xa0>)
 80020f2:	f002 f911 	bl	8004318 <HAL_TIM_Encoder_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80020fc:	f7ff fce2 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_TIM4_Init+0xa0>)
 800210e:	f003 f801 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002118:	f7ff fcd4 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000398 	.word	0x20000398
 8002128:	40000800 	.word	0x40000800

0800212c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a18      	ldr	r2, [pc, #96]	; (800219c <HAL_TIM_Base_MspInit+0x70>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10e      	bne.n	800215c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HAL_TIM_Base_MspInit+0x74>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <HAL_TIM_Base_MspInit+0x74>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_TIM_Base_MspInit+0x74>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800215a:	e01a      	b.n	8002192 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d115      	bne.n	8002192 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_TIM_Base_MspInit+0x74>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_TIM_Base_MspInit+0x74>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_TIM_Base_MspInit+0x74>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2101      	movs	r1, #1
 8002186:	201c      	movs	r0, #28
 8002188:	f000 fbef 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800218c:	201c      	movs	r0, #28
 800218e:	f000 fc08 	bl	80029a2 <HAL_NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08c      	sub	sp, #48	; 0x30
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a3a      	ldr	r2, [pc, #232]	; (80022ac <HAL_TIM_Encoder_MspInit+0x108>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d134      	bne.n	8002230 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a31      	ldr	r2, [pc, #196]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021fe:	2330      	movs	r3, #48	; 0x30
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800220e:	2302      	movs	r3, #2
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	4826      	ldr	r0, [pc, #152]	; (80022b4 <HAL_TIM_Encoder_MspInit+0x110>)
 800221a:	f000 ffdf 	bl	80031dc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201d      	movs	r0, #29
 8002224:	f000 fba1 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002228:	201d      	movs	r0, #29
 800222a:	f000 fbba 	bl	80029a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800222e:	e039      	b.n	80022a4 <HAL_TIM_Encoder_MspInit+0x100>
  else if(tim_encoderHandle->Instance==TIM4)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <HAL_TIM_Encoder_MspInit+0x114>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d134      	bne.n	80022a4 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002272:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002284:	2302      	movs	r3, #2
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	480b      	ldr	r0, [pc, #44]	; (80022bc <HAL_TIM_Encoder_MspInit+0x118>)
 8002290:	f000 ffa4 	bl	80031dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	201e      	movs	r0, #30
 800229a:	f000 fb66 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800229e:	201e      	movs	r0, #30
 80022a0:	f000 fb7f 	bl	80029a2 <HAL_NVIC_EnableIRQ>
}
 80022a4:	bf00      	nop
 80022a6:	3730      	adds	r7, #48	; 0x30
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40020c00 	.word	0x40020c00

080022c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_TIM_MspPostInit+0xa8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d13d      	bne.n	800235e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_TIM_MspPostInit+0xac>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a20      	ldr	r2, [pc, #128]	; (800236c <HAL_TIM_MspPostInit+0xac>)
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_TIM_MspPostInit+0xac>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_TIM_MspPostInit+0xac>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_TIM_MspPostInit+0xac>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_TIM_MspPostInit+0xac>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    PE9     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800231a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800232c:	2301      	movs	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	480e      	ldr	r0, [pc, #56]	; (8002370 <HAL_TIM_MspPostInit+0xb0>)
 8002338:	f000 ff50 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800233c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800234e:	2301      	movs	r3, #1
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	4806      	ldr	r0, [pc, #24]	; (8002374 <HAL_TIM_MspPostInit+0xb4>)
 800235a:	f000 ff3f 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40010000 	.word	0x40010000
 800236c:	40023800 	.word	0x40023800
 8002370:	40021000 	.word	0x40021000
 8002374:	40020000 	.word	0x40020000

08002378 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_UART5_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_UART5_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_UART5_Init+0x4c>)
 8002384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002388:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_UART5_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_UART5_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_UART5_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_UART5_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_UART5_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_UART5_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_UART5_Init+0x4c>)
 80023b0:	f002 ff92 	bl	80052d8 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80023ba:	f7ff fb83 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200003e0 	.word	0x200003e0
 80023c8:	40005000 	.word	0x40005000

080023cc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_USART6_UART_Init+0x50>)
 80023d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_USART6_UART_Init+0x4c>)
 8002404:	f002 ff68 	bl	80052d8 <HAL_UART_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800240e:	f7ff fb59 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000424 	.word	0x20000424
 800241c:	40011400 	.word	0x40011400

08002420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a74      	ldr	r2, [pc, #464]	; (8002610 <HAL_UART_MspInit+0x1f0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d14b      	bne.n	80024da <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4b73      	ldr	r3, [pc, #460]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a72      	ldr	r2, [pc, #456]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 800244c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b70      	ldr	r3, [pc, #448]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b6c      	ldr	r3, [pc, #432]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a6b      	ldr	r2, [pc, #428]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b69      	ldr	r3, [pc, #420]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a64      	ldr	r2, [pc, #400]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024a8:	2308      	movs	r3, #8
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	4619      	mov	r1, r3
 80024b2:	4859      	ldr	r0, [pc, #356]	; (8002618 <HAL_UART_MspInit+0x1f8>)
 80024b4:	f000 fe92 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024b8:	2304      	movs	r3, #4
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024c8:	2308      	movs	r3, #8
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	4619      	mov	r1, r3
 80024d2:	4852      	ldr	r0, [pc, #328]	; (800261c <HAL_UART_MspInit+0x1fc>)
 80024d4:	f000 fe82 	bl	80031dc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024d8:	e095      	b.n	8002606 <HAL_UART_MspInit+0x1e6>
  else if(uartHandle->Instance==USART6)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a50      	ldr	r2, [pc, #320]	; (8002620 <HAL_UART_MspInit+0x200>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	f040 8090 	bne.w	8002606 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4a49      	ldr	r2, [pc, #292]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 80024f0:	f043 0320 	orr.w	r3, r3, #32
 80024f4:	6453      	str	r3, [r2, #68]	; 0x44
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a42      	ldr	r2, [pc, #264]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_UART_MspInit+0x1f4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800251e:	23c0      	movs	r3, #192	; 0xc0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800252e:	2308      	movs	r3, #8
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	4837      	ldr	r0, [pc, #220]	; (8002618 <HAL_UART_MspInit+0x1f8>)
 800253a:	f000 fe4f 	bl	80031dc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800253e:	4b39      	ldr	r3, [pc, #228]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002540:	4a39      	ldr	r2, [pc, #228]	; (8002628 <HAL_UART_MspInit+0x208>)
 8002542:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002544:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002546:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800254a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_UART_MspInit+0x204>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002554:	2200      	movs	r2, #0
 8002556:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_UART_MspInit+0x204>)
 800255a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800255e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002560:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_UART_MspInit+0x204>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002578:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_UART_MspInit+0x204>)
 800257a:	2200      	movs	r2, #0
 800257c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800257e:	4829      	ldr	r0, [pc, #164]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002580:	f000 fa2a 	bl	80029d8 <HAL_DMA_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_MspInit+0x16e>
      Error_Handler();
 800258a:	f7ff fa9b 	bl	8001ac4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002592:	639a      	str	r2, [r3, #56]	; 0x38
 8002594:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_UART_MspInit+0x204>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_UART_MspInit+0x20c>)
 800259c:	4a24      	ldr	r2, [pc, #144]	; (8002630 <HAL_UART_MspInit+0x210>)
 800259e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80025a6:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ba:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80025da:	4814      	ldr	r0, [pc, #80]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025dc:	f000 f9fc 	bl	80029d8 <HAL_DMA_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80025e6:	f7ff fa6d 	bl	8001ac4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34
 80025f0:	4a0e      	ldr	r2, [pc, #56]	; (800262c <HAL_UART_MspInit+0x20c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2047      	movs	r0, #71	; 0x47
 80025fc:	f000 f9b5 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002600:	2047      	movs	r0, #71	; 0x47
 8002602:	f000 f9ce 	bl	80029a2 <HAL_NVIC_EnableIRQ>
}
 8002606:	bf00      	nop
 8002608:	3730      	adds	r7, #48	; 0x30
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40005000 	.word	0x40005000
 8002614:	40023800 	.word	0x40023800
 8002618:	40020800 	.word	0x40020800
 800261c:	40020c00 	.word	0x40020c00
 8002620:	40011400 	.word	0x40011400
 8002624:	20000468 	.word	0x20000468
 8002628:	40026428 	.word	0x40026428
 800262c:	200004c8 	.word	0x200004c8
 8002630:	400264a0 	.word	0x400264a0

08002634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800266c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800263a:	490e      	ldr	r1, [pc, #56]	; (8002674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002650:	4c0b      	ldr	r4, [pc, #44]	; (8002680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800265e:	f7ff fb9b 	bl	8001d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002662:	f004 f9d7 	bl	8006a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7ff f9a5 	bl	80019b4 <main>
  bx  lr    
 800266a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800266c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002678:	08009924 	.word	0x08009924
  ldr r2, =_sbss
 800267c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002680:	2000053c 	.word	0x2000053c

08002684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_Init+0x40>)
 8002692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_Init+0x40>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_Init+0x40>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f000 f94f 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b6:	200f      	movs	r0, #15
 80026b8:	f000 f808 	bl	80026cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026bc:	f7ff fa08 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x54>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x58>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f967 	bl	80029be <HAL_SYSTICK_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00e      	b.n	8002718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d80a      	bhi.n	8002716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002700:	2200      	movs	r2, #0
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f000 f92f 	bl	800296a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800270c:	4a06      	ldr	r2, [pc, #24]	; (8002728 <HAL_InitTick+0x5c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000006c 	.word	0x2000006c
 8002724:	20000074 	.word	0x20000074
 8002728:	20000070 	.word	0x20000070

0800272c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x20>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x24>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_IncTick+0x24>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000074 	.word	0x20000074
 8002750:	20000528 	.word	0x20000528

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000528 	.word	0x20000528

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d005      	beq.n	8002792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_Delay+0x44>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002792:	bf00      	nop
 8002794:	f7ff ffde 	bl	8002754 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d8f7      	bhi.n	8002794 <HAL_Delay+0x28>
  {
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000074 	.word	0x20000074

080027b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <__NVIC_GetPriorityGrouping+0x18>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	f003 0307 	and.w	r3, r3, #7
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	2b00      	cmp	r3, #0
 8002828:	db0b      	blt.n	8002842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4907      	ldr	r1, [pc, #28]	; (8002850 <__NVIC_EnableIRQ+0x38>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2001      	movs	r0, #1
 800283a:	fa00 f202 	lsl.w	r2, r0, r2
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db0a      	blt.n	800287e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	490c      	ldr	r1, [pc, #48]	; (80028a0 <__NVIC_SetPriority+0x4c>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	440b      	add	r3, r1
 8002878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800287c:	e00a      	b.n	8002894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4908      	ldr	r1, [pc, #32]	; (80028a4 <__NVIC_SetPriority+0x50>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3b04      	subs	r3, #4
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	440b      	add	r3, r1
 8002892:	761a      	strb	r2, [r3, #24]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f1c3 0307 	rsb	r3, r3, #7
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf28      	it	cs
 80028c6:	2304      	movcs	r3, #4
 80028c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d902      	bls.n	80028d8 <NVIC_EncodePriority+0x30>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3b03      	subs	r3, #3
 80028d6:	e000      	b.n	80028da <NVIC_EncodePriority+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	4313      	orrs	r3, r2
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff8e 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff29 	bl	80027b4 <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff3e 	bl	80027fc <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff8e 	bl	80028a8 <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5d 	bl	8002854 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff31 	bl	8002818 <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa2 	bl	8002910 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff feb6 	bl	8002754 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e099      	b.n	8002b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a14:	e00f      	b.n	8002a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a16:	f7ff fe9d 	bl	8002754 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d908      	bls.n	8002a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e078      	b.n	8002b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e8      	bne.n	8002a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_DMA_Init+0x158>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d107      	bne.n	8002aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f023 0307 	bic.w	r3, r3, #7
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d117      	bne.n	8002afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00e      	beq.n	8002afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fb01 	bl	80030e4 <DMA_CheckFifoParam>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002af6:	2301      	movs	r3, #1
 8002af8:	e016      	b.n	8002b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fab8 	bl	8003078 <DMA_CalcBaseAndBitshift>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	223f      	movs	r2, #63	; 0x3f
 8002b12:	409a      	lsls	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	f010803f 	.word	0xf010803f

08002b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_Start_IT+0x26>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e040      	b.n	8002bdc <HAL_DMA_Start_IT+0xa8>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d12f      	bne.n	8002bce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fa4a 	bl	800301c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	223f      	movs	r2, #63	; 0x3f
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0216 	orr.w	r2, r2, #22
 8002ba2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e005      	b.n	8002bda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bf2:	f7ff fdaf 	bl	8002754 <HAL_GetTick>
 8002bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e052      	b.n	8002cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0216 	bic.w	r2, r2, #22
 8002c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_DMA_Abort+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c66:	e013      	b.n	8002c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c68:	f7ff fd74 	bl	8002754 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d90c      	bls.n	8002c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e015      	b.n	8002cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e4      	bne.n	8002c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	223f      	movs	r2, #63	; 0x3f
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00c      	b.n	8002cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d14:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_DMA_IRQHandler+0x248>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8e      	ldr	r2, [pc, #568]	; (8002f54 <HAL_DMA_IRQHandler+0x24c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2208      	movs	r2, #8
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	2208      	movs	r2, #8
 8002d62:	409a      	lsls	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0202 	orr.w	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	2204      	movs	r2, #4
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2204      	movs	r2, #4
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	2210      	movs	r2, #16
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d043      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03c      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2210      	movs	r2, #16
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d108      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d024      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e01f      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0208 	bic.w	r2, r2, #8
 8002e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808f 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8087 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d136      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0216 	bic.w	r2, r2, #22
 8002ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x1da>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0208 	bic.w	r2, r2, #8
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	223f      	movs	r2, #63	; 0x3f
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07e      	beq.n	8003014 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
        }
        return;
 8002f1e:	e079      	b.n	8003014 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d031      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e02c      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
 8002f4e:	bf00      	nop
 8002f50:	2000006c 	.word	0x2000006c
 8002f54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d023      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e01e      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0210 	bic.w	r2, r2, #16
 8002f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d032      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d307      	bcc.n	8002ff0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f2      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x2cc>
 8002fee:	e000      	b.n	8002ff2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ff0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e000      	b.n	8003016 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003014:	bf00      	nop
    }
  }
}
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d108      	bne.n	800305c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800305a:	e007      	b.n	800306c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	60da      	str	r2, [r3, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3b10      	subs	r3, #16
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <DMA_CalcBaseAndBitshift+0x64>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003092:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d909      	bls.n	80030ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	1d1a      	adds	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	659a      	str	r2, [r3, #88]	; 0x58
 80030b8:	e007      	b.n	80030ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	aaaaaaab 	.word	0xaaaaaaab
 80030e0:	08009530 	.word	0x08009530

080030e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11f      	bne.n	800313e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d856      	bhi.n	80031b2 <DMA_CheckFifoParam+0xce>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <DMA_CheckFifoParam+0x28>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	0800311d 	.word	0x0800311d
 8003110:	0800312f 	.word	0x0800312f
 8003114:	0800311d 	.word	0x0800311d
 8003118:	080031b3 	.word	0x080031b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d046      	beq.n	80031b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312c:	e043      	b.n	80031b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003136:	d140      	bne.n	80031ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e03d      	b.n	80031ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d121      	bne.n	800318c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d837      	bhi.n	80031be <DMA_CheckFifoParam+0xda>
 800314e:	a201      	add	r2, pc, #4	; (adr r2, 8003154 <DMA_CheckFifoParam+0x70>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	08003165 	.word	0x08003165
 8003158:	0800316b 	.word	0x0800316b
 800315c:	08003165 	.word	0x08003165
 8003160:	0800317d 	.word	0x0800317d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
      break;
 8003168:	e030      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d025      	beq.n	80031c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317a:	e022      	b.n	80031c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003184:	d11f      	bne.n	80031c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800318a:	e01c      	b.n	80031c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d903      	bls.n	800319a <DMA_CheckFifoParam+0xb6>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d003      	beq.n	80031a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003198:	e018      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      break;
 800319e:	e015      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      break;
 80031b0:	e00b      	b.n	80031ca <DMA_CheckFifoParam+0xe6>
      break;
 80031b2:	bf00      	nop
 80031b4:	e00a      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031b6:	bf00      	nop
 80031b8:	e008      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
 80031bc:	e006      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031be:	bf00      	nop
 80031c0:	e004      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;   
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
    }
  } 
  
  return status; 
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e16b      	b.n	80034d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 815a 	bne.w	80034ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	2b02      	cmp	r3, #2
 800322c:	d130      	bne.n	8003290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d017      	beq.n	80032cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d123      	bne.n	8003320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3208      	adds	r2, #8
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80b4 	beq.w	80034ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b60      	ldr	r3, [pc, #384]	; (80034e8 <HAL_GPIO_Init+0x30c>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a5f      	ldr	r2, [pc, #380]	; (80034e8 <HAL_GPIO_Init+0x30c>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <HAL_GPIO_Init+0x30c>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337e:	4a5b      	ldr	r2, [pc, #364]	; (80034ec <HAL_GPIO_Init+0x310>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_GPIO_Init+0x314>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d02b      	beq.n	8003402 <HAL_GPIO_Init+0x226>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a51      	ldr	r2, [pc, #324]	; (80034f4 <HAL_GPIO_Init+0x318>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d025      	beq.n	80033fe <HAL_GPIO_Init+0x222>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a50      	ldr	r2, [pc, #320]	; (80034f8 <HAL_GPIO_Init+0x31c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01f      	beq.n	80033fa <HAL_GPIO_Init+0x21e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4f      	ldr	r2, [pc, #316]	; (80034fc <HAL_GPIO_Init+0x320>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d019      	beq.n	80033f6 <HAL_GPIO_Init+0x21a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a4e      	ldr	r2, [pc, #312]	; (8003500 <HAL_GPIO_Init+0x324>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_GPIO_Init+0x216>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4d      	ldr	r2, [pc, #308]	; (8003504 <HAL_GPIO_Init+0x328>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00d      	beq.n	80033ee <HAL_GPIO_Init+0x212>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4c      	ldr	r2, [pc, #304]	; (8003508 <HAL_GPIO_Init+0x32c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <HAL_GPIO_Init+0x20e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4b      	ldr	r2, [pc, #300]	; (800350c <HAL_GPIO_Init+0x330>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_GPIO_Init+0x20a>
 80033e2:	2307      	movs	r3, #7
 80033e4:	e00e      	b.n	8003404 <HAL_GPIO_Init+0x228>
 80033e6:	2308      	movs	r3, #8
 80033e8:	e00c      	b.n	8003404 <HAL_GPIO_Init+0x228>
 80033ea:	2306      	movs	r3, #6
 80033ec:	e00a      	b.n	8003404 <HAL_GPIO_Init+0x228>
 80033ee:	2305      	movs	r3, #5
 80033f0:	e008      	b.n	8003404 <HAL_GPIO_Init+0x228>
 80033f2:	2304      	movs	r3, #4
 80033f4:	e006      	b.n	8003404 <HAL_GPIO_Init+0x228>
 80033f6:	2303      	movs	r3, #3
 80033f8:	e004      	b.n	8003404 <HAL_GPIO_Init+0x228>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e002      	b.n	8003404 <HAL_GPIO_Init+0x228>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_GPIO_Init+0x228>
 8003402:	2300      	movs	r3, #0
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f002 0203 	and.w	r2, r2, #3
 800340a:	0092      	lsls	r2, r2, #2
 800340c:	4093      	lsls	r3, r2
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003414:	4935      	ldr	r1, [pc, #212]	; (80034ec <HAL_GPIO_Init+0x310>)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	3302      	adds	r3, #2
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003422:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_GPIO_Init+0x334>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003446:	4a32      	ldr	r2, [pc, #200]	; (8003510 <HAL_GPIO_Init+0x334>)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_GPIO_Init+0x334>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <HAL_GPIO_Init+0x334>)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_GPIO_Init+0x334>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_GPIO_Init+0x334>)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_GPIO_Init+0x334>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034c4:	4a12      	ldr	r2, [pc, #72]	; (8003510 <HAL_GPIO_Init+0x334>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3301      	adds	r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	f67f ae90 	bls.w	80031f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40013800 	.word	0x40013800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020c00 	.word	0x40020c00
 8003500:	40021000 	.word	0x40021000
 8003504:	40021400 	.word	0x40021400
 8003508:	40021800 	.word	0x40021800
 800350c:	40021c00 	.word	0x40021c00
 8003510:	40013c00 	.word	0x40013c00

08003514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fd50 	bl	8000fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e267      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d075      	beq.n	800364e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b04      	cmp	r3, #4
 800356c:	d00c      	beq.n	8003588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4b85      	ldr	r3, [pc, #532]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003576:	2b08      	cmp	r3, #8
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b82      	ldr	r3, [pc, #520]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b7e      	ldr	r3, [pc, #504]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d157      	bne.n	800364c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e242      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x74>
 80035aa:	4b76      	ldr	r3, [pc, #472]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a75      	ldr	r2, [pc, #468]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x98>
 80035c2:	4b70      	ldr	r3, [pc, #448]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6f      	ldr	r2, [pc, #444]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b6d      	ldr	r3, [pc, #436]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6c      	ldr	r2, [pc, #432]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035dc:	4b69      	ldr	r3, [pc, #420]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a68      	ldr	r2, [pc, #416]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a65      	ldr	r2, [pc, #404]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7ff f8aa 	bl	8002754 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003604:	f7ff f8a6 	bl	8002754 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e207      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b5b      	ldr	r3, [pc, #364]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xc0>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7ff f896 	bl	8002754 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362c:	f7ff f892 	bl	8002754 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1f3      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0xe8>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	4b4a      	ldr	r3, [pc, #296]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b44      	ldr	r3, [pc, #272]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e1c7      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4937      	ldr	r1, [pc, #220]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	e03a      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b34      	ldr	r3, [pc, #208]	; (8003788 <HAL_RCC_OscConfig+0x244>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7ff f84b 	bl	8002754 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c2:	f7ff f847 	bl	8002754 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1a8      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4925      	ldr	r1, [pc, #148]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <HAL_RCC_OscConfig+0x244>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7ff f82a 	bl	8002754 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003704:	f7ff f826 	bl	8002754 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e187      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d036      	beq.n	800379c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_RCC_OscConfig+0x248>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7ff f80a 	bl	8002754 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003744:	f7ff f806 	bl	8002754 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e167      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x200>
 8003762:	e01b      	b.n	800379c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_RCC_OscConfig+0x248>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376a:	f7fe fff3 	bl	8002754 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	e00e      	b.n	8003790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003772:	f7fe ffef 	bl	8002754 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d907      	bls.n	8003790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e150      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
 8003784:	40023800 	.word	0x40023800
 8003788:	42470000 	.word	0x42470000
 800378c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ea      	bne.n	8003772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8097 	beq.w	80038d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b81      	ldr	r3, [pc, #516]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	4b7d      	ldr	r3, [pc, #500]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a7c      	ldr	r2, [pc, #496]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b7a      	ldr	r3, [pc, #488]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b77      	ldr	r3, [pc, #476]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e6:	4b74      	ldr	r3, [pc, #464]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a73      	ldr	r2, [pc, #460]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fe ffaf 	bl	8002754 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fe ffab 	bl	8002754 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e10c      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x2ea>
 8003820:	4b64      	ldr	r3, [pc, #400]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	e01c      	b.n	8003868 <HAL_RCC_OscConfig+0x324>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b05      	cmp	r3, #5
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x30c>
 8003836:	4b5f      	ldr	r3, [pc, #380]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a5e      	ldr	r2, [pc, #376]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	4b5c      	ldr	r3, [pc, #368]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a5b      	ldr	r2, [pc, #364]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0x324>
 8003850:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a57      	ldr	r2, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
 800385c:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a54      	ldr	r2, [pc, #336]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003862:	f023 0304 	bic.w	r3, r3, #4
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d015      	beq.n	800389c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fe ff70 	bl	8002754 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fe ff6c 	bl	8002754 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0cb      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	4b49      	ldr	r3, [pc, #292]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ee      	beq.n	8003878 <HAL_RCC_OscConfig+0x334>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fe ff5a 	bl	8002754 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fe ff56 	bl	8002754 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0b5      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ee      	bne.n	80038a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	4a38      	ldr	r2, [pc, #224]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a1 	beq.w	8003a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e2:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d05c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d141      	bne.n	800397a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe ff2a 	bl	8002754 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe ff26 	bl	8002754 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e087      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	491b      	ldr	r1, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x478>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fe feff 	bl	8002754 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395a:	f7fe fefb 	bl	8002754 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e05c      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x416>
 8003978:	e054      	b.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x478>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fe fee8 	bl	8002754 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003988:	f7fe fee4 	bl	8002754 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e045      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x444>
 80039a6:	e03d      	b.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e038      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40007000 	.word	0x40007000
 80039bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x4ec>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d028      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d121      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d11a      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039f0:	4013      	ands	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d111      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0cc      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b68      	ldr	r3, [pc, #416]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d90c      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b65      	ldr	r3, [pc, #404]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b8      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	494d      	ldr	r1, [pc, #308]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d044      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d119      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e067      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4934      	ldr	r1, [pc, #208]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fe fe16 	bl	8002754 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fe fe12 	bl	8002754 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e04f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d20c      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b22      	ldr	r3, [pc, #136]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4916      	ldr	r1, [pc, #88]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bba:	f000 f821 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fd76 	bl	80026cc <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023c00 	.word	0x40023c00
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	08009518 	.word	0x08009518
 8003bf8:	2000006c 	.word	0x2000006c
 8003bfc:	20000070 	.word	0x20000070

08003c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c04:	b094      	sub	sp, #80	; 0x50
 8003c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c10:	2300      	movs	r3, #0
 8003c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c18:	4b79      	ldr	r3, [pc, #484]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d00d      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x40>
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	f200 80e1 	bhi.w	8003dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x34>
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c32:	e0db      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b73      	ldr	r3, [pc, #460]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c38:	e0db      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3a:	4b73      	ldr	r3, [pc, #460]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c3e:	e0d8      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c40:	4b6f      	ldr	r3, [pc, #444]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4a:	4b6d      	ldr	r3, [pc, #436]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d063      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c56:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	0159      	lsls	r1, r3, #5
 8003c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c84:	0150      	lsls	r0, r2, #5
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	1a51      	subs	r1, r2, r1
 8003c8e:	6139      	str	r1, [r7, #16]
 8003c90:	4629      	mov	r1, r5
 8003c92:	eb63 0301 	sbc.w	r3, r3, r1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca4:	4659      	mov	r1, fp
 8003ca6:	018b      	lsls	r3, r1, #6
 8003ca8:	4651      	mov	r1, sl
 8003caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cae:	4651      	mov	r1, sl
 8003cb0:	018a      	lsls	r2, r1, #6
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003cb8:	4659      	mov	r1, fp
 8003cba:	eb63 0901 	sbc.w	r9, r3, r1
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd2:	4690      	mov	r8, r2
 8003cd4:	4699      	mov	r9, r3
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	eb18 0303 	adds.w	r3, r8, r3
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	462b      	mov	r3, r5
 8003ce0:	eb49 0303 	adc.w	r3, r9, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	024b      	lsls	r3, r1, #9
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	024a      	lsls	r2, r1, #9
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d06:	2200      	movs	r2, #0
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d10:	f7fc ff9a 	bl	8000c48 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4613      	mov	r3, r2
 8003d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d1c:	e058      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1e:	4b38      	ldr	r3, [pc, #224]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	2200      	movs	r2, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	4611      	mov	r1, r2
 8003d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	2300      	movs	r3, #0
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
 8003d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d38:	4642      	mov	r2, r8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	f04f 0000 	mov.w	r0, #0
 8003d40:	f04f 0100 	mov.w	r1, #0
 8003d44:	0159      	lsls	r1, r3, #5
 8003d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d4a:	0150      	lsls	r0, r2, #5
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4641      	mov	r1, r8
 8003d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d56:	4649      	mov	r1, r9
 8003d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d70:	ebb2 040a 	subs.w	r4, r2, sl
 8003d74:	eb63 050b 	sbc.w	r5, r3, fp
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	00eb      	lsls	r3, r5, #3
 8003d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d86:	00e2      	lsls	r2, r4, #3
 8003d88:	4614      	mov	r4, r2
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	4643      	mov	r3, r8
 8003d8e:	18e3      	adds	r3, r4, r3
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	464b      	mov	r3, r9
 8003d94:	eb45 0303 	adc.w	r3, r5, r3
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003da6:	4629      	mov	r1, r5
 8003da8:	028b      	lsls	r3, r1, #10
 8003daa:	4621      	mov	r1, r4
 8003dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db0:	4621      	mov	r1, r4
 8003db2:	028a      	lsls	r2, r1, #10
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	61fa      	str	r2, [r7, #28]
 8003dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc4:	f7fc ff40 	bl	8000c48 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dea:	e002      	b.n	8003df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3750      	adds	r7, #80	; 0x50
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	00f42400 	.word	0x00f42400
 8003e08:	007a1200 	.word	0x007a1200

08003e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	2000006c 	.word	0x2000006c

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e28:	f7ff fff0 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0a9b      	lsrs	r3, r3, #10
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4903      	ldr	r1, [pc, #12]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40023800 	.word	0x40023800
 8003e48:	08009528 	.word	0x08009528

08003e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e50:	f7ff ffdc 	bl	8003e0c <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	0b5b      	lsrs	r3, r3, #13
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	; (8003e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08009528 	.word	0x08009528

08003e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e041      	b.n	8003f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe f946 	bl	800212c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fe1e 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d001      	beq.n	8003f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e04e      	b.n	8003fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f56:	d01d      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <HAL_TIM_Base_Start_IT+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d111      	bne.n	8003fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d010      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0201 	orr.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	e007      	b.n	8003fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40010400 	.word	0x40010400
 8003fec:	40014000 	.word	0x40014000
 8003ff0:	40001800 	.word	0x40001800

08003ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e041      	b.n	800408a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f839 	bl	8004092 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fd5e 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d109      	bne.n	80040cc <HAL_TIM_PWM_Start+0x24>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	e022      	b.n	8004112 <HAL_TIM_PWM_Start+0x6a>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d109      	bne.n	80040e6 <HAL_TIM_PWM_Start+0x3e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e015      	b.n	8004112 <HAL_TIM_PWM_Start+0x6a>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d109      	bne.n	8004100 <HAL_TIM_PWM_Start+0x58>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	bf14      	ite	ne
 80040f8:	2301      	movne	r3, #1
 80040fa:	2300      	moveq	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e008      	b.n	8004112 <HAL_TIM_PWM_Start+0x6a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07c      	b.n	8004214 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_TIM_PWM_Start+0x82>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	e013      	b.n	8004152 <HAL_TIM_PWM_Start+0xaa>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b04      	cmp	r3, #4
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Start+0x92>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004138:	e00b      	b.n	8004152 <HAL_TIM_PWM_Start+0xaa>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004148:	e003      	b.n	8004152 <HAL_TIM_PWM_Start+0xaa>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	6839      	ldr	r1, [r7, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 ffb4 	bl	80050c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2d      	ldr	r2, [pc, #180]	; (800421c <HAL_TIM_PWM_Start+0x174>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <HAL_TIM_PWM_Start+0xcc>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <HAL_TIM_PWM_Start+0x178>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_TIM_PWM_Start+0xd0>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_TIM_PWM_Start+0xd2>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a22      	ldr	r2, [pc, #136]	; (800421c <HAL_TIM_PWM_Start+0x174>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_TIM_PWM_Start+0x136>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d01d      	beq.n	80041de <HAL_TIM_PWM_Start+0x136>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <HAL_TIM_PWM_Start+0x17c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d018      	beq.n	80041de <HAL_TIM_PWM_Start+0x136>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <HAL_TIM_PWM_Start+0x180>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_TIM_PWM_Start+0x136>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1c      	ldr	r2, [pc, #112]	; (800422c <HAL_TIM_PWM_Start+0x184>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_TIM_PWM_Start+0x136>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a16      	ldr	r2, [pc, #88]	; (8004220 <HAL_TIM_PWM_Start+0x178>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_TIM_PWM_Start+0x136>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_TIM_PWM_Start+0x188>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_TIM_PWM_Start+0x136>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a16      	ldr	r2, [pc, #88]	; (8004234 <HAL_TIM_PWM_Start+0x18c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d111      	bne.n	8004202 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b06      	cmp	r3, #6
 80041ee:	d010      	beq.n	8004212 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004200:	e007      	b.n	8004212 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400
 8004224:	40000400 	.word	0x40000400
 8004228:	40000800 	.word	0x40000800
 800422c:	40000c00 	.word	0x40000c00
 8004230:	40014000 	.word	0x40014000
 8004234:	40001800 	.word	0x40001800

08004238 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 ff3c 	bl	80050c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2e      	ldr	r2, [pc, #184]	; (8004310 <HAL_TIM_PWM_Stop+0xd8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIM_PWM_Stop+0x2c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <HAL_TIM_PWM_Stop+0xdc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_TIM_PWM_Stop+0x30>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_TIM_PWM_Stop+0x32>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d017      	beq.n	800429e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	f241 1311 	movw	r3, #4369	; 0x1111
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <HAL_TIM_PWM_Stop+0x66>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	f240 4344 	movw	r3, #1092	; 0x444
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d107      	bne.n	800429e <HAL_TIM_PWM_Stop+0x66>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800429c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_TIM_PWM_Stop+0x96>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	f240 4344 	movw	r3, #1092	; 0x444
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d107      	bne.n	80042ce <HAL_TIM_PWM_Stop+0x96>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Stop+0xa6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	e013      	b.n	8004306 <HAL_TIM_PWM_Stop+0xce>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Stop+0xb6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ec:	e00b      	b.n	8004306 <HAL_TIM_PWM_Stop+0xce>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Stop+0xc6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042fc:	e003      	b.n	8004306 <HAL_TIM_PWM_Stop+0xce>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40010000 	.word	0x40010000
 8004314:	40010400 	.word	0x40010400

08004318 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e097      	b.n	800445c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fd ff2f 	bl	80021a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435c:	f023 0307 	bic.w	r3, r3, #7
 8004360:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f000 fbc1 	bl	8004af4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	4313      	orrs	r3, r2
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043b8:	f023 030c 	bic.w	r3, r3, #12
 80043bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	4313      	orrs	r3, r2
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	011a      	lsls	r2, r3, #4
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	031b      	lsls	r3, r3, #12
 80043e8:	4313      	orrs	r3, r2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	4313      	orrs	r3, r2
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004474:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800447c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004484:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800448c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d110      	bne.n	80044b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d102      	bne.n	80044a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800449a:	7b7b      	ldrb	r3, [r7, #13]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d001      	beq.n	80044a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e069      	b.n	8004578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044b4:	e031      	b.n	800451a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d110      	bne.n	80044de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044bc:	7bbb      	ldrb	r3, [r7, #14]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d102      	bne.n	80044c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044c2:	7b3b      	ldrb	r3, [r7, #12]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d001      	beq.n	80044cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e055      	b.n	8004578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044dc:	e01d      	b.n	800451a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d108      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80044e4:	7bbb      	ldrb	r3, [r7, #14]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044ea:	7b7b      	ldrb	r3, [r7, #13]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d102      	bne.n	80044f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80044f0:	7b3b      	ldrb	r3, [r7, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e03e      	b.n	8004578 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_TIM_Encoder_Start+0xc4>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d008      	beq.n	8004538 <HAL_TIM_Encoder_Start+0xd4>
 8004526:	e00f      	b.n	8004548 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2201      	movs	r2, #1
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fdc9 	bl	80050c8 <TIM_CCxChannelCmd>
      break;
 8004536:	e016      	b.n	8004566 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2201      	movs	r2, #1
 800453e:	2104      	movs	r1, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fdc1 	bl	80050c8 <TIM_CCxChannelCmd>
      break;
 8004546:	e00e      	b.n	8004566 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2201      	movs	r2, #1
 800454e:	2100      	movs	r1, #0
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fdb9 	bl	80050c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	2104      	movs	r1, #4
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fdb2 	bl	80050c8 <TIM_CCxChannelCmd>
      break;
 8004564:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0202 	mvn.w	r2, #2
 80045ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fa77 	bl	8004ab6 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa69 	bl	8004aa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa7a 	bl	8004aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0204 	mvn.w	r2, #4
 8004600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa4d 	bl	8004ab6 <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa3f 	bl	8004aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fa50 	bl	8004aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b08      	cmp	r3, #8
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b08      	cmp	r3, #8
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0208 	mvn.w	r2, #8
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa23 	bl	8004ab6 <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa15 	bl	8004aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fa26 	bl	8004aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b10      	cmp	r3, #16
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0210 	mvn.w	r2, #16
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2208      	movs	r2, #8
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f9f9 	bl	8004ab6 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9eb 	bl	8004aa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9fc 	bl	8004aca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d10e      	bne.n	8004704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0201 	mvn.w	r2, #1
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fc fc98 	bl	8001034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d10e      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d107      	bne.n	8004730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fdca 	bl	80052c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d10e      	bne.n	800475c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d107      	bne.n	800475c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9c1 	bl	8004ade <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d10e      	bne.n	8004788 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b20      	cmp	r3, #32
 8004776:	d107      	bne.n	8004788 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0220 	mvn.w	r2, #32
 8004780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fd94 	bl	80052b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e0ae      	b.n	800490c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b0c      	cmp	r3, #12
 80047ba:	f200 809f 	bhi.w	80048fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	080048fd 	.word	0x080048fd
 80047cc:	080048fd 	.word	0x080048fd
 80047d0:	080048fd 	.word	0x080048fd
 80047d4:	08004839 	.word	0x08004839
 80047d8:	080048fd 	.word	0x080048fd
 80047dc:	080048fd 	.word	0x080048fd
 80047e0:	080048fd 	.word	0x080048fd
 80047e4:	0800487b 	.word	0x0800487b
 80047e8:	080048fd 	.word	0x080048fd
 80047ec:	080048fd 	.word	0x080048fd
 80047f0:	080048fd 	.word	0x080048fd
 80047f4:	080048bb 	.word	0x080048bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fa18 	bl	8004c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0208 	orr.w	r2, r2, #8
 8004812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6999      	ldr	r1, [r3, #24]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	619a      	str	r2, [r3, #24]
      break;
 8004836:	e064      	b.n	8004902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fa68 	bl	8004d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6999      	ldr	r1, [r3, #24]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	619a      	str	r2, [r3, #24]
      break;
 8004878:	e043      	b.n	8004902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fabd 	bl	8004e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0208 	orr.w	r2, r2, #8
 8004894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0204 	bic.w	r2, r2, #4
 80048a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69d9      	ldr	r1, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	61da      	str	r2, [r3, #28]
      break;
 80048b8:	e023      	b.n	8004902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fb11 	bl	8004ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69d9      	ldr	r1, [r3, #28]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	021a      	lsls	r2, r3, #8
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	61da      	str	r2, [r3, #28]
      break;
 80048fa:	e002      	b.n	8004902 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004900:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800490a:	7dfb      	ldrb	r3, [r7, #23]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIM_ConfigClockSource+0x1c>
 800492c:	2302      	movs	r3, #2
 800492e:	e0b4      	b.n	8004a9a <HAL_TIM_ConfigClockSource+0x186>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800494e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004968:	d03e      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0xd4>
 800496a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496e:	f200 8087 	bhi.w	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 8004972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004976:	f000 8086 	beq.w	8004a86 <HAL_TIM_ConfigClockSource+0x172>
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497e:	d87f      	bhi.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b70      	cmp	r3, #112	; 0x70
 8004982:	d01a      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0xa6>
 8004984:	2b70      	cmp	r3, #112	; 0x70
 8004986:	d87b      	bhi.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b60      	cmp	r3, #96	; 0x60
 800498a:	d050      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x11a>
 800498c:	2b60      	cmp	r3, #96	; 0x60
 800498e:	d877      	bhi.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b50      	cmp	r3, #80	; 0x50
 8004992:	d03c      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0xfa>
 8004994:	2b50      	cmp	r3, #80	; 0x50
 8004996:	d873      	bhi.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d058      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x13a>
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	d86f      	bhi.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d064      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x15a>
 80049a4:	2b30      	cmp	r3, #48	; 0x30
 80049a6:	d86b      	bhi.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d060      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x15a>
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d867      	bhi.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d05c      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x15a>
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d05a      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0x15a>
 80049b8:	e062      	b.n	8004a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6899      	ldr	r1, [r3, #8]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f000 fb5d 	bl	8005088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	609a      	str	r2, [r3, #8]
      break;
 80049e6:	e04f      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f000 fb46 	bl	8005088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a0a:	609a      	str	r2, [r3, #8]
      break;
 8004a0c:	e03c      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f000 faba 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2150      	movs	r1, #80	; 0x50
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fb13 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004a2c:	e02c      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6859      	ldr	r1, [r3, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f000 fad9 	bl	8004ff2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2160      	movs	r1, #96	; 0x60
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fb03 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004a4c:	e01c      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6859      	ldr	r1, [r3, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f000 fa9a 	bl	8004f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2140      	movs	r1, #64	; 0x40
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 faf3 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004a6c:	e00c      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f000 faea 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004a7e:	e003      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
      break;
 8004a84:	e000      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a40      	ldr	r2, [pc, #256]	; (8004c08 <TIM_Base_SetConfig+0x114>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <TIM_Base_SetConfig+0x40>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d00f      	beq.n	8004b34 <TIM_Base_SetConfig+0x40>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a3d      	ldr	r2, [pc, #244]	; (8004c0c <TIM_Base_SetConfig+0x118>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <TIM_Base_SetConfig+0x40>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a3c      	ldr	r2, [pc, #240]	; (8004c10 <TIM_Base_SetConfig+0x11c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_Base_SetConfig+0x40>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a3b      	ldr	r2, [pc, #236]	; (8004c14 <TIM_Base_SetConfig+0x120>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_Base_SetConfig+0x40>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a3a      	ldr	r2, [pc, #232]	; (8004c18 <TIM_Base_SetConfig+0x124>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d108      	bne.n	8004b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a2f      	ldr	r2, [pc, #188]	; (8004c08 <TIM_Base_SetConfig+0x114>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02b      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d027      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a2c      	ldr	r2, [pc, #176]	; (8004c0c <TIM_Base_SetConfig+0x118>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d023      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <TIM_Base_SetConfig+0x11c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01f      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <TIM_Base_SetConfig+0x120>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01b      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <TIM_Base_SetConfig+0x124>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d017      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <TIM_Base_SetConfig+0x128>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <TIM_Base_SetConfig+0x12c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00f      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a26      	ldr	r2, [pc, #152]	; (8004c24 <TIM_Base_SetConfig+0x130>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <TIM_Base_SetConfig+0x134>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a24      	ldr	r2, [pc, #144]	; (8004c2c <TIM_Base_SetConfig+0x138>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_Base_SetConfig+0xb2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <TIM_Base_SetConfig+0x13c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <TIM_Base_SetConfig+0x114>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0xf8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <TIM_Base_SetConfig+0x124>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d103      	bne.n	8004bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	615a      	str	r2, [r3, #20]
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40000c00 	.word	0x40000c00
 8004c18:	40010400 	.word	0x40010400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800
 8004c28:	40001800 	.word	0x40001800
 8004c2c:	40001c00 	.word	0x40001c00
 8004c30:	40002000 	.word	0x40002000

08004c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f023 0302 	bic.w	r3, r3, #2
 8004c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <TIM_OC1_SetConfig+0xd8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_OC1_SetConfig+0x64>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <TIM_OC1_SetConfig+0xdc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10c      	bne.n	8004cb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0308 	bic.w	r3, r3, #8
 8004c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	; (8004d0c <TIM_OC1_SetConfig+0xd8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_OC1_SetConfig+0x8e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a14      	ldr	r2, [pc, #80]	; (8004d10 <TIM_OC1_SetConfig+0xdc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d111      	bne.n	8004ce6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	621a      	str	r2, [r3, #32]
}
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40010400 	.word	0x40010400

08004d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0210 	bic.w	r2, r3, #16
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0320 	bic.w	r3, r3, #32
 8004d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a22      	ldr	r2, [pc, #136]	; (8004df8 <TIM_OC2_SetConfig+0xe4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_OC2_SetConfig+0x68>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a21      	ldr	r2, [pc, #132]	; (8004dfc <TIM_OC2_SetConfig+0xe8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d10d      	bne.n	8004d98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <TIM_OC2_SetConfig+0xe4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC2_SetConfig+0x94>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <TIM_OC2_SetConfig+0xe8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d113      	bne.n	8004dd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40010400 	.word	0x40010400

08004e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a21      	ldr	r2, [pc, #132]	; (8004ee0 <TIM_OC3_SetConfig+0xe0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC3_SetConfig+0x66>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <TIM_OC3_SetConfig+0xe4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10d      	bne.n	8004e82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_OC3_SetConfig+0xe0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_OC3_SetConfig+0x92>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC3_SetConfig+0xe4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d113      	bne.n	8004eba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	621a      	str	r2, [r3, #32]
}
 8004ed4:	bf00      	nop
 8004ed6:	371c      	adds	r7, #28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	031b      	lsls	r3, r3, #12
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <TIM_OC4_SetConfig+0xa4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC4_SetConfig+0x68>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <TIM_OC4_SetConfig+0xa8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d109      	bne.n	8004f64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	019b      	lsls	r3, r3, #6
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40010400 	.word	0x40010400

08004f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0201 	bic.w	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 030a 	bic.w	r3, r3, #10
 8004fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b087      	sub	sp, #28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0210 	bic.w	r2, r3, #16
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	031b      	lsls	r3, r3, #12
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800502e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	f043 0307 	orr.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2201      	movs	r2, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	43db      	mvns	r3, r3
 80050ea:	401a      	ands	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	431a      	orrs	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005128:	2302      	movs	r3, #2
 800512a:	e05a      	b.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d022      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005178:	d01d      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d018      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1b      	ldr	r2, [pc, #108]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00e      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a18      	ldr	r2, [pc, #96]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d10c      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40010000 	.word	0x40010000
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40010400 	.word	0x40010400
 8005204:	40014000 	.word	0x40014000
 8005208:	40001800 	.word	0x40001800

0800520c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005224:	2302      	movs	r3, #2
 8005226:	e03d      	b.n	80052a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e03f      	b.n	800536a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fd f88e 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800531a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 f8ff 	bl	8006520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08a      	sub	sp, #40	; 0x28
 8005376:	af02      	add	r7, sp, #8
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b20      	cmp	r3, #32
 8005390:	d17c      	bne.n	800548c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <HAL_UART_Transmit+0x2c>
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e075      	b.n	800548e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_UART_Transmit+0x3e>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e06e      	b.n	800548e <HAL_UART_Transmit+0x11c>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2221      	movs	r2, #33	; 0x21
 80053c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c6:	f7fd f9c5 	bl	8002754 <HAL_GetTick>
 80053ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d108      	bne.n	80053f4 <HAL_UART_Transmit+0x82>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e003      	b.n	80053fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005404:	e02a      	b.n	800545c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fdb6 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e036      	b.n	800548e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	3302      	adds	r3, #2
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	e007      	b.n	800544e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	781a      	ldrb	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	3301      	adds	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1cf      	bne.n	8005406 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2140      	movs	r1, #64	; 0x40
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fd86 	bl	8005f82 <UART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e006      	b.n	800548e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	e000      	b.n	800548e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800548c:	2302      	movs	r3, #2
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08c      	sub	sp, #48	; 0x30
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d165      	bne.n	800557e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_UART_Transmit_DMA+0x26>
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e05e      	b.n	8005580 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Transmit_DMA+0x38>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e057      	b.n	8005580 <HAL_UART_Transmit_DMA+0xe8>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2221      	movs	r2, #33	; 0x21
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <HAL_UART_Transmit_DMA+0xf0>)
 80054fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	4a21      	ldr	r2, [pc, #132]	; (800558c <HAL_UART_Transmit_DMA+0xf4>)
 8005506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550c:	4a20      	ldr	r2, [pc, #128]	; (8005590 <HAL_UART_Transmit_DMA+0xf8>)
 800550e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	2200      	movs	r2, #0
 8005516:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3304      	adds	r3, #4
 800552c:	461a      	mov	r2, r3
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	f7fd fb00 	bl	8002b34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3314      	adds	r3, #20
 800554c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	617b      	str	r3, [r7, #20]
   return(result);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3314      	adds	r3, #20
 8005564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005566:	627a      	str	r2, [r7, #36]	; 0x24
 8005568:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6a39      	ldr	r1, [r7, #32]
 800556c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	61fb      	str	r3, [r7, #28]
   return(result);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e000      	b.n	8005580 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
  }
}
 8005580:	4618      	mov	r0, r3
 8005582:	3730      	adds	r7, #48	; 0x30
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	08005cdd 	.word	0x08005cdd
 800558c:	08005d77 	.word	0x08005d77
 8005590:	08005eef 	.word	0x08005eef

08005594 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b090      	sub	sp, #64	; 0x40
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800559c:	2300      	movs	r3, #0
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055aa:	2b80      	cmp	r3, #128	; 0x80
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b21      	cmp	r3, #33	; 0x21
 80055c0:	d128      	bne.n	8005614 <HAL_UART_DMAStop+0x80>
 80055c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d025      	beq.n	8005614 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	623b      	str	r3, [r7, #32]
   return(result);
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055de:	63bb      	str	r3, [r7, #56]	; 0x38
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3314      	adds	r3, #20
 80055e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e8:	633a      	str	r2, [r7, #48]	; 0x30
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	4618      	mov	r0, r3
 800560a:	f7fd faeb 	bl	8002be4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fdc4 	bl	800619c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b22      	cmp	r3, #34	; 0x22
 8005634:	d128      	bne.n	8005688 <HAL_UART_DMAStop+0xf4>
 8005636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d025      	beq.n	8005688 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	60fb      	str	r3, [r7, #12]
   return(result);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3314      	adds	r3, #20
 800565a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800565c:	61fa      	str	r2, [r7, #28]
 800565e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	69b9      	ldr	r1, [r7, #24]
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	617b      	str	r3, [r7, #20]
   return(result);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e5      	bne.n	800563c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd fab1 	bl	8002be4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fdb2 	bl	80061ec <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3740      	adds	r7, #64	; 0x40
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b08c      	sub	sp, #48	; 0x30
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	4613      	mov	r3, r2
 800569e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d152      	bne.n	8005752 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e04b      	b.n	8005754 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e044      	b.n	8005754 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80056d8:	88fb      	ldrh	r3, [r7, #6]
 80056da:	461a      	mov	r2, r3
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fcbe 	bl	8006060 <UART_Start_Receive_DMA>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80056ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d12c      	bne.n	800574c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d125      	bne.n	8005746 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	613b      	str	r3, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	617b      	str	r3, [r7, #20]
   return(result);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f043 0310 	orr.w	r3, r3, #16
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005730:	627a      	str	r2, [r7, #36]	; 0x24
 8005732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	61fb      	str	r3, [r7, #28]
   return(result);
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e5      	bne.n	8005710 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005744:	e002      	b.n	800574c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800574c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005750:	e000      	b.n	8005754 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
  }
}
 8005754:	4618      	mov	r0, r3
 8005756:	3730      	adds	r7, #48	; 0x30
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b0ba      	sub	sp, #232	; 0xe8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800579a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_UART_IRQHandler+0x66>
 80057ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fdf5 	bl	80063aa <UART_Receive_IT>
      return;
 80057c0:	e256      	b.n	8005c70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80de 	beq.w	8005988 <HAL_UART_IRQHandler+0x22c>
 80057cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80d1 	beq.w	8005988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <HAL_UART_IRQHandler+0xae>
 80057f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	f043 0201 	orr.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <HAL_UART_IRQHandler+0xd2>
 8005816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f043 0202 	orr.w	r2, r3, #2
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800582e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <HAL_UART_IRQHandler+0xf6>
 800583a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f043 0204 	orr.w	r2, r3, #4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d011      	beq.n	8005882 <HAL_UART_IRQHandler+0x126>
 800585e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800586a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f043 0208 	orr.w	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 81ed 	beq.w	8005c66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800588c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_UART_IRQHandler+0x14e>
 8005898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fd80 	bl	80063aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d103      	bne.n	80058d6 <HAL_UART_IRQHandler+0x17a>
 80058ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d04f      	beq.n	8005976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fc88 	bl	80061ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d141      	bne.n	800596e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800591a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800592e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1d9      	bne.n	80058ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	2b00      	cmp	r3, #0
 800593c:	d013      	beq.n	8005966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	4a7d      	ldr	r2, [pc, #500]	; (8005b38 <HAL_UART_IRQHandler+0x3dc>)
 8005944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd f9ba 	bl	8002cc4 <HAL_DMA_Abort_IT>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d016      	beq.n	8005984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005960:	4610      	mov	r0, r2
 8005962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	e00e      	b.n	8005984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9ae 	bl	8005cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	e00a      	b.n	8005984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f9aa 	bl	8005cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e006      	b.n	8005984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9a6 	bl	8005cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005982:	e170      	b.n	8005c66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	bf00      	nop
    return;
 8005986:	e16e      	b.n	8005c66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	2b01      	cmp	r3, #1
 800598e:	f040 814a 	bne.w	8005c26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8143 	beq.w	8005c26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 813c 	beq.w	8005c26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	f040 80b4 	bne.w	8005b3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8140 	beq.w	8005c6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059f2:	429a      	cmp	r2, r3
 80059f4:	f080 8139 	bcs.w	8005c6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	f000 8088 	beq.w	8005b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1d9      	bne.n	8005a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e1      	bne.n	8005a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3314      	adds	r3, #20
 8005a9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa0:	e853 3f00 	ldrex	r3, [r3]
 8005aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ac2:	e841 2300 	strex	r3, r2, [r1]
 8005ac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e3      	bne.n	8005a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aee:	f023 0310 	bic.w	r3, r3, #16
 8005af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b00:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e3      	bne.n	8005adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fd f863 	bl	8002be4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb fa60 	bl	8000ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b34:	e099      	b.n	8005c6a <HAL_UART_IRQHandler+0x50e>
 8005b36:	bf00      	nop
 8005b38:	080062b3 	.word	0x080062b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 808b 	beq.w	8005c6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8086 	beq.w	8005c6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b86:	647a      	str	r2, [r7, #68]	; 0x44
 8005b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e3      	bne.n	8005b62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e3      	bne.n	8005b9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0310 	bic.w	r3, r3, #16
 8005bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	330c      	adds	r3, #12
 8005c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c04:	61fa      	str	r2, [r7, #28]
 8005c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	617b      	str	r3, [r7, #20]
   return(result);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e3      	bne.n	8005be0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fb f9e8 	bl	8000ff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c24:	e023      	b.n	8005c6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_UART_IRQHandler+0x4ea>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fb4b 	bl	80062da <UART_Transmit_IT>
    return;
 8005c44:	e014      	b.n	8005c70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00e      	beq.n	8005c70 <HAL_UART_IRQHandler+0x514>
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fb8b 	bl	800637a <UART_EndTransmit_IT>
    return;
 8005c64:	e004      	b.n	8005c70 <HAL_UART_IRQHandler+0x514>
    return;
 8005c66:	bf00      	nop
 8005c68:	e002      	b.n	8005c70 <HAL_UART_IRQHandler+0x514>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e000      	b.n	8005c70 <HAL_UART_IRQHandler+0x514>
      return;
 8005c6e:	bf00      	nop
  }
}
 8005c70:	37e8      	adds	r7, #232	; 0xe8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop

08005c78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b090      	sub	sp, #64	; 0x40
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d137      	bne.n	8005d68 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3314      	adds	r3, #20
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e5      	bne.n	8005cfe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d52:	61fa      	str	r2, [r7, #28]
 8005d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	69b9      	ldr	r1, [r7, #24]
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e5      	bne.n	8005d32 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d66:	e002      	b.n	8005d6e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005d68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005d6a:	f7ff ff85 	bl	8005c78 <HAL_UART_TxCpltCallback>
}
 8005d6e:	bf00      	nop
 8005d70:	3740      	adds	r7, #64	; 0x40
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f7ff ff81 	bl	8005c8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b09c      	sub	sp, #112	; 0x70
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d172      	bne.n	8005e94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db0:	2200      	movs	r2, #0
 8005db2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3314      	adds	r3, #20
 8005dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	667b      	str	r3, [r7, #100]	; 0x64
 8005e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3314      	adds	r3, #20
 8005e06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005e08:	647a      	str	r2, [r7, #68]	; 0x44
 8005e0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e5      	bne.n	8005de8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3314      	adds	r3, #20
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e32:	663b      	str	r3, [r7, #96]	; 0x60
 8005e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3314      	adds	r3, #20
 8005e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e3c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e5      	bne.n	8005e1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d119      	bne.n	8005e94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0310 	bic.w	r3, r3, #16
 8005e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e80:	61fa      	str	r2, [r7, #28]
 8005e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d106      	bne.n	8005eaa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ea4:	f7fb f8a6 	bl	8000ff4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ea8:	e002      	b.n	8005eb0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005eaa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005eac:	f7ff fef8 	bl	8005ca0 <HAL_UART_RxCpltCallback>
}
 8005eb0:	bf00      	nop
 8005eb2:	3770      	adds	r7, #112	; 0x70
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d108      	bne.n	8005ee0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7fb f88b 	bl	8000ff4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ede:	e002      	b.n	8005ee6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f7ff fee7 	bl	8005cb4 <HAL_UART_RxHalfCpltCallback>
}
 8005ee6:	bf00      	nop
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b80      	cmp	r3, #128	; 0x80
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b21      	cmp	r3, #33	; 0x21
 8005f20:	d108      	bne.n	8005f34 <UART_DMAError+0x46>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f2e:	68b8      	ldr	r0, [r7, #8]
 8005f30:	f000 f934 	bl	800619c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	bf0c      	ite	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	2300      	movne	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b22      	cmp	r3, #34	; 0x22
 8005f54:	d108      	bne.n	8005f68 <UART_DMAError+0x7a>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f62:	68b8      	ldr	r0, [r7, #8]
 8005f64:	f000 f942 	bl	80061ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	f043 0210 	orr.w	r2, r3, #16
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f74:	68b8      	ldr	r0, [r7, #8]
 8005f76:	f7ff fea7 	bl	8005cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b090      	sub	sp, #64	; 0x40
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f92:	e050      	b.n	8006036 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d04c      	beq.n	8006036 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa2:	f7fc fbd7 	bl	8002754 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d241      	bcs.n	8006036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd2:	637a      	str	r2, [r7, #52]	; 0x34
 8005fd4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e5      	bne.n	8005fb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3314      	adds	r3, #20
 8005fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3314      	adds	r3, #20
 8006004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006006:	623a      	str	r2, [r7, #32]
 8006008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	69f9      	ldr	r1, [r7, #28]
 800600c:	6a3a      	ldr	r2, [r7, #32]
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	61bb      	str	r3, [r7, #24]
   return(result);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e00f      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	429a      	cmp	r2, r3
 8006052:	d09f      	beq.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3740      	adds	r7, #64	; 0x40
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b098      	sub	sp, #96	; 0x60
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2222      	movs	r2, #34	; 0x22
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	4a40      	ldr	r2, [pc, #256]	; (8006190 <UART_Start_Receive_DMA+0x130>)
 800608e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	4a3f      	ldr	r2, [pc, #252]	; (8006194 <UART_Start_Receive_DMA+0x134>)
 8006096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	4a3e      	ldr	r2, [pc, #248]	; (8006198 <UART_Start_Receive_DMA+0x138>)
 800609e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	2200      	movs	r2, #0
 80060a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060a8:	f107 0308 	add.w	r3, r7, #8
 80060ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	f7fc fd38 	bl	8002b34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d019      	beq.n	800611e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006100:	65bb      	str	r3, [r7, #88]	; 0x58
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	330c      	adds	r3, #12
 8006108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800610a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800610c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006112:	e841 2300 	strex	r3, r2, [r1]
 8006116:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1e5      	bne.n	80060ea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	657b      	str	r3, [r7, #84]	; 0x54
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800613e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3314      	adds	r3, #20
 8006158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	617b      	str	r3, [r7, #20]
   return(result);
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006168:	653b      	str	r3, [r7, #80]	; 0x50
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3314      	adds	r3, #20
 8006170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006172:	627a      	str	r2, [r7, #36]	; 0x24
 8006174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6a39      	ldr	r1, [r7, #32]
 8006178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3760      	adds	r7, #96	; 0x60
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	08005d93 	.word	0x08005d93
 8006194:	08005eb9 	.word	0x08005eb9
 8006198:	08005eef 	.word	0x08005eef

0800619c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b089      	sub	sp, #36	; 0x24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	61ba      	str	r2, [r7, #24]
 80061c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6979      	ldr	r1, [r7, #20]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	613b      	str	r3, [r7, #16]
   return(result);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80061e0:	bf00      	nop
 80061e2:	3724      	adds	r7, #36	; 0x24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b095      	sub	sp, #84	; 0x54
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006214:	643a      	str	r2, [r7, #64]	; 0x40
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800621a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3314      	adds	r3, #20
 800622e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	61fb      	str	r3, [r7, #28]
   return(result);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f023 0301 	bic.w	r3, r3, #1
 800623e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3314      	adds	r3, #20
 8006246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800624e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e5      	bne.n	8006228 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	2b01      	cmp	r3, #1
 8006262:	d119      	bne.n	8006298 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	60bb      	str	r3, [r7, #8]
   return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	647b      	str	r3, [r7, #68]	; 0x44
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006284:	61ba      	str	r2, [r7, #24]
 8006286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6979      	ldr	r1, [r7, #20]
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	613b      	str	r3, [r7, #16]
   return(result);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e5      	bne.n	8006264 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062a6:	bf00      	nop
 80062a8:	3754      	adds	r7, #84	; 0x54
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fcfb 	bl	8005cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d2:	bf00      	nop
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b21      	cmp	r3, #33	; 0x21
 80062ec:	d13e      	bne.n	800636c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f6:	d114      	bne.n	8006322 <UART_Transmit_IT+0x48>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d110      	bne.n	8006322 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006314:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	1c9a      	adds	r2, r3, #2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	621a      	str	r2, [r3, #32]
 8006320:	e008      	b.n	8006334 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	1c59      	adds	r1, r3, #1
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6211      	str	r1, [r2, #32]
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29b      	uxth	r3, r3
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4619      	mov	r1, r3
 8006342:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10f      	bne.n	8006368 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006356:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006366:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	e000      	b.n	800636e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800636c:	2302      	movs	r3, #2
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006390:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fc6c 	bl	8005c78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b08c      	sub	sp, #48	; 0x30
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b22      	cmp	r3, #34	; 0x22
 80063bc:	f040 80ab 	bne.w	8006516 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c8:	d117      	bne.n	80063fa <UART_Receive_IT+0x50>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d113      	bne.n	80063fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	1c9a      	adds	r2, r3, #2
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	629a      	str	r2, [r3, #40]	; 0x28
 80063f8:	e026      	b.n	8006448 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d007      	beq.n	800641e <UART_Receive_IT+0x74>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <UART_Receive_IT+0x82>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	b2da      	uxtb	r2, r3
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e008      	b.n	800643e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006438:	b2da      	uxtb	r2, r3
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29b      	uxth	r3, r3
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4619      	mov	r1, r3
 8006456:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006458:	2b00      	cmp	r3, #0
 800645a:	d15a      	bne.n	8006512 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0220 	bic.w	r2, r2, #32
 800646a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800647a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0201 	bic.w	r2, r2, #1
 800648a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d135      	bne.n	8006508 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	613b      	str	r3, [r7, #16]
   return(result);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f023 0310 	bic.w	r3, r3, #16
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c2:	623a      	str	r2, [r7, #32]
 80064c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	69f9      	ldr	r1, [r7, #28]
 80064c8:	6a3a      	ldr	r2, [r7, #32]
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e5      	bne.n	80064a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d10a      	bne.n	80064fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fa fd77 	bl	8000ff4 <HAL_UARTEx_RxEventCallback>
 8006506:	e002      	b.n	800650e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff fbc9 	bl	8005ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e002      	b.n	8006518 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e000      	b.n	8006518 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006516:	2302      	movs	r3, #2
  }
}
 8006518:	4618      	mov	r0, r3
 800651a:	3730      	adds	r7, #48	; 0x30
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006524:	b0c0      	sub	sp, #256	; 0x100
 8006526:	af00      	add	r7, sp, #0
 8006528:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653c:	68d9      	ldr	r1, [r3, #12]
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	ea40 0301 	orr.w	r3, r0, r1
 8006548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	431a      	orrs	r2, r3
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	431a      	orrs	r2, r3
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006578:	f021 010c 	bic.w	r1, r1, #12
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006586:	430b      	orrs	r3, r1
 8006588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	6999      	ldr	r1, [r3, #24]
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	ea40 0301 	orr.w	r3, r0, r1
 80065a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b8f      	ldr	r3, [pc, #572]	; (80067ec <UART_SetConfig+0x2cc>)
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d005      	beq.n	80065c0 <UART_SetConfig+0xa0>
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b8d      	ldr	r3, [pc, #564]	; (80067f0 <UART_SetConfig+0x2d0>)
 80065bc:	429a      	cmp	r2, r3
 80065be:	d104      	bne.n	80065ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065c0:	f7fd fc44 	bl	8003e4c <HAL_RCC_GetPCLK2Freq>
 80065c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065c8:	e003      	b.n	80065d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ca:	f7fd fc2b 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 80065ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065dc:	f040 810c 	bne.w	80067f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	1891      	adds	r1, r2, r2
 80065f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80065fa:	415b      	adcs	r3, r3
 80065fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006602:	4621      	mov	r1, r4
 8006604:	eb12 0801 	adds.w	r8, r2, r1
 8006608:	4629      	mov	r1, r5
 800660a:	eb43 0901 	adc.w	r9, r3, r1
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800661a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800661e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006622:	4690      	mov	r8, r2
 8006624:	4699      	mov	r9, r3
 8006626:	4623      	mov	r3, r4
 8006628:	eb18 0303 	adds.w	r3, r8, r3
 800662c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006630:	462b      	mov	r3, r5
 8006632:	eb49 0303 	adc.w	r3, r9, r3
 8006636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006646:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800664a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800664e:	460b      	mov	r3, r1
 8006650:	18db      	adds	r3, r3, r3
 8006652:	653b      	str	r3, [r7, #80]	; 0x50
 8006654:	4613      	mov	r3, r2
 8006656:	eb42 0303 	adc.w	r3, r2, r3
 800665a:	657b      	str	r3, [r7, #84]	; 0x54
 800665c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006664:	f7fa faf0 	bl	8000c48 <__aeabi_uldivmod>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4b61      	ldr	r3, [pc, #388]	; (80067f4 <UART_SetConfig+0x2d4>)
 800666e:	fba3 2302 	umull	r2, r3, r3, r2
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	011c      	lsls	r4, r3, #4
 8006676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800667a:	2200      	movs	r2, #0
 800667c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006680:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	1891      	adds	r1, r2, r2
 800668e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006690:	415b      	adcs	r3, r3
 8006692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006698:	4641      	mov	r1, r8
 800669a:	eb12 0a01 	adds.w	sl, r2, r1
 800669e:	4649      	mov	r1, r9
 80066a0:	eb43 0b01 	adc.w	fp, r3, r1
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066b8:	4692      	mov	sl, r2
 80066ba:	469b      	mov	fp, r3
 80066bc:	4643      	mov	r3, r8
 80066be:	eb1a 0303 	adds.w	r3, sl, r3
 80066c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066c6:	464b      	mov	r3, r9
 80066c8:	eb4b 0303 	adc.w	r3, fp, r3
 80066cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066e4:	460b      	mov	r3, r1
 80066e6:	18db      	adds	r3, r3, r3
 80066e8:	643b      	str	r3, [r7, #64]	; 0x40
 80066ea:	4613      	mov	r3, r2
 80066ec:	eb42 0303 	adc.w	r3, r2, r3
 80066f0:	647b      	str	r3, [r7, #68]	; 0x44
 80066f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066fa:	f7fa faa5 	bl	8000c48 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4611      	mov	r1, r2
 8006704:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <UART_SetConfig+0x2d4>)
 8006706:	fba3 2301 	umull	r2, r3, r3, r1
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	2264      	movs	r2, #100	; 0x64
 800670e:	fb02 f303 	mul.w	r3, r2, r3
 8006712:	1acb      	subs	r3, r1, r3
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <UART_SetConfig+0x2d4>)
 800671c:	fba3 2302 	umull	r2, r3, r3, r2
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006728:	441c      	add	r4, r3
 800672a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006734:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800673c:	4642      	mov	r2, r8
 800673e:	464b      	mov	r3, r9
 8006740:	1891      	adds	r1, r2, r2
 8006742:	63b9      	str	r1, [r7, #56]	; 0x38
 8006744:	415b      	adcs	r3, r3
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800674c:	4641      	mov	r1, r8
 800674e:	1851      	adds	r1, r2, r1
 8006750:	6339      	str	r1, [r7, #48]	; 0x30
 8006752:	4649      	mov	r1, r9
 8006754:	414b      	adcs	r3, r1
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006764:	4659      	mov	r1, fp
 8006766:	00cb      	lsls	r3, r1, #3
 8006768:	4651      	mov	r1, sl
 800676a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800676e:	4651      	mov	r1, sl
 8006770:	00ca      	lsls	r2, r1, #3
 8006772:	4610      	mov	r0, r2
 8006774:	4619      	mov	r1, r3
 8006776:	4603      	mov	r3, r0
 8006778:	4642      	mov	r2, r8
 800677a:	189b      	adds	r3, r3, r2
 800677c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006780:	464b      	mov	r3, r9
 8006782:	460a      	mov	r2, r1
 8006784:	eb42 0303 	adc.w	r3, r2, r3
 8006788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006798:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800679c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067a0:	460b      	mov	r3, r1
 80067a2:	18db      	adds	r3, r3, r3
 80067a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a6:	4613      	mov	r3, r2
 80067a8:	eb42 0303 	adc.w	r3, r2, r3
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067b6:	f7fa fa47 	bl	8000c48 <__aeabi_uldivmod>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <UART_SetConfig+0x2d4>)
 80067c0:	fba3 1302 	umull	r1, r3, r3, r2
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	2164      	movs	r1, #100	; 0x64
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	3332      	adds	r3, #50	; 0x32
 80067d2:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <UART_SetConfig+0x2d4>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	f003 0207 	and.w	r2, r3, #7
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4422      	add	r2, r4
 80067e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067e8:	e105      	b.n	80069f6 <UART_SetConfig+0x4d6>
 80067ea:	bf00      	nop
 80067ec:	40011000 	.word	0x40011000
 80067f0:	40011400 	.word	0x40011400
 80067f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006802:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800680a:	4642      	mov	r2, r8
 800680c:	464b      	mov	r3, r9
 800680e:	1891      	adds	r1, r2, r2
 8006810:	6239      	str	r1, [r7, #32]
 8006812:	415b      	adcs	r3, r3
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
 8006816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800681a:	4641      	mov	r1, r8
 800681c:	1854      	adds	r4, r2, r1
 800681e:	4649      	mov	r1, r9
 8006820:	eb43 0501 	adc.w	r5, r3, r1
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	00eb      	lsls	r3, r5, #3
 800682e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006832:	00e2      	lsls	r2, r4, #3
 8006834:	4614      	mov	r4, r2
 8006836:	461d      	mov	r5, r3
 8006838:	4643      	mov	r3, r8
 800683a:	18e3      	adds	r3, r4, r3
 800683c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006840:	464b      	mov	r3, r9
 8006842:	eb45 0303 	adc.w	r3, r5, r3
 8006846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006856:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006866:	4629      	mov	r1, r5
 8006868:	008b      	lsls	r3, r1, #2
 800686a:	4621      	mov	r1, r4
 800686c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006870:	4621      	mov	r1, r4
 8006872:	008a      	lsls	r2, r1, #2
 8006874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006878:	f7fa f9e6 	bl	8000c48 <__aeabi_uldivmod>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	4b60      	ldr	r3, [pc, #384]	; (8006a04 <UART_SetConfig+0x4e4>)
 8006882:	fba3 2302 	umull	r2, r3, r3, r2
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	011c      	lsls	r4, r3, #4
 800688a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800688e:	2200      	movs	r2, #0
 8006890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006894:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	1891      	adds	r1, r2, r2
 80068a2:	61b9      	str	r1, [r7, #24]
 80068a4:	415b      	adcs	r3, r3
 80068a6:	61fb      	str	r3, [r7, #28]
 80068a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ac:	4641      	mov	r1, r8
 80068ae:	1851      	adds	r1, r2, r1
 80068b0:	6139      	str	r1, [r7, #16]
 80068b2:	4649      	mov	r1, r9
 80068b4:	414b      	adcs	r3, r1
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068c4:	4659      	mov	r1, fp
 80068c6:	00cb      	lsls	r3, r1, #3
 80068c8:	4651      	mov	r1, sl
 80068ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ce:	4651      	mov	r1, sl
 80068d0:	00ca      	lsls	r2, r1, #3
 80068d2:	4610      	mov	r0, r2
 80068d4:	4619      	mov	r1, r3
 80068d6:	4603      	mov	r3, r0
 80068d8:	4642      	mov	r2, r8
 80068da:	189b      	adds	r3, r3, r2
 80068dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068e0:	464b      	mov	r3, r9
 80068e2:	460a      	mov	r2, r1
 80068e4:	eb42 0303 	adc.w	r3, r2, r3
 80068e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80068f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006904:	4649      	mov	r1, r9
 8006906:	008b      	lsls	r3, r1, #2
 8006908:	4641      	mov	r1, r8
 800690a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800690e:	4641      	mov	r1, r8
 8006910:	008a      	lsls	r2, r1, #2
 8006912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006916:	f7fa f997 	bl	8000c48 <__aeabi_uldivmod>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4b39      	ldr	r3, [pc, #228]	; (8006a04 <UART_SetConfig+0x4e4>)
 8006920:	fba3 1302 	umull	r1, r3, r3, r2
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	2164      	movs	r1, #100	; 0x64
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	3332      	adds	r3, #50	; 0x32
 8006932:	4a34      	ldr	r2, [pc, #208]	; (8006a04 <UART_SetConfig+0x4e4>)
 8006934:	fba2 2303 	umull	r2, r3, r2, r3
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800693e:	441c      	add	r4, r3
 8006940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006944:	2200      	movs	r2, #0
 8006946:	673b      	str	r3, [r7, #112]	; 0x70
 8006948:	677a      	str	r2, [r7, #116]	; 0x74
 800694a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800694e:	4642      	mov	r2, r8
 8006950:	464b      	mov	r3, r9
 8006952:	1891      	adds	r1, r2, r2
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	415b      	adcs	r3, r3
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800695e:	4641      	mov	r1, r8
 8006960:	1851      	adds	r1, r2, r1
 8006962:	6039      	str	r1, [r7, #0]
 8006964:	4649      	mov	r1, r9
 8006966:	414b      	adcs	r3, r1
 8006968:	607b      	str	r3, [r7, #4]
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006976:	4659      	mov	r1, fp
 8006978:	00cb      	lsls	r3, r1, #3
 800697a:	4651      	mov	r1, sl
 800697c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006980:	4651      	mov	r1, sl
 8006982:	00ca      	lsls	r2, r1, #3
 8006984:	4610      	mov	r0, r2
 8006986:	4619      	mov	r1, r3
 8006988:	4603      	mov	r3, r0
 800698a:	4642      	mov	r2, r8
 800698c:	189b      	adds	r3, r3, r2
 800698e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006990:	464b      	mov	r3, r9
 8006992:	460a      	mov	r2, r1
 8006994:	eb42 0303 	adc.w	r3, r2, r3
 8006998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	663b      	str	r3, [r7, #96]	; 0x60
 80069a4:	667a      	str	r2, [r7, #100]	; 0x64
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069b2:	4649      	mov	r1, r9
 80069b4:	008b      	lsls	r3, r1, #2
 80069b6:	4641      	mov	r1, r8
 80069b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069bc:	4641      	mov	r1, r8
 80069be:	008a      	lsls	r2, r1, #2
 80069c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069c4:	f7fa f940 	bl	8000c48 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <UART_SetConfig+0x4e4>)
 80069ce:	fba3 1302 	umull	r1, r3, r3, r2
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	2164      	movs	r1, #100	; 0x64
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	3332      	adds	r3, #50	; 0x32
 80069e0:	4a08      	ldr	r2, [pc, #32]	; (8006a04 <UART_SetConfig+0x4e4>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	f003 020f 	and.w	r2, r3, #15
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4422      	add	r2, r4
 80069f4:	609a      	str	r2, [r3, #8]
}
 80069f6:	bf00      	nop
 80069f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069fc:	46bd      	mov	sp, r7
 80069fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a02:	bf00      	nop
 8006a04:	51eb851f 	.word	0x51eb851f

08006a08 <__errno>:
 8006a08:	4b01      	ldr	r3, [pc, #4]	; (8006a10 <__errno+0x8>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000078 	.word	0x20000078

08006a14 <__libc_init_array>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4d0d      	ldr	r5, [pc, #52]	; (8006a4c <__libc_init_array+0x38>)
 8006a18:	4c0d      	ldr	r4, [pc, #52]	; (8006a50 <__libc_init_array+0x3c>)
 8006a1a:	1b64      	subs	r4, r4, r5
 8006a1c:	10a4      	asrs	r4, r4, #2
 8006a1e:	2600      	movs	r6, #0
 8006a20:	42a6      	cmp	r6, r4
 8006a22:	d109      	bne.n	8006a38 <__libc_init_array+0x24>
 8006a24:	4d0b      	ldr	r5, [pc, #44]	; (8006a54 <__libc_init_array+0x40>)
 8006a26:	4c0c      	ldr	r4, [pc, #48]	; (8006a58 <__libc_init_array+0x44>)
 8006a28:	f002 fd50 	bl	80094cc <_init>
 8006a2c:	1b64      	subs	r4, r4, r5
 8006a2e:	10a4      	asrs	r4, r4, #2
 8006a30:	2600      	movs	r6, #0
 8006a32:	42a6      	cmp	r6, r4
 8006a34:	d105      	bne.n	8006a42 <__libc_init_array+0x2e>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3c:	4798      	blx	r3
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7ee      	b.n	8006a20 <__libc_init_array+0xc>
 8006a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a46:	4798      	blx	r3
 8006a48:	3601      	adds	r6, #1
 8006a4a:	e7f2      	b.n	8006a32 <__libc_init_array+0x1e>
 8006a4c:	0800991c 	.word	0x0800991c
 8006a50:	0800991c 	.word	0x0800991c
 8006a54:	0800991c 	.word	0x0800991c
 8006a58:	08009920 	.word	0x08009920

08006a5c <memcpy>:
 8006a5c:	440a      	add	r2, r1
 8006a5e:	4291      	cmp	r1, r2
 8006a60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a64:	d100      	bne.n	8006a68 <memcpy+0xc>
 8006a66:	4770      	bx	lr
 8006a68:	b510      	push	{r4, lr}
 8006a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a72:	4291      	cmp	r1, r2
 8006a74:	d1f9      	bne.n	8006a6a <memcpy+0xe>
 8006a76:	bd10      	pop	{r4, pc}

08006a78 <memset>:
 8006a78:	4402      	add	r2, r0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d100      	bne.n	8006a82 <memset+0xa>
 8006a80:	4770      	bx	lr
 8006a82:	f803 1b01 	strb.w	r1, [r3], #1
 8006a86:	e7f9      	b.n	8006a7c <memset+0x4>

08006a88 <__cvt>:
 8006a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	ec55 4b10 	vmov	r4, r5, d0
 8006a90:	2d00      	cmp	r5, #0
 8006a92:	460e      	mov	r6, r1
 8006a94:	4619      	mov	r1, r3
 8006a96:	462b      	mov	r3, r5
 8006a98:	bfbb      	ittet	lt
 8006a9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a9e:	461d      	movlt	r5, r3
 8006aa0:	2300      	movge	r3, #0
 8006aa2:	232d      	movlt	r3, #45	; 0x2d
 8006aa4:	700b      	strb	r3, [r1, #0]
 8006aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006aac:	4691      	mov	r9, r2
 8006aae:	f023 0820 	bic.w	r8, r3, #32
 8006ab2:	bfbc      	itt	lt
 8006ab4:	4622      	movlt	r2, r4
 8006ab6:	4614      	movlt	r4, r2
 8006ab8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006abc:	d005      	beq.n	8006aca <__cvt+0x42>
 8006abe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ac2:	d100      	bne.n	8006ac6 <__cvt+0x3e>
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	2102      	movs	r1, #2
 8006ac8:	e000      	b.n	8006acc <__cvt+0x44>
 8006aca:	2103      	movs	r1, #3
 8006acc:	ab03      	add	r3, sp, #12
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	ab02      	add	r3, sp, #8
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	ec45 4b10 	vmov	d0, r4, r5
 8006ad8:	4653      	mov	r3, sl
 8006ada:	4632      	mov	r2, r6
 8006adc:	f000 fce4 	bl	80074a8 <_dtoa_r>
 8006ae0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	d102      	bne.n	8006aee <__cvt+0x66>
 8006ae8:	f019 0f01 	tst.w	r9, #1
 8006aec:	d022      	beq.n	8006b34 <__cvt+0xac>
 8006aee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006af2:	eb07 0906 	add.w	r9, r7, r6
 8006af6:	d110      	bne.n	8006b1a <__cvt+0x92>
 8006af8:	783b      	ldrb	r3, [r7, #0]
 8006afa:	2b30      	cmp	r3, #48	; 0x30
 8006afc:	d10a      	bne.n	8006b14 <__cvt+0x8c>
 8006afe:	2200      	movs	r2, #0
 8006b00:	2300      	movs	r3, #0
 8006b02:	4620      	mov	r0, r4
 8006b04:	4629      	mov	r1, r5
 8006b06:	f7f9 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b0a:	b918      	cbnz	r0, 8006b14 <__cvt+0x8c>
 8006b0c:	f1c6 0601 	rsb	r6, r6, #1
 8006b10:	f8ca 6000 	str.w	r6, [sl]
 8006b14:	f8da 3000 	ldr.w	r3, [sl]
 8006b18:	4499      	add	r9, r3
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b26:	b108      	cbz	r0, 8006b2c <__cvt+0xa4>
 8006b28:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b2c:	2230      	movs	r2, #48	; 0x30
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	454b      	cmp	r3, r9
 8006b32:	d307      	bcc.n	8006b44 <__cvt+0xbc>
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b38:	1bdb      	subs	r3, r3, r7
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	b004      	add	sp, #16
 8006b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	9103      	str	r1, [sp, #12]
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e7f0      	b.n	8006b2e <__cvt+0xa6>

08006b4c <__exponent>:
 8006b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2900      	cmp	r1, #0
 8006b52:	bfb8      	it	lt
 8006b54:	4249      	neglt	r1, r1
 8006b56:	f803 2b02 	strb.w	r2, [r3], #2
 8006b5a:	bfb4      	ite	lt
 8006b5c:	222d      	movlt	r2, #45	; 0x2d
 8006b5e:	222b      	movge	r2, #43	; 0x2b
 8006b60:	2909      	cmp	r1, #9
 8006b62:	7042      	strb	r2, [r0, #1]
 8006b64:	dd2a      	ble.n	8006bbc <__exponent+0x70>
 8006b66:	f10d 0407 	add.w	r4, sp, #7
 8006b6a:	46a4      	mov	ip, r4
 8006b6c:	270a      	movs	r7, #10
 8006b6e:	46a6      	mov	lr, r4
 8006b70:	460a      	mov	r2, r1
 8006b72:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b76:	fb07 1516 	mls	r5, r7, r6, r1
 8006b7a:	3530      	adds	r5, #48	; 0x30
 8006b7c:	2a63      	cmp	r2, #99	; 0x63
 8006b7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b86:	4631      	mov	r1, r6
 8006b88:	dcf1      	bgt.n	8006b6e <__exponent+0x22>
 8006b8a:	3130      	adds	r1, #48	; 0x30
 8006b8c:	f1ae 0502 	sub.w	r5, lr, #2
 8006b90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b94:	1c44      	adds	r4, r0, #1
 8006b96:	4629      	mov	r1, r5
 8006b98:	4561      	cmp	r1, ip
 8006b9a:	d30a      	bcc.n	8006bb2 <__exponent+0x66>
 8006b9c:	f10d 0209 	add.w	r2, sp, #9
 8006ba0:	eba2 020e 	sub.w	r2, r2, lr
 8006ba4:	4565      	cmp	r5, ip
 8006ba6:	bf88      	it	hi
 8006ba8:	2200      	movhi	r2, #0
 8006baa:	4413      	add	r3, r2
 8006bac:	1a18      	subs	r0, r3, r0
 8006bae:	b003      	add	sp, #12
 8006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bba:	e7ed      	b.n	8006b98 <__exponent+0x4c>
 8006bbc:	2330      	movs	r3, #48	; 0x30
 8006bbe:	3130      	adds	r1, #48	; 0x30
 8006bc0:	7083      	strb	r3, [r0, #2]
 8006bc2:	70c1      	strb	r1, [r0, #3]
 8006bc4:	1d03      	adds	r3, r0, #4
 8006bc6:	e7f1      	b.n	8006bac <__exponent+0x60>

08006bc8 <_printf_float>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b02 	vpush	{d8}
 8006bd0:	b08d      	sub	sp, #52	; 0x34
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bd8:	4616      	mov	r6, r2
 8006bda:	461f      	mov	r7, r3
 8006bdc:	4605      	mov	r5, r0
 8006bde:	f001 fb47 	bl	8008270 <_localeconv_r>
 8006be2:	f8d0 a000 	ldr.w	sl, [r0]
 8006be6:	4650      	mov	r0, sl
 8006be8:	f7f9 faf2 	bl	80001d0 <strlen>
 8006bec:	2300      	movs	r3, #0
 8006bee:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bfc:	3307      	adds	r3, #7
 8006bfe:	f023 0307 	bic.w	r3, r3, #7
 8006c02:	f103 0208 	add.w	r2, r3, #8
 8006c06:	f8c8 2000 	str.w	r2, [r8]
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c1a:	9307      	str	r3, [sp, #28]
 8006c1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c20:	ee08 0a10 	vmov	s16, r0
 8006c24:	4b9f      	ldr	r3, [pc, #636]	; (8006ea4 <_printf_float+0x2dc>)
 8006c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2e:	f7f9 ff7d 	bl	8000b2c <__aeabi_dcmpun>
 8006c32:	bb88      	cbnz	r0, 8006c98 <_printf_float+0xd0>
 8006c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c38:	4b9a      	ldr	r3, [pc, #616]	; (8006ea4 <_printf_float+0x2dc>)
 8006c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3e:	f7f9 ff57 	bl	8000af0 <__aeabi_dcmple>
 8006c42:	bb48      	cbnz	r0, 8006c98 <_printf_float+0xd0>
 8006c44:	2200      	movs	r2, #0
 8006c46:	2300      	movs	r3, #0
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ff46 	bl	8000adc <__aeabi_dcmplt>
 8006c50:	b110      	cbz	r0, 8006c58 <_printf_float+0x90>
 8006c52:	232d      	movs	r3, #45	; 0x2d
 8006c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c58:	4b93      	ldr	r3, [pc, #588]	; (8006ea8 <_printf_float+0x2e0>)
 8006c5a:	4894      	ldr	r0, [pc, #592]	; (8006eac <_printf_float+0x2e4>)
 8006c5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c60:	bf94      	ite	ls
 8006c62:	4698      	movls	r8, r3
 8006c64:	4680      	movhi	r8, r0
 8006c66:	2303      	movs	r3, #3
 8006c68:	6123      	str	r3, [r4, #16]
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	f023 0204 	bic.w	r2, r3, #4
 8006c70:	6022      	str	r2, [r4, #0]
 8006c72:	f04f 0900 	mov.w	r9, #0
 8006c76:	9700      	str	r7, [sp, #0]
 8006c78:	4633      	mov	r3, r6
 8006c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f000 f9d8 	bl	8007034 <_printf_common>
 8006c84:	3001      	adds	r0, #1
 8006c86:	f040 8090 	bne.w	8006daa <_printf_float+0x1e2>
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	b00d      	add	sp, #52	; 0x34
 8006c90:	ecbd 8b02 	vpop	{d8}
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c98:	4642      	mov	r2, r8
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	f7f9 ff44 	bl	8000b2c <__aeabi_dcmpun>
 8006ca4:	b140      	cbz	r0, 8006cb8 <_printf_float+0xf0>
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bfbc      	itt	lt
 8006cac:	232d      	movlt	r3, #45	; 0x2d
 8006cae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cb2:	487f      	ldr	r0, [pc, #508]	; (8006eb0 <_printf_float+0x2e8>)
 8006cb4:	4b7f      	ldr	r3, [pc, #508]	; (8006eb4 <_printf_float+0x2ec>)
 8006cb6:	e7d1      	b.n	8006c5c <_printf_float+0x94>
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cbe:	9206      	str	r2, [sp, #24]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	d13f      	bne.n	8006d44 <_printf_float+0x17c>
 8006cc4:	2306      	movs	r3, #6
 8006cc6:	6063      	str	r3, [r4, #4]
 8006cc8:	9b05      	ldr	r3, [sp, #20]
 8006cca:	6861      	ldr	r1, [r4, #4]
 8006ccc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9303      	str	r3, [sp, #12]
 8006cd4:	ab0a      	add	r3, sp, #40	; 0x28
 8006cd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cda:	ab09      	add	r3, sp, #36	; 0x24
 8006cdc:	ec49 8b10 	vmov	d0, r8, r9
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	6022      	str	r2, [r4, #0]
 8006ce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f7ff fecd 	bl	8006a88 <__cvt>
 8006cee:	9b06      	ldr	r3, [sp, #24]
 8006cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf2:	2b47      	cmp	r3, #71	; 0x47
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	d108      	bne.n	8006d0a <_printf_float+0x142>
 8006cf8:	1cc8      	adds	r0, r1, #3
 8006cfa:	db02      	blt.n	8006d02 <_printf_float+0x13a>
 8006cfc:	6863      	ldr	r3, [r4, #4]
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	dd41      	ble.n	8006d86 <_printf_float+0x1be>
 8006d02:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d06:	fa5f fb8b 	uxtb.w	fp, fp
 8006d0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d0e:	d820      	bhi.n	8006d52 <_printf_float+0x18a>
 8006d10:	3901      	subs	r1, #1
 8006d12:	465a      	mov	r2, fp
 8006d14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d18:	9109      	str	r1, [sp, #36]	; 0x24
 8006d1a:	f7ff ff17 	bl	8006b4c <__exponent>
 8006d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d20:	1813      	adds	r3, r2, r0
 8006d22:	2a01      	cmp	r2, #1
 8006d24:	4681      	mov	r9, r0
 8006d26:	6123      	str	r3, [r4, #16]
 8006d28:	dc02      	bgt.n	8006d30 <_printf_float+0x168>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	07d2      	lsls	r2, r2, #31
 8006d2e:	d501      	bpl.n	8006d34 <_printf_float+0x16c>
 8006d30:	3301      	adds	r3, #1
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d09c      	beq.n	8006c76 <_printf_float+0xae>
 8006d3c:	232d      	movs	r3, #45	; 0x2d
 8006d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d42:	e798      	b.n	8006c76 <_printf_float+0xae>
 8006d44:	9a06      	ldr	r2, [sp, #24]
 8006d46:	2a47      	cmp	r2, #71	; 0x47
 8006d48:	d1be      	bne.n	8006cc8 <_printf_float+0x100>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1bc      	bne.n	8006cc8 <_printf_float+0x100>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e7b9      	b.n	8006cc6 <_printf_float+0xfe>
 8006d52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d56:	d118      	bne.n	8006d8a <_printf_float+0x1c2>
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	dd0b      	ble.n	8006d76 <_printf_float+0x1ae>
 8006d5e:	6121      	str	r1, [r4, #16]
 8006d60:	b913      	cbnz	r3, 8006d68 <_printf_float+0x1a0>
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	07d0      	lsls	r0, r2, #31
 8006d66:	d502      	bpl.n	8006d6e <_printf_float+0x1a6>
 8006d68:	3301      	adds	r3, #1
 8006d6a:	440b      	add	r3, r1
 8006d6c:	6123      	str	r3, [r4, #16]
 8006d6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d70:	f04f 0900 	mov.w	r9, #0
 8006d74:	e7de      	b.n	8006d34 <_printf_float+0x16c>
 8006d76:	b913      	cbnz	r3, 8006d7e <_printf_float+0x1b6>
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	07d2      	lsls	r2, r2, #31
 8006d7c:	d501      	bpl.n	8006d82 <_printf_float+0x1ba>
 8006d7e:	3302      	adds	r3, #2
 8006d80:	e7f4      	b.n	8006d6c <_printf_float+0x1a4>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7f2      	b.n	8006d6c <_printf_float+0x1a4>
 8006d86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8c:	4299      	cmp	r1, r3
 8006d8e:	db05      	blt.n	8006d9c <_printf_float+0x1d4>
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	6121      	str	r1, [r4, #16]
 8006d94:	07d8      	lsls	r0, r3, #31
 8006d96:	d5ea      	bpl.n	8006d6e <_printf_float+0x1a6>
 8006d98:	1c4b      	adds	r3, r1, #1
 8006d9a:	e7e7      	b.n	8006d6c <_printf_float+0x1a4>
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	bfd4      	ite	le
 8006da0:	f1c1 0202 	rsble	r2, r1, #2
 8006da4:	2201      	movgt	r2, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	e7e0      	b.n	8006d6c <_printf_float+0x1a4>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	055a      	lsls	r2, r3, #21
 8006dae:	d407      	bmi.n	8006dc0 <_printf_float+0x1f8>
 8006db0:	6923      	ldr	r3, [r4, #16]
 8006db2:	4642      	mov	r2, r8
 8006db4:	4631      	mov	r1, r6
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d12c      	bne.n	8006e18 <_printf_float+0x250>
 8006dbe:	e764      	b.n	8006c8a <_printf_float+0xc2>
 8006dc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dc4:	f240 80e0 	bls.w	8006f88 <_printf_float+0x3c0>
 8006dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f7f9 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d034      	beq.n	8006e42 <_printf_float+0x27a>
 8006dd8:	4a37      	ldr	r2, [pc, #220]	; (8006eb8 <_printf_float+0x2f0>)
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af51 	beq.w	8006c8a <_printf_float+0xc2>
 8006de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dec:	429a      	cmp	r2, r3
 8006dee:	db02      	blt.n	8006df6 <_printf_float+0x22e>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	07d8      	lsls	r0, r3, #31
 8006df4:	d510      	bpl.n	8006e18 <_printf_float+0x250>
 8006df6:	ee18 3a10 	vmov	r3, s16
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af41 	beq.w	8006c8a <_printf_float+0xc2>
 8006e08:	f04f 0800 	mov.w	r8, #0
 8006e0c:	f104 091a 	add.w	r9, r4, #26
 8006e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e12:	3b01      	subs	r3, #1
 8006e14:	4543      	cmp	r3, r8
 8006e16:	dc09      	bgt.n	8006e2c <_printf_float+0x264>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	079b      	lsls	r3, r3, #30
 8006e1c:	f100 8105 	bmi.w	800702a <_printf_float+0x462>
 8006e20:	68e0      	ldr	r0, [r4, #12]
 8006e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e24:	4298      	cmp	r0, r3
 8006e26:	bfb8      	it	lt
 8006e28:	4618      	movlt	r0, r3
 8006e2a:	e730      	b.n	8006c8e <_printf_float+0xc6>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	464a      	mov	r2, r9
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f af27 	beq.w	8006c8a <_printf_float+0xc2>
 8006e3c:	f108 0801 	add.w	r8, r8, #1
 8006e40:	e7e6      	b.n	8006e10 <_printf_float+0x248>
 8006e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dc39      	bgt.n	8006ebc <_printf_float+0x2f4>
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <_printf_float+0x2f0>)
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f af19 	beq.w	8006c8a <_printf_float+0xc2>
 8006e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	d102      	bne.n	8006e66 <_printf_float+0x29e>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	07d9      	lsls	r1, r3, #31
 8006e64:	d5d8      	bpl.n	8006e18 <_printf_float+0x250>
 8006e66:	ee18 3a10 	vmov	r3, s16
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f af09 	beq.w	8006c8a <_printf_float+0xc2>
 8006e78:	f04f 0900 	mov.w	r9, #0
 8006e7c:	f104 0a1a 	add.w	sl, r4, #26
 8006e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e82:	425b      	negs	r3, r3
 8006e84:	454b      	cmp	r3, r9
 8006e86:	dc01      	bgt.n	8006e8c <_printf_float+0x2c4>
 8006e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8a:	e792      	b.n	8006db2 <_printf_float+0x1ea>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4652      	mov	r2, sl
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	f43f aef7 	beq.w	8006c8a <_printf_float+0xc2>
 8006e9c:	f109 0901 	add.w	r9, r9, #1
 8006ea0:	e7ee      	b.n	8006e80 <_printf_float+0x2b8>
 8006ea2:	bf00      	nop
 8006ea4:	7fefffff 	.word	0x7fefffff
 8006ea8:	0800953c 	.word	0x0800953c
 8006eac:	08009540 	.word	0x08009540
 8006eb0:	08009548 	.word	0x08009548
 8006eb4:	08009544 	.word	0x08009544
 8006eb8:	0800954c 	.word	0x0800954c
 8006ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	bfa8      	it	ge
 8006ec4:	461a      	movge	r2, r3
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	4691      	mov	r9, r2
 8006eca:	dc37      	bgt.n	8006f3c <_printf_float+0x374>
 8006ecc:	f04f 0b00 	mov.w	fp, #0
 8006ed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ed4:	f104 021a 	add.w	r2, r4, #26
 8006ed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eda:	9305      	str	r3, [sp, #20]
 8006edc:	eba3 0309 	sub.w	r3, r3, r9
 8006ee0:	455b      	cmp	r3, fp
 8006ee2:	dc33      	bgt.n	8006f4c <_printf_float+0x384>
 8006ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	db3b      	blt.n	8006f64 <_printf_float+0x39c>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	07da      	lsls	r2, r3, #31
 8006ef0:	d438      	bmi.n	8006f64 <_printf_float+0x39c>
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef4:	9a05      	ldr	r2, [sp, #20]
 8006ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef8:	1a9a      	subs	r2, r3, r2
 8006efa:	eba3 0901 	sub.w	r9, r3, r1
 8006efe:	4591      	cmp	r9, r2
 8006f00:	bfa8      	it	ge
 8006f02:	4691      	movge	r9, r2
 8006f04:	f1b9 0f00 	cmp.w	r9, #0
 8006f08:	dc35      	bgt.n	8006f76 <_printf_float+0x3ae>
 8006f0a:	f04f 0800 	mov.w	r8, #0
 8006f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f12:	f104 0a1a 	add.w	sl, r4, #26
 8006f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	eba3 0309 	sub.w	r3, r3, r9
 8006f20:	4543      	cmp	r3, r8
 8006f22:	f77f af79 	ble.w	8006e18 <_printf_float+0x250>
 8006f26:	2301      	movs	r3, #1
 8006f28:	4652      	mov	r2, sl
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f aeaa 	beq.w	8006c8a <_printf_float+0xc2>
 8006f36:	f108 0801 	add.w	r8, r8, #1
 8006f3a:	e7ec      	b.n	8006f16 <_printf_float+0x34e>
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	4631      	mov	r1, r6
 8006f40:	4642      	mov	r2, r8
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	d1c0      	bne.n	8006ecc <_printf_float+0x304>
 8006f4a:	e69e      	b.n	8006c8a <_printf_float+0xc2>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	9205      	str	r2, [sp, #20]
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f ae97 	beq.w	8006c8a <_printf_float+0xc2>
 8006f5c:	9a05      	ldr	r2, [sp, #20]
 8006f5e:	f10b 0b01 	add.w	fp, fp, #1
 8006f62:	e7b9      	b.n	8006ed8 <_printf_float+0x310>
 8006f64:	ee18 3a10 	vmov	r3, s16
 8006f68:	4652      	mov	r2, sl
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	d1be      	bne.n	8006ef2 <_printf_float+0x32a>
 8006f74:	e689      	b.n	8006c8a <_printf_float+0xc2>
 8006f76:	9a05      	ldr	r2, [sp, #20]
 8006f78:	464b      	mov	r3, r9
 8006f7a:	4442      	add	r2, r8
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	d1c1      	bne.n	8006f0a <_printf_float+0x342>
 8006f86:	e680      	b.n	8006c8a <_printf_float+0xc2>
 8006f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f8a:	2a01      	cmp	r2, #1
 8006f8c:	dc01      	bgt.n	8006f92 <_printf_float+0x3ca>
 8006f8e:	07db      	lsls	r3, r3, #31
 8006f90:	d538      	bpl.n	8007004 <_printf_float+0x43c>
 8006f92:	2301      	movs	r3, #1
 8006f94:	4642      	mov	r2, r8
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f ae74 	beq.w	8006c8a <_printf_float+0xc2>
 8006fa2:	ee18 3a10 	vmov	r3, s16
 8006fa6:	4652      	mov	r2, sl
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4628      	mov	r0, r5
 8006fac:	47b8      	blx	r7
 8006fae:	3001      	adds	r0, #1
 8006fb0:	f43f ae6b 	beq.w	8006c8a <_printf_float+0xc2>
 8006fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f7f9 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fc0:	b9d8      	cbnz	r0, 8006ffa <_printf_float+0x432>
 8006fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc4:	f108 0201 	add.w	r2, r8, #1
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d10e      	bne.n	8006ff2 <_printf_float+0x42a>
 8006fd4:	e659      	b.n	8006c8a <_printf_float+0xc2>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f43f ae52 	beq.w	8006c8a <_printf_float+0xc2>
 8006fe6:	f108 0801 	add.w	r8, r8, #1
 8006fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4543      	cmp	r3, r8
 8006ff0:	dcf1      	bgt.n	8006fd6 <_printf_float+0x40e>
 8006ff2:	464b      	mov	r3, r9
 8006ff4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ff8:	e6dc      	b.n	8006db4 <_printf_float+0x1ec>
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	f104 0a1a 	add.w	sl, r4, #26
 8007002:	e7f2      	b.n	8006fea <_printf_float+0x422>
 8007004:	2301      	movs	r3, #1
 8007006:	4642      	mov	r2, r8
 8007008:	e7df      	b.n	8006fca <_printf_float+0x402>
 800700a:	2301      	movs	r3, #1
 800700c:	464a      	mov	r2, r9
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f ae38 	beq.w	8006c8a <_printf_float+0xc2>
 800701a:	f108 0801 	add.w	r8, r8, #1
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007022:	1a5b      	subs	r3, r3, r1
 8007024:	4543      	cmp	r3, r8
 8007026:	dcf0      	bgt.n	800700a <_printf_float+0x442>
 8007028:	e6fa      	b.n	8006e20 <_printf_float+0x258>
 800702a:	f04f 0800 	mov.w	r8, #0
 800702e:	f104 0919 	add.w	r9, r4, #25
 8007032:	e7f4      	b.n	800701e <_printf_float+0x456>

08007034 <_printf_common>:
 8007034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007038:	4616      	mov	r6, r2
 800703a:	4699      	mov	r9, r3
 800703c:	688a      	ldr	r2, [r1, #8]
 800703e:	690b      	ldr	r3, [r1, #16]
 8007040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007044:	4293      	cmp	r3, r2
 8007046:	bfb8      	it	lt
 8007048:	4613      	movlt	r3, r2
 800704a:	6033      	str	r3, [r6, #0]
 800704c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007050:	4607      	mov	r7, r0
 8007052:	460c      	mov	r4, r1
 8007054:	b10a      	cbz	r2, 800705a <_printf_common+0x26>
 8007056:	3301      	adds	r3, #1
 8007058:	6033      	str	r3, [r6, #0]
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	0699      	lsls	r1, r3, #26
 800705e:	bf42      	ittt	mi
 8007060:	6833      	ldrmi	r3, [r6, #0]
 8007062:	3302      	addmi	r3, #2
 8007064:	6033      	strmi	r3, [r6, #0]
 8007066:	6825      	ldr	r5, [r4, #0]
 8007068:	f015 0506 	ands.w	r5, r5, #6
 800706c:	d106      	bne.n	800707c <_printf_common+0x48>
 800706e:	f104 0a19 	add.w	sl, r4, #25
 8007072:	68e3      	ldr	r3, [r4, #12]
 8007074:	6832      	ldr	r2, [r6, #0]
 8007076:	1a9b      	subs	r3, r3, r2
 8007078:	42ab      	cmp	r3, r5
 800707a:	dc26      	bgt.n	80070ca <_printf_common+0x96>
 800707c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007080:	1e13      	subs	r3, r2, #0
 8007082:	6822      	ldr	r2, [r4, #0]
 8007084:	bf18      	it	ne
 8007086:	2301      	movne	r3, #1
 8007088:	0692      	lsls	r2, r2, #26
 800708a:	d42b      	bmi.n	80070e4 <_printf_common+0xb0>
 800708c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007090:	4649      	mov	r1, r9
 8007092:	4638      	mov	r0, r7
 8007094:	47c0      	blx	r8
 8007096:	3001      	adds	r0, #1
 8007098:	d01e      	beq.n	80070d8 <_printf_common+0xa4>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	68e5      	ldr	r5, [r4, #12]
 800709e:	6832      	ldr	r2, [r6, #0]
 80070a0:	f003 0306 	and.w	r3, r3, #6
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	bf08      	it	eq
 80070a8:	1aad      	subeq	r5, r5, r2
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	6922      	ldr	r2, [r4, #16]
 80070ae:	bf0c      	ite	eq
 80070b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070b4:	2500      	movne	r5, #0
 80070b6:	4293      	cmp	r3, r2
 80070b8:	bfc4      	itt	gt
 80070ba:	1a9b      	subgt	r3, r3, r2
 80070bc:	18ed      	addgt	r5, r5, r3
 80070be:	2600      	movs	r6, #0
 80070c0:	341a      	adds	r4, #26
 80070c2:	42b5      	cmp	r5, r6
 80070c4:	d11a      	bne.n	80070fc <_printf_common+0xc8>
 80070c6:	2000      	movs	r0, #0
 80070c8:	e008      	b.n	80070dc <_printf_common+0xa8>
 80070ca:	2301      	movs	r3, #1
 80070cc:	4652      	mov	r2, sl
 80070ce:	4649      	mov	r1, r9
 80070d0:	4638      	mov	r0, r7
 80070d2:	47c0      	blx	r8
 80070d4:	3001      	adds	r0, #1
 80070d6:	d103      	bne.n	80070e0 <_printf_common+0xac>
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e0:	3501      	adds	r5, #1
 80070e2:	e7c6      	b.n	8007072 <_printf_common+0x3e>
 80070e4:	18e1      	adds	r1, r4, r3
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	2030      	movs	r0, #48	; 0x30
 80070ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070ee:	4422      	add	r2, r4
 80070f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070f8:	3302      	adds	r3, #2
 80070fa:	e7c7      	b.n	800708c <_printf_common+0x58>
 80070fc:	2301      	movs	r3, #1
 80070fe:	4622      	mov	r2, r4
 8007100:	4649      	mov	r1, r9
 8007102:	4638      	mov	r0, r7
 8007104:	47c0      	blx	r8
 8007106:	3001      	adds	r0, #1
 8007108:	d0e6      	beq.n	80070d8 <_printf_common+0xa4>
 800710a:	3601      	adds	r6, #1
 800710c:	e7d9      	b.n	80070c2 <_printf_common+0x8e>
	...

08007110 <_printf_i>:
 8007110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007114:	7e0f      	ldrb	r7, [r1, #24]
 8007116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007118:	2f78      	cmp	r7, #120	; 0x78
 800711a:	4691      	mov	r9, r2
 800711c:	4680      	mov	r8, r0
 800711e:	460c      	mov	r4, r1
 8007120:	469a      	mov	sl, r3
 8007122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007126:	d807      	bhi.n	8007138 <_printf_i+0x28>
 8007128:	2f62      	cmp	r7, #98	; 0x62
 800712a:	d80a      	bhi.n	8007142 <_printf_i+0x32>
 800712c:	2f00      	cmp	r7, #0
 800712e:	f000 80d8 	beq.w	80072e2 <_printf_i+0x1d2>
 8007132:	2f58      	cmp	r7, #88	; 0x58
 8007134:	f000 80a3 	beq.w	800727e <_printf_i+0x16e>
 8007138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800713c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007140:	e03a      	b.n	80071b8 <_printf_i+0xa8>
 8007142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007146:	2b15      	cmp	r3, #21
 8007148:	d8f6      	bhi.n	8007138 <_printf_i+0x28>
 800714a:	a101      	add	r1, pc, #4	; (adr r1, 8007150 <_printf_i+0x40>)
 800714c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007150:	080071a9 	.word	0x080071a9
 8007154:	080071bd 	.word	0x080071bd
 8007158:	08007139 	.word	0x08007139
 800715c:	08007139 	.word	0x08007139
 8007160:	08007139 	.word	0x08007139
 8007164:	08007139 	.word	0x08007139
 8007168:	080071bd 	.word	0x080071bd
 800716c:	08007139 	.word	0x08007139
 8007170:	08007139 	.word	0x08007139
 8007174:	08007139 	.word	0x08007139
 8007178:	08007139 	.word	0x08007139
 800717c:	080072c9 	.word	0x080072c9
 8007180:	080071ed 	.word	0x080071ed
 8007184:	080072ab 	.word	0x080072ab
 8007188:	08007139 	.word	0x08007139
 800718c:	08007139 	.word	0x08007139
 8007190:	080072eb 	.word	0x080072eb
 8007194:	08007139 	.word	0x08007139
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007139 	.word	0x08007139
 80071a0:	08007139 	.word	0x08007139
 80071a4:	080072b3 	.word	0x080072b3
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	1d1a      	adds	r2, r3, #4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	602a      	str	r2, [r5, #0]
 80071b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071b8:	2301      	movs	r3, #1
 80071ba:	e0a3      	b.n	8007304 <_printf_i+0x1f4>
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	6829      	ldr	r1, [r5, #0]
 80071c0:	0606      	lsls	r6, r0, #24
 80071c2:	f101 0304 	add.w	r3, r1, #4
 80071c6:	d50a      	bpl.n	80071de <_printf_i+0xce>
 80071c8:	680e      	ldr	r6, [r1, #0]
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	2e00      	cmp	r6, #0
 80071ce:	da03      	bge.n	80071d8 <_printf_i+0xc8>
 80071d0:	232d      	movs	r3, #45	; 0x2d
 80071d2:	4276      	negs	r6, r6
 80071d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d8:	485e      	ldr	r0, [pc, #376]	; (8007354 <_printf_i+0x244>)
 80071da:	230a      	movs	r3, #10
 80071dc:	e019      	b.n	8007212 <_printf_i+0x102>
 80071de:	680e      	ldr	r6, [r1, #0]
 80071e0:	602b      	str	r3, [r5, #0]
 80071e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071e6:	bf18      	it	ne
 80071e8:	b236      	sxthne	r6, r6
 80071ea:	e7ef      	b.n	80071cc <_printf_i+0xbc>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	6820      	ldr	r0, [r4, #0]
 80071f0:	1d19      	adds	r1, r3, #4
 80071f2:	6029      	str	r1, [r5, #0]
 80071f4:	0601      	lsls	r1, r0, #24
 80071f6:	d501      	bpl.n	80071fc <_printf_i+0xec>
 80071f8:	681e      	ldr	r6, [r3, #0]
 80071fa:	e002      	b.n	8007202 <_printf_i+0xf2>
 80071fc:	0646      	lsls	r6, r0, #25
 80071fe:	d5fb      	bpl.n	80071f8 <_printf_i+0xe8>
 8007200:	881e      	ldrh	r6, [r3, #0]
 8007202:	4854      	ldr	r0, [pc, #336]	; (8007354 <_printf_i+0x244>)
 8007204:	2f6f      	cmp	r7, #111	; 0x6f
 8007206:	bf0c      	ite	eq
 8007208:	2308      	moveq	r3, #8
 800720a:	230a      	movne	r3, #10
 800720c:	2100      	movs	r1, #0
 800720e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007212:	6865      	ldr	r5, [r4, #4]
 8007214:	60a5      	str	r5, [r4, #8]
 8007216:	2d00      	cmp	r5, #0
 8007218:	bfa2      	ittt	ge
 800721a:	6821      	ldrge	r1, [r4, #0]
 800721c:	f021 0104 	bicge.w	r1, r1, #4
 8007220:	6021      	strge	r1, [r4, #0]
 8007222:	b90e      	cbnz	r6, 8007228 <_printf_i+0x118>
 8007224:	2d00      	cmp	r5, #0
 8007226:	d04d      	beq.n	80072c4 <_printf_i+0x1b4>
 8007228:	4615      	mov	r5, r2
 800722a:	fbb6 f1f3 	udiv	r1, r6, r3
 800722e:	fb03 6711 	mls	r7, r3, r1, r6
 8007232:	5dc7      	ldrb	r7, [r0, r7]
 8007234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007238:	4637      	mov	r7, r6
 800723a:	42bb      	cmp	r3, r7
 800723c:	460e      	mov	r6, r1
 800723e:	d9f4      	bls.n	800722a <_printf_i+0x11a>
 8007240:	2b08      	cmp	r3, #8
 8007242:	d10b      	bne.n	800725c <_printf_i+0x14c>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	07de      	lsls	r6, r3, #31
 8007248:	d508      	bpl.n	800725c <_printf_i+0x14c>
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	6861      	ldr	r1, [r4, #4]
 800724e:	4299      	cmp	r1, r3
 8007250:	bfde      	ittt	le
 8007252:	2330      	movle	r3, #48	; 0x30
 8007254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800725c:	1b52      	subs	r2, r2, r5
 800725e:	6122      	str	r2, [r4, #16]
 8007260:	f8cd a000 	str.w	sl, [sp]
 8007264:	464b      	mov	r3, r9
 8007266:	aa03      	add	r2, sp, #12
 8007268:	4621      	mov	r1, r4
 800726a:	4640      	mov	r0, r8
 800726c:	f7ff fee2 	bl	8007034 <_printf_common>
 8007270:	3001      	adds	r0, #1
 8007272:	d14c      	bne.n	800730e <_printf_i+0x1fe>
 8007274:	f04f 30ff 	mov.w	r0, #4294967295
 8007278:	b004      	add	sp, #16
 800727a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727e:	4835      	ldr	r0, [pc, #212]	; (8007354 <_printf_i+0x244>)
 8007280:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007284:	6829      	ldr	r1, [r5, #0]
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	f851 6b04 	ldr.w	r6, [r1], #4
 800728c:	6029      	str	r1, [r5, #0]
 800728e:	061d      	lsls	r5, r3, #24
 8007290:	d514      	bpl.n	80072bc <_printf_i+0x1ac>
 8007292:	07df      	lsls	r7, r3, #31
 8007294:	bf44      	itt	mi
 8007296:	f043 0320 	orrmi.w	r3, r3, #32
 800729a:	6023      	strmi	r3, [r4, #0]
 800729c:	b91e      	cbnz	r6, 80072a6 <_printf_i+0x196>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	f023 0320 	bic.w	r3, r3, #32
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	2310      	movs	r3, #16
 80072a8:	e7b0      	b.n	800720c <_printf_i+0xfc>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	f043 0320 	orr.w	r3, r3, #32
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	2378      	movs	r3, #120	; 0x78
 80072b4:	4828      	ldr	r0, [pc, #160]	; (8007358 <_printf_i+0x248>)
 80072b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ba:	e7e3      	b.n	8007284 <_printf_i+0x174>
 80072bc:	0659      	lsls	r1, r3, #25
 80072be:	bf48      	it	mi
 80072c0:	b2b6      	uxthmi	r6, r6
 80072c2:	e7e6      	b.n	8007292 <_printf_i+0x182>
 80072c4:	4615      	mov	r5, r2
 80072c6:	e7bb      	b.n	8007240 <_printf_i+0x130>
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	6826      	ldr	r6, [r4, #0]
 80072cc:	6961      	ldr	r1, [r4, #20]
 80072ce:	1d18      	adds	r0, r3, #4
 80072d0:	6028      	str	r0, [r5, #0]
 80072d2:	0635      	lsls	r5, r6, #24
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	d501      	bpl.n	80072dc <_printf_i+0x1cc>
 80072d8:	6019      	str	r1, [r3, #0]
 80072da:	e002      	b.n	80072e2 <_printf_i+0x1d2>
 80072dc:	0670      	lsls	r0, r6, #25
 80072de:	d5fb      	bpl.n	80072d8 <_printf_i+0x1c8>
 80072e0:	8019      	strh	r1, [r3, #0]
 80072e2:	2300      	movs	r3, #0
 80072e4:	6123      	str	r3, [r4, #16]
 80072e6:	4615      	mov	r5, r2
 80072e8:	e7ba      	b.n	8007260 <_printf_i+0x150>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	1d1a      	adds	r2, r3, #4
 80072ee:	602a      	str	r2, [r5, #0]
 80072f0:	681d      	ldr	r5, [r3, #0]
 80072f2:	6862      	ldr	r2, [r4, #4]
 80072f4:	2100      	movs	r1, #0
 80072f6:	4628      	mov	r0, r5
 80072f8:	f7f8 ff72 	bl	80001e0 <memchr>
 80072fc:	b108      	cbz	r0, 8007302 <_printf_i+0x1f2>
 80072fe:	1b40      	subs	r0, r0, r5
 8007300:	6060      	str	r0, [r4, #4]
 8007302:	6863      	ldr	r3, [r4, #4]
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	2300      	movs	r3, #0
 8007308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800730c:	e7a8      	b.n	8007260 <_printf_i+0x150>
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	462a      	mov	r2, r5
 8007312:	4649      	mov	r1, r9
 8007314:	4640      	mov	r0, r8
 8007316:	47d0      	blx	sl
 8007318:	3001      	adds	r0, #1
 800731a:	d0ab      	beq.n	8007274 <_printf_i+0x164>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	079b      	lsls	r3, r3, #30
 8007320:	d413      	bmi.n	800734a <_printf_i+0x23a>
 8007322:	68e0      	ldr	r0, [r4, #12]
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	4298      	cmp	r0, r3
 8007328:	bfb8      	it	lt
 800732a:	4618      	movlt	r0, r3
 800732c:	e7a4      	b.n	8007278 <_printf_i+0x168>
 800732e:	2301      	movs	r3, #1
 8007330:	4632      	mov	r2, r6
 8007332:	4649      	mov	r1, r9
 8007334:	4640      	mov	r0, r8
 8007336:	47d0      	blx	sl
 8007338:	3001      	adds	r0, #1
 800733a:	d09b      	beq.n	8007274 <_printf_i+0x164>
 800733c:	3501      	adds	r5, #1
 800733e:	68e3      	ldr	r3, [r4, #12]
 8007340:	9903      	ldr	r1, [sp, #12]
 8007342:	1a5b      	subs	r3, r3, r1
 8007344:	42ab      	cmp	r3, r5
 8007346:	dcf2      	bgt.n	800732e <_printf_i+0x21e>
 8007348:	e7eb      	b.n	8007322 <_printf_i+0x212>
 800734a:	2500      	movs	r5, #0
 800734c:	f104 0619 	add.w	r6, r4, #25
 8007350:	e7f5      	b.n	800733e <_printf_i+0x22e>
 8007352:	bf00      	nop
 8007354:	0800954e 	.word	0x0800954e
 8007358:	0800955f 	.word	0x0800955f

0800735c <iprintf>:
 800735c:	b40f      	push	{r0, r1, r2, r3}
 800735e:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <iprintf+0x2c>)
 8007360:	b513      	push	{r0, r1, r4, lr}
 8007362:	681c      	ldr	r4, [r3, #0]
 8007364:	b124      	cbz	r4, 8007370 <iprintf+0x14>
 8007366:	69a3      	ldr	r3, [r4, #24]
 8007368:	b913      	cbnz	r3, 8007370 <iprintf+0x14>
 800736a:	4620      	mov	r0, r4
 800736c:	f000 fee2 	bl	8008134 <__sinit>
 8007370:	ab05      	add	r3, sp, #20
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	68a1      	ldr	r1, [r4, #8]
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	4620      	mov	r0, r4
 800737a:	f001 fc2d 	bl	8008bd8 <_vfiprintf_r>
 800737e:	b002      	add	sp, #8
 8007380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007384:	b004      	add	sp, #16
 8007386:	4770      	bx	lr
 8007388:	20000078 	.word	0x20000078

0800738c <quorem>:
 800738c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	6903      	ldr	r3, [r0, #16]
 8007392:	690c      	ldr	r4, [r1, #16]
 8007394:	42a3      	cmp	r3, r4
 8007396:	4607      	mov	r7, r0
 8007398:	f2c0 8081 	blt.w	800749e <quorem+0x112>
 800739c:	3c01      	subs	r4, #1
 800739e:	f101 0814 	add.w	r8, r1, #20
 80073a2:	f100 0514 	add.w	r5, r0, #20
 80073a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073b4:	3301      	adds	r3, #1
 80073b6:	429a      	cmp	r2, r3
 80073b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80073c4:	d331      	bcc.n	800742a <quorem+0x9e>
 80073c6:	f04f 0e00 	mov.w	lr, #0
 80073ca:	4640      	mov	r0, r8
 80073cc:	46ac      	mov	ip, r5
 80073ce:	46f2      	mov	sl, lr
 80073d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80073d4:	b293      	uxth	r3, r2
 80073d6:	fb06 e303 	mla	r3, r6, r3, lr
 80073da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073de:	b29b      	uxth	r3, r3
 80073e0:	ebaa 0303 	sub.w	r3, sl, r3
 80073e4:	f8dc a000 	ldr.w	sl, [ip]
 80073e8:	0c12      	lsrs	r2, r2, #16
 80073ea:	fa13 f38a 	uxtah	r3, r3, sl
 80073ee:	fb06 e202 	mla	r2, r6, r2, lr
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	9b00      	ldr	r3, [sp, #0]
 80073f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073fa:	b292      	uxth	r2, r2
 80073fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007404:	f8bd 3000 	ldrh.w	r3, [sp]
 8007408:	4581      	cmp	r9, r0
 800740a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800740e:	f84c 3b04 	str.w	r3, [ip], #4
 8007412:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007416:	d2db      	bcs.n	80073d0 <quorem+0x44>
 8007418:	f855 300b 	ldr.w	r3, [r5, fp]
 800741c:	b92b      	cbnz	r3, 800742a <quorem+0x9e>
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	3b04      	subs	r3, #4
 8007422:	429d      	cmp	r5, r3
 8007424:	461a      	mov	r2, r3
 8007426:	d32e      	bcc.n	8007486 <quorem+0xfa>
 8007428:	613c      	str	r4, [r7, #16]
 800742a:	4638      	mov	r0, r7
 800742c:	f001 f9b2 	bl	8008794 <__mcmp>
 8007430:	2800      	cmp	r0, #0
 8007432:	db24      	blt.n	800747e <quorem+0xf2>
 8007434:	3601      	adds	r6, #1
 8007436:	4628      	mov	r0, r5
 8007438:	f04f 0c00 	mov.w	ip, #0
 800743c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007440:	f8d0 e000 	ldr.w	lr, [r0]
 8007444:	b293      	uxth	r3, r2
 8007446:	ebac 0303 	sub.w	r3, ip, r3
 800744a:	0c12      	lsrs	r2, r2, #16
 800744c:	fa13 f38e 	uxtah	r3, r3, lr
 8007450:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007454:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007458:	b29b      	uxth	r3, r3
 800745a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800745e:	45c1      	cmp	r9, r8
 8007460:	f840 3b04 	str.w	r3, [r0], #4
 8007464:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007468:	d2e8      	bcs.n	800743c <quorem+0xb0>
 800746a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800746e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007472:	b922      	cbnz	r2, 800747e <quorem+0xf2>
 8007474:	3b04      	subs	r3, #4
 8007476:	429d      	cmp	r5, r3
 8007478:	461a      	mov	r2, r3
 800747a:	d30a      	bcc.n	8007492 <quorem+0x106>
 800747c:	613c      	str	r4, [r7, #16]
 800747e:	4630      	mov	r0, r6
 8007480:	b003      	add	sp, #12
 8007482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	3b04      	subs	r3, #4
 800748a:	2a00      	cmp	r2, #0
 800748c:	d1cc      	bne.n	8007428 <quorem+0x9c>
 800748e:	3c01      	subs	r4, #1
 8007490:	e7c7      	b.n	8007422 <quorem+0x96>
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	3b04      	subs	r3, #4
 8007496:	2a00      	cmp	r2, #0
 8007498:	d1f0      	bne.n	800747c <quorem+0xf0>
 800749a:	3c01      	subs	r4, #1
 800749c:	e7eb      	b.n	8007476 <quorem+0xea>
 800749e:	2000      	movs	r0, #0
 80074a0:	e7ee      	b.n	8007480 <quorem+0xf4>
 80074a2:	0000      	movs	r0, r0
 80074a4:	0000      	movs	r0, r0
	...

080074a8 <_dtoa_r>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	ed2d 8b04 	vpush	{d8-d9}
 80074b0:	ec57 6b10 	vmov	r6, r7, d0
 80074b4:	b093      	sub	sp, #76	; 0x4c
 80074b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074bc:	9106      	str	r1, [sp, #24]
 80074be:	ee10 aa10 	vmov	sl, s0
 80074c2:	4604      	mov	r4, r0
 80074c4:	9209      	str	r2, [sp, #36]	; 0x24
 80074c6:	930c      	str	r3, [sp, #48]	; 0x30
 80074c8:	46bb      	mov	fp, r7
 80074ca:	b975      	cbnz	r5, 80074ea <_dtoa_r+0x42>
 80074cc:	2010      	movs	r0, #16
 80074ce:	f000 fed7 	bl	8008280 <malloc>
 80074d2:	4602      	mov	r2, r0
 80074d4:	6260      	str	r0, [r4, #36]	; 0x24
 80074d6:	b920      	cbnz	r0, 80074e2 <_dtoa_r+0x3a>
 80074d8:	4ba7      	ldr	r3, [pc, #668]	; (8007778 <_dtoa_r+0x2d0>)
 80074da:	21ea      	movs	r1, #234	; 0xea
 80074dc:	48a7      	ldr	r0, [pc, #668]	; (800777c <_dtoa_r+0x2d4>)
 80074de:	f001 fdd1 	bl	8009084 <__assert_func>
 80074e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074e6:	6005      	str	r5, [r0, #0]
 80074e8:	60c5      	str	r5, [r0, #12]
 80074ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	b151      	cbz	r1, 8007506 <_dtoa_r+0x5e>
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	604a      	str	r2, [r1, #4]
 80074f4:	2301      	movs	r3, #1
 80074f6:	4093      	lsls	r3, r2
 80074f8:	608b      	str	r3, [r1, #8]
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 ff08 	bl	8008310 <_Bfree>
 8007500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	1e3b      	subs	r3, r7, #0
 8007508:	bfaa      	itet	ge
 800750a:	2300      	movge	r3, #0
 800750c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007510:	f8c8 3000 	strge.w	r3, [r8]
 8007514:	4b9a      	ldr	r3, [pc, #616]	; (8007780 <_dtoa_r+0x2d8>)
 8007516:	bfbc      	itt	lt
 8007518:	2201      	movlt	r2, #1
 800751a:	f8c8 2000 	strlt.w	r2, [r8]
 800751e:	ea33 030b 	bics.w	r3, r3, fp
 8007522:	d11b      	bne.n	800755c <_dtoa_r+0xb4>
 8007524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007526:	f242 730f 	movw	r3, #9999	; 0x270f
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007530:	4333      	orrs	r3, r6
 8007532:	f000 8592 	beq.w	800805a <_dtoa_r+0xbb2>
 8007536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007538:	b963      	cbnz	r3, 8007554 <_dtoa_r+0xac>
 800753a:	4b92      	ldr	r3, [pc, #584]	; (8007784 <_dtoa_r+0x2dc>)
 800753c:	e022      	b.n	8007584 <_dtoa_r+0xdc>
 800753e:	4b92      	ldr	r3, [pc, #584]	; (8007788 <_dtoa_r+0x2e0>)
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	3308      	adds	r3, #8
 8007544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	9801      	ldr	r0, [sp, #4]
 800754a:	b013      	add	sp, #76	; 0x4c
 800754c:	ecbd 8b04 	vpop	{d8-d9}
 8007550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007554:	4b8b      	ldr	r3, [pc, #556]	; (8007784 <_dtoa_r+0x2dc>)
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	3303      	adds	r3, #3
 800755a:	e7f3      	b.n	8007544 <_dtoa_r+0x9c>
 800755c:	2200      	movs	r2, #0
 800755e:	2300      	movs	r3, #0
 8007560:	4650      	mov	r0, sl
 8007562:	4659      	mov	r1, fp
 8007564:	f7f9 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007568:	ec4b ab19 	vmov	d9, sl, fp
 800756c:	4680      	mov	r8, r0
 800756e:	b158      	cbz	r0, 8007588 <_dtoa_r+0xe0>
 8007570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007572:	2301      	movs	r3, #1
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 856b 	beq.w	8008054 <_dtoa_r+0xbac>
 800757e:	4883      	ldr	r0, [pc, #524]	; (800778c <_dtoa_r+0x2e4>)
 8007580:	6018      	str	r0, [r3, #0]
 8007582:	1e43      	subs	r3, r0, #1
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	e7df      	b.n	8007548 <_dtoa_r+0xa0>
 8007588:	ec4b ab10 	vmov	d0, sl, fp
 800758c:	aa10      	add	r2, sp, #64	; 0x40
 800758e:	a911      	add	r1, sp, #68	; 0x44
 8007590:	4620      	mov	r0, r4
 8007592:	f001 f9a5 	bl	80088e0 <__d2b>
 8007596:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800759a:	ee08 0a10 	vmov	s16, r0
 800759e:	2d00      	cmp	r5, #0
 80075a0:	f000 8084 	beq.w	80076ac <_dtoa_r+0x204>
 80075a4:	ee19 3a90 	vmov	r3, s19
 80075a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075b0:	4656      	mov	r6, sl
 80075b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80075be:	4b74      	ldr	r3, [pc, #464]	; (8007790 <_dtoa_r+0x2e8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f8 fe5f 	bl	8000288 <__aeabi_dsub>
 80075ca:	a365      	add	r3, pc, #404	; (adr r3, 8007760 <_dtoa_r+0x2b8>)
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	f7f9 f812 	bl	80005f8 <__aeabi_dmul>
 80075d4:	a364      	add	r3, pc, #400	; (adr r3, 8007768 <_dtoa_r+0x2c0>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f7f8 fe57 	bl	800028c <__adddf3>
 80075de:	4606      	mov	r6, r0
 80075e0:	4628      	mov	r0, r5
 80075e2:	460f      	mov	r7, r1
 80075e4:	f7f8 ff9e 	bl	8000524 <__aeabi_i2d>
 80075e8:	a361      	add	r3, pc, #388	; (adr r3, 8007770 <_dtoa_r+0x2c8>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f9 f803 	bl	80005f8 <__aeabi_dmul>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4630      	mov	r0, r6
 80075f8:	4639      	mov	r1, r7
 80075fa:	f7f8 fe47 	bl	800028c <__adddf3>
 80075fe:	4606      	mov	r6, r0
 8007600:	460f      	mov	r7, r1
 8007602:	f7f9 faa9 	bl	8000b58 <__aeabi_d2iz>
 8007606:	2200      	movs	r2, #0
 8007608:	9000      	str	r0, [sp, #0]
 800760a:	2300      	movs	r3, #0
 800760c:	4630      	mov	r0, r6
 800760e:	4639      	mov	r1, r7
 8007610:	f7f9 fa64 	bl	8000adc <__aeabi_dcmplt>
 8007614:	b150      	cbz	r0, 800762c <_dtoa_r+0x184>
 8007616:	9800      	ldr	r0, [sp, #0]
 8007618:	f7f8 ff84 	bl	8000524 <__aeabi_i2d>
 800761c:	4632      	mov	r2, r6
 800761e:	463b      	mov	r3, r7
 8007620:	f7f9 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007624:	b910      	cbnz	r0, 800762c <_dtoa_r+0x184>
 8007626:	9b00      	ldr	r3, [sp, #0]
 8007628:	3b01      	subs	r3, #1
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	9b00      	ldr	r3, [sp, #0]
 800762e:	2b16      	cmp	r3, #22
 8007630:	d85a      	bhi.n	80076e8 <_dtoa_r+0x240>
 8007632:	9a00      	ldr	r2, [sp, #0]
 8007634:	4b57      	ldr	r3, [pc, #348]	; (8007794 <_dtoa_r+0x2ec>)
 8007636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	ec51 0b19 	vmov	r0, r1, d9
 8007642:	f7f9 fa4b 	bl	8000adc <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	d050      	beq.n	80076ec <_dtoa_r+0x244>
 800764a:	9b00      	ldr	r3, [sp, #0]
 800764c:	3b01      	subs	r3, #1
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	2300      	movs	r3, #0
 8007652:	930b      	str	r3, [sp, #44]	; 0x2c
 8007654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007656:	1b5d      	subs	r5, r3, r5
 8007658:	1e6b      	subs	r3, r5, #1
 800765a:	9305      	str	r3, [sp, #20]
 800765c:	bf45      	ittet	mi
 800765e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007662:	9304      	strmi	r3, [sp, #16]
 8007664:	2300      	movpl	r3, #0
 8007666:	2300      	movmi	r3, #0
 8007668:	bf4c      	ite	mi
 800766a:	9305      	strmi	r3, [sp, #20]
 800766c:	9304      	strpl	r3, [sp, #16]
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	db3d      	blt.n	80076f0 <_dtoa_r+0x248>
 8007674:	9b05      	ldr	r3, [sp, #20]
 8007676:	9a00      	ldr	r2, [sp, #0]
 8007678:	920a      	str	r2, [sp, #40]	; 0x28
 800767a:	4413      	add	r3, r2
 800767c:	9305      	str	r3, [sp, #20]
 800767e:	2300      	movs	r3, #0
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	9b06      	ldr	r3, [sp, #24]
 8007684:	2b09      	cmp	r3, #9
 8007686:	f200 8089 	bhi.w	800779c <_dtoa_r+0x2f4>
 800768a:	2b05      	cmp	r3, #5
 800768c:	bfc4      	itt	gt
 800768e:	3b04      	subgt	r3, #4
 8007690:	9306      	strgt	r3, [sp, #24]
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	f1a3 0302 	sub.w	r3, r3, #2
 8007698:	bfcc      	ite	gt
 800769a:	2500      	movgt	r5, #0
 800769c:	2501      	movle	r5, #1
 800769e:	2b03      	cmp	r3, #3
 80076a0:	f200 8087 	bhi.w	80077b2 <_dtoa_r+0x30a>
 80076a4:	e8df f003 	tbb	[pc, r3]
 80076a8:	59383a2d 	.word	0x59383a2d
 80076ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076b0:	441d      	add	r5, r3
 80076b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	bfc1      	itttt	gt
 80076ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80076c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076ca:	bfda      	itte	le
 80076cc:	f1c3 0320 	rsble	r3, r3, #32
 80076d0:	fa06 f003 	lslle.w	r0, r6, r3
 80076d4:	4318      	orrgt	r0, r3
 80076d6:	f7f8 ff15 	bl	8000504 <__aeabi_ui2d>
 80076da:	2301      	movs	r3, #1
 80076dc:	4606      	mov	r6, r0
 80076de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076e2:	3d01      	subs	r5, #1
 80076e4:	930e      	str	r3, [sp, #56]	; 0x38
 80076e6:	e76a      	b.n	80075be <_dtoa_r+0x116>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e7b2      	b.n	8007652 <_dtoa_r+0x1aa>
 80076ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80076ee:	e7b1      	b.n	8007654 <_dtoa_r+0x1ac>
 80076f0:	9b04      	ldr	r3, [sp, #16]
 80076f2:	9a00      	ldr	r2, [sp, #0]
 80076f4:	1a9b      	subs	r3, r3, r2
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	4253      	negs	r3, r2
 80076fa:	9307      	str	r3, [sp, #28]
 80076fc:	2300      	movs	r3, #0
 80076fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007700:	e7bf      	b.n	8007682 <_dtoa_r+0x1da>
 8007702:	2300      	movs	r3, #0
 8007704:	9308      	str	r3, [sp, #32]
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	dc55      	bgt.n	80077b8 <_dtoa_r+0x310>
 800770c:	2301      	movs	r3, #1
 800770e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007712:	461a      	mov	r2, r3
 8007714:	9209      	str	r2, [sp, #36]	; 0x24
 8007716:	e00c      	b.n	8007732 <_dtoa_r+0x28a>
 8007718:	2301      	movs	r3, #1
 800771a:	e7f3      	b.n	8007704 <_dtoa_r+0x25c>
 800771c:	2300      	movs	r3, #0
 800771e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007720:	9308      	str	r3, [sp, #32]
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	4413      	add	r3, r2
 8007726:	9302      	str	r3, [sp, #8]
 8007728:	3301      	adds	r3, #1
 800772a:	2b01      	cmp	r3, #1
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	bfb8      	it	lt
 8007730:	2301      	movlt	r3, #1
 8007732:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007734:	2200      	movs	r2, #0
 8007736:	6042      	str	r2, [r0, #4]
 8007738:	2204      	movs	r2, #4
 800773a:	f102 0614 	add.w	r6, r2, #20
 800773e:	429e      	cmp	r6, r3
 8007740:	6841      	ldr	r1, [r0, #4]
 8007742:	d93d      	bls.n	80077c0 <_dtoa_r+0x318>
 8007744:	4620      	mov	r0, r4
 8007746:	f000 fda3 	bl	8008290 <_Balloc>
 800774a:	9001      	str	r0, [sp, #4]
 800774c:	2800      	cmp	r0, #0
 800774e:	d13b      	bne.n	80077c8 <_dtoa_r+0x320>
 8007750:	4b11      	ldr	r3, [pc, #68]	; (8007798 <_dtoa_r+0x2f0>)
 8007752:	4602      	mov	r2, r0
 8007754:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007758:	e6c0      	b.n	80074dc <_dtoa_r+0x34>
 800775a:	2301      	movs	r3, #1
 800775c:	e7df      	b.n	800771e <_dtoa_r+0x276>
 800775e:	bf00      	nop
 8007760:	636f4361 	.word	0x636f4361
 8007764:	3fd287a7 	.word	0x3fd287a7
 8007768:	8b60c8b3 	.word	0x8b60c8b3
 800776c:	3fc68a28 	.word	0x3fc68a28
 8007770:	509f79fb 	.word	0x509f79fb
 8007774:	3fd34413 	.word	0x3fd34413
 8007778:	0800957d 	.word	0x0800957d
 800777c:	08009594 	.word	0x08009594
 8007780:	7ff00000 	.word	0x7ff00000
 8007784:	08009579 	.word	0x08009579
 8007788:	08009570 	.word	0x08009570
 800778c:	0800954d 	.word	0x0800954d
 8007790:	3ff80000 	.word	0x3ff80000
 8007794:	080096e8 	.word	0x080096e8
 8007798:	080095ef 	.word	0x080095ef
 800779c:	2501      	movs	r5, #1
 800779e:	2300      	movs	r3, #0
 80077a0:	9306      	str	r3, [sp, #24]
 80077a2:	9508      	str	r5, [sp, #32]
 80077a4:	f04f 33ff 	mov.w	r3, #4294967295
 80077a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077ac:	2200      	movs	r2, #0
 80077ae:	2312      	movs	r3, #18
 80077b0:	e7b0      	b.n	8007714 <_dtoa_r+0x26c>
 80077b2:	2301      	movs	r3, #1
 80077b4:	9308      	str	r3, [sp, #32]
 80077b6:	e7f5      	b.n	80077a4 <_dtoa_r+0x2fc>
 80077b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077be:	e7b8      	b.n	8007732 <_dtoa_r+0x28a>
 80077c0:	3101      	adds	r1, #1
 80077c2:	6041      	str	r1, [r0, #4]
 80077c4:	0052      	lsls	r2, r2, #1
 80077c6:	e7b8      	b.n	800773a <_dtoa_r+0x292>
 80077c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ca:	9a01      	ldr	r2, [sp, #4]
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	2b0e      	cmp	r3, #14
 80077d2:	f200 809d 	bhi.w	8007910 <_dtoa_r+0x468>
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	f000 809a 	beq.w	8007910 <_dtoa_r+0x468>
 80077dc:	9b00      	ldr	r3, [sp, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd32      	ble.n	8007848 <_dtoa_r+0x3a0>
 80077e2:	4ab7      	ldr	r2, [pc, #732]	; (8007ac0 <_dtoa_r+0x618>)
 80077e4:	f003 030f 	and.w	r3, r3, #15
 80077e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	05d8      	lsls	r0, r3, #23
 80077f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80077f8:	d516      	bpl.n	8007828 <_dtoa_r+0x380>
 80077fa:	4bb2      	ldr	r3, [pc, #712]	; (8007ac4 <_dtoa_r+0x61c>)
 80077fc:	ec51 0b19 	vmov	r0, r1, d9
 8007800:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007804:	f7f9 f822 	bl	800084c <__aeabi_ddiv>
 8007808:	f007 070f 	and.w	r7, r7, #15
 800780c:	4682      	mov	sl, r0
 800780e:	468b      	mov	fp, r1
 8007810:	2503      	movs	r5, #3
 8007812:	4eac      	ldr	r6, [pc, #688]	; (8007ac4 <_dtoa_r+0x61c>)
 8007814:	b957      	cbnz	r7, 800782c <_dtoa_r+0x384>
 8007816:	4642      	mov	r2, r8
 8007818:	464b      	mov	r3, r9
 800781a:	4650      	mov	r0, sl
 800781c:	4659      	mov	r1, fp
 800781e:	f7f9 f815 	bl	800084c <__aeabi_ddiv>
 8007822:	4682      	mov	sl, r0
 8007824:	468b      	mov	fp, r1
 8007826:	e028      	b.n	800787a <_dtoa_r+0x3d2>
 8007828:	2502      	movs	r5, #2
 800782a:	e7f2      	b.n	8007812 <_dtoa_r+0x36a>
 800782c:	07f9      	lsls	r1, r7, #31
 800782e:	d508      	bpl.n	8007842 <_dtoa_r+0x39a>
 8007830:	4640      	mov	r0, r8
 8007832:	4649      	mov	r1, r9
 8007834:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007838:	f7f8 fede 	bl	80005f8 <__aeabi_dmul>
 800783c:	3501      	adds	r5, #1
 800783e:	4680      	mov	r8, r0
 8007840:	4689      	mov	r9, r1
 8007842:	107f      	asrs	r7, r7, #1
 8007844:	3608      	adds	r6, #8
 8007846:	e7e5      	b.n	8007814 <_dtoa_r+0x36c>
 8007848:	f000 809b 	beq.w	8007982 <_dtoa_r+0x4da>
 800784c:	9b00      	ldr	r3, [sp, #0]
 800784e:	4f9d      	ldr	r7, [pc, #628]	; (8007ac4 <_dtoa_r+0x61c>)
 8007850:	425e      	negs	r6, r3
 8007852:	4b9b      	ldr	r3, [pc, #620]	; (8007ac0 <_dtoa_r+0x618>)
 8007854:	f006 020f 	and.w	r2, r6, #15
 8007858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	ec51 0b19 	vmov	r0, r1, d9
 8007864:	f7f8 fec8 	bl	80005f8 <__aeabi_dmul>
 8007868:	1136      	asrs	r6, r6, #4
 800786a:	4682      	mov	sl, r0
 800786c:	468b      	mov	fp, r1
 800786e:	2300      	movs	r3, #0
 8007870:	2502      	movs	r5, #2
 8007872:	2e00      	cmp	r6, #0
 8007874:	d17a      	bne.n	800796c <_dtoa_r+0x4c4>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1d3      	bne.n	8007822 <_dtoa_r+0x37a>
 800787a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 8082 	beq.w	8007986 <_dtoa_r+0x4de>
 8007882:	4b91      	ldr	r3, [pc, #580]	; (8007ac8 <_dtoa_r+0x620>)
 8007884:	2200      	movs	r2, #0
 8007886:	4650      	mov	r0, sl
 8007888:	4659      	mov	r1, fp
 800788a:	f7f9 f927 	bl	8000adc <__aeabi_dcmplt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d079      	beq.n	8007986 <_dtoa_r+0x4de>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d076      	beq.n	8007986 <_dtoa_r+0x4de>
 8007898:	9b02      	ldr	r3, [sp, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd36      	ble.n	800790c <_dtoa_r+0x464>
 800789e:	9b00      	ldr	r3, [sp, #0]
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	1e5f      	subs	r7, r3, #1
 80078a6:	2200      	movs	r2, #0
 80078a8:	4b88      	ldr	r3, [pc, #544]	; (8007acc <_dtoa_r+0x624>)
 80078aa:	f7f8 fea5 	bl	80005f8 <__aeabi_dmul>
 80078ae:	9e02      	ldr	r6, [sp, #8]
 80078b0:	4682      	mov	sl, r0
 80078b2:	468b      	mov	fp, r1
 80078b4:	3501      	adds	r5, #1
 80078b6:	4628      	mov	r0, r5
 80078b8:	f7f8 fe34 	bl	8000524 <__aeabi_i2d>
 80078bc:	4652      	mov	r2, sl
 80078be:	465b      	mov	r3, fp
 80078c0:	f7f8 fe9a 	bl	80005f8 <__aeabi_dmul>
 80078c4:	4b82      	ldr	r3, [pc, #520]	; (8007ad0 <_dtoa_r+0x628>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	f7f8 fce0 	bl	800028c <__adddf3>
 80078cc:	46d0      	mov	r8, sl
 80078ce:	46d9      	mov	r9, fp
 80078d0:	4682      	mov	sl, r0
 80078d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80078d6:	2e00      	cmp	r6, #0
 80078d8:	d158      	bne.n	800798c <_dtoa_r+0x4e4>
 80078da:	4b7e      	ldr	r3, [pc, #504]	; (8007ad4 <_dtoa_r+0x62c>)
 80078dc:	2200      	movs	r2, #0
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f8 fcd1 	bl	8000288 <__aeabi_dsub>
 80078e6:	4652      	mov	r2, sl
 80078e8:	465b      	mov	r3, fp
 80078ea:	4680      	mov	r8, r0
 80078ec:	4689      	mov	r9, r1
 80078ee:	f7f9 f913 	bl	8000b18 <__aeabi_dcmpgt>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f040 8295 	bne.w	8007e22 <_dtoa_r+0x97a>
 80078f8:	4652      	mov	r2, sl
 80078fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	f7f9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	f040 8289 	bne.w	8007e1e <_dtoa_r+0x976>
 800790c:	ec5b ab19 	vmov	sl, fp, d9
 8007910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007912:	2b00      	cmp	r3, #0
 8007914:	f2c0 8148 	blt.w	8007ba8 <_dtoa_r+0x700>
 8007918:	9a00      	ldr	r2, [sp, #0]
 800791a:	2a0e      	cmp	r2, #14
 800791c:	f300 8144 	bgt.w	8007ba8 <_dtoa_r+0x700>
 8007920:	4b67      	ldr	r3, [pc, #412]	; (8007ac0 <_dtoa_r+0x618>)
 8007922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007926:	e9d3 8900 	ldrd	r8, r9, [r3]
 800792a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	f280 80d5 	bge.w	8007adc <_dtoa_r+0x634>
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	f300 80d1 	bgt.w	8007adc <_dtoa_r+0x634>
 800793a:	f040 826f 	bne.w	8007e1c <_dtoa_r+0x974>
 800793e:	4b65      	ldr	r3, [pc, #404]	; (8007ad4 <_dtoa_r+0x62c>)
 8007940:	2200      	movs	r2, #0
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f8 fe57 	bl	80005f8 <__aeabi_dmul>
 800794a:	4652      	mov	r2, sl
 800794c:	465b      	mov	r3, fp
 800794e:	f7f9 f8d9 	bl	8000b04 <__aeabi_dcmpge>
 8007952:	9e03      	ldr	r6, [sp, #12]
 8007954:	4637      	mov	r7, r6
 8007956:	2800      	cmp	r0, #0
 8007958:	f040 8245 	bne.w	8007de6 <_dtoa_r+0x93e>
 800795c:	9d01      	ldr	r5, [sp, #4]
 800795e:	2331      	movs	r3, #49	; 0x31
 8007960:	f805 3b01 	strb.w	r3, [r5], #1
 8007964:	9b00      	ldr	r3, [sp, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	e240      	b.n	8007dee <_dtoa_r+0x946>
 800796c:	07f2      	lsls	r2, r6, #31
 800796e:	d505      	bpl.n	800797c <_dtoa_r+0x4d4>
 8007970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	3501      	adds	r5, #1
 800797a:	2301      	movs	r3, #1
 800797c:	1076      	asrs	r6, r6, #1
 800797e:	3708      	adds	r7, #8
 8007980:	e777      	b.n	8007872 <_dtoa_r+0x3ca>
 8007982:	2502      	movs	r5, #2
 8007984:	e779      	b.n	800787a <_dtoa_r+0x3d2>
 8007986:	9f00      	ldr	r7, [sp, #0]
 8007988:	9e03      	ldr	r6, [sp, #12]
 800798a:	e794      	b.n	80078b6 <_dtoa_r+0x40e>
 800798c:	9901      	ldr	r1, [sp, #4]
 800798e:	4b4c      	ldr	r3, [pc, #304]	; (8007ac0 <_dtoa_r+0x618>)
 8007990:	4431      	add	r1, r6
 8007992:	910d      	str	r1, [sp, #52]	; 0x34
 8007994:	9908      	ldr	r1, [sp, #32]
 8007996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800799a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800799e:	2900      	cmp	r1, #0
 80079a0:	d043      	beq.n	8007a2a <_dtoa_r+0x582>
 80079a2:	494d      	ldr	r1, [pc, #308]	; (8007ad8 <_dtoa_r+0x630>)
 80079a4:	2000      	movs	r0, #0
 80079a6:	f7f8 ff51 	bl	800084c <__aeabi_ddiv>
 80079aa:	4652      	mov	r2, sl
 80079ac:	465b      	mov	r3, fp
 80079ae:	f7f8 fc6b 	bl	8000288 <__aeabi_dsub>
 80079b2:	9d01      	ldr	r5, [sp, #4]
 80079b4:	4682      	mov	sl, r0
 80079b6:	468b      	mov	fp, r1
 80079b8:	4649      	mov	r1, r9
 80079ba:	4640      	mov	r0, r8
 80079bc:	f7f9 f8cc 	bl	8000b58 <__aeabi_d2iz>
 80079c0:	4606      	mov	r6, r0
 80079c2:	f7f8 fdaf 	bl	8000524 <__aeabi_i2d>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4640      	mov	r0, r8
 80079cc:	4649      	mov	r1, r9
 80079ce:	f7f8 fc5b 	bl	8000288 <__aeabi_dsub>
 80079d2:	3630      	adds	r6, #48	; 0x30
 80079d4:	f805 6b01 	strb.w	r6, [r5], #1
 80079d8:	4652      	mov	r2, sl
 80079da:	465b      	mov	r3, fp
 80079dc:	4680      	mov	r8, r0
 80079de:	4689      	mov	r9, r1
 80079e0:	f7f9 f87c 	bl	8000adc <__aeabi_dcmplt>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d163      	bne.n	8007ab0 <_dtoa_r+0x608>
 80079e8:	4642      	mov	r2, r8
 80079ea:	464b      	mov	r3, r9
 80079ec:	4936      	ldr	r1, [pc, #216]	; (8007ac8 <_dtoa_r+0x620>)
 80079ee:	2000      	movs	r0, #0
 80079f0:	f7f8 fc4a 	bl	8000288 <__aeabi_dsub>
 80079f4:	4652      	mov	r2, sl
 80079f6:	465b      	mov	r3, fp
 80079f8:	f7f9 f870 	bl	8000adc <__aeabi_dcmplt>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f040 80b5 	bne.w	8007b6c <_dtoa_r+0x6c4>
 8007a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a04:	429d      	cmp	r5, r3
 8007a06:	d081      	beq.n	800790c <_dtoa_r+0x464>
 8007a08:	4b30      	ldr	r3, [pc, #192]	; (8007acc <_dtoa_r+0x624>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	4659      	mov	r1, fp
 8007a10:	f7f8 fdf2 	bl	80005f8 <__aeabi_dmul>
 8007a14:	4b2d      	ldr	r3, [pc, #180]	; (8007acc <_dtoa_r+0x624>)
 8007a16:	4682      	mov	sl, r0
 8007a18:	468b      	mov	fp, r1
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f7f8 fdea 	bl	80005f8 <__aeabi_dmul>
 8007a24:	4680      	mov	r8, r0
 8007a26:	4689      	mov	r9, r1
 8007a28:	e7c6      	b.n	80079b8 <_dtoa_r+0x510>
 8007a2a:	4650      	mov	r0, sl
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	f7f8 fde3 	bl	80005f8 <__aeabi_dmul>
 8007a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a34:	9d01      	ldr	r5, [sp, #4]
 8007a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a38:	4682      	mov	sl, r0
 8007a3a:	468b      	mov	fp, r1
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	4640      	mov	r0, r8
 8007a40:	f7f9 f88a 	bl	8000b58 <__aeabi_d2iz>
 8007a44:	4606      	mov	r6, r0
 8007a46:	f7f8 fd6d 	bl	8000524 <__aeabi_i2d>
 8007a4a:	3630      	adds	r6, #48	; 0x30
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f8 fc18 	bl	8000288 <__aeabi_dsub>
 8007a58:	f805 6b01 	strb.w	r6, [r5], #1
 8007a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a5e:	429d      	cmp	r5, r3
 8007a60:	4680      	mov	r8, r0
 8007a62:	4689      	mov	r9, r1
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	d124      	bne.n	8007ab4 <_dtoa_r+0x60c>
 8007a6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <_dtoa_r+0x630>)
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	4659      	mov	r1, fp
 8007a70:	f7f8 fc0c 	bl	800028c <__adddf3>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4640      	mov	r0, r8
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	f7f9 f84c 	bl	8000b18 <__aeabi_dcmpgt>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d173      	bne.n	8007b6c <_dtoa_r+0x6c4>
 8007a84:	4652      	mov	r2, sl
 8007a86:	465b      	mov	r3, fp
 8007a88:	4913      	ldr	r1, [pc, #76]	; (8007ad8 <_dtoa_r+0x630>)
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f7f8 fbfc 	bl	8000288 <__aeabi_dsub>
 8007a90:	4602      	mov	r2, r0
 8007a92:	460b      	mov	r3, r1
 8007a94:	4640      	mov	r0, r8
 8007a96:	4649      	mov	r1, r9
 8007a98:	f7f9 f820 	bl	8000adc <__aeabi_dcmplt>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f43f af35 	beq.w	800790c <_dtoa_r+0x464>
 8007aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007aa4:	1e6b      	subs	r3, r5, #1
 8007aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007aac:	2b30      	cmp	r3, #48	; 0x30
 8007aae:	d0f8      	beq.n	8007aa2 <_dtoa_r+0x5fa>
 8007ab0:	9700      	str	r7, [sp, #0]
 8007ab2:	e049      	b.n	8007b48 <_dtoa_r+0x6a0>
 8007ab4:	4b05      	ldr	r3, [pc, #20]	; (8007acc <_dtoa_r+0x624>)
 8007ab6:	f7f8 fd9f 	bl	80005f8 <__aeabi_dmul>
 8007aba:	4680      	mov	r8, r0
 8007abc:	4689      	mov	r9, r1
 8007abe:	e7bd      	b.n	8007a3c <_dtoa_r+0x594>
 8007ac0:	080096e8 	.word	0x080096e8
 8007ac4:	080096c0 	.word	0x080096c0
 8007ac8:	3ff00000 	.word	0x3ff00000
 8007acc:	40240000 	.word	0x40240000
 8007ad0:	401c0000 	.word	0x401c0000
 8007ad4:	40140000 	.word	0x40140000
 8007ad8:	3fe00000 	.word	0x3fe00000
 8007adc:	9d01      	ldr	r5, [sp, #4]
 8007ade:	4656      	mov	r6, sl
 8007ae0:	465f      	mov	r7, fp
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7f8 feaf 	bl	800084c <__aeabi_ddiv>
 8007aee:	f7f9 f833 	bl	8000b58 <__aeabi_d2iz>
 8007af2:	4682      	mov	sl, r0
 8007af4:	f7f8 fd16 	bl	8000524 <__aeabi_i2d>
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	f7f8 fd7c 	bl	80005f8 <__aeabi_dmul>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4630      	mov	r0, r6
 8007b06:	4639      	mov	r1, r7
 8007b08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b0c:	f7f8 fbbc 	bl	8000288 <__aeabi_dsub>
 8007b10:	f805 6b01 	strb.w	r6, [r5], #1
 8007b14:	9e01      	ldr	r6, [sp, #4]
 8007b16:	9f03      	ldr	r7, [sp, #12]
 8007b18:	1bae      	subs	r6, r5, r6
 8007b1a:	42b7      	cmp	r7, r6
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	d135      	bne.n	8007b8e <_dtoa_r+0x6e6>
 8007b22:	f7f8 fbb3 	bl	800028c <__adddf3>
 8007b26:	4642      	mov	r2, r8
 8007b28:	464b      	mov	r3, r9
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	460f      	mov	r7, r1
 8007b2e:	f7f8 fff3 	bl	8000b18 <__aeabi_dcmpgt>
 8007b32:	b9d0      	cbnz	r0, 8007b6a <_dtoa_r+0x6c2>
 8007b34:	4642      	mov	r2, r8
 8007b36:	464b      	mov	r3, r9
 8007b38:	4630      	mov	r0, r6
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	f7f8 ffc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b40:	b110      	cbz	r0, 8007b48 <_dtoa_r+0x6a0>
 8007b42:	f01a 0f01 	tst.w	sl, #1
 8007b46:	d110      	bne.n	8007b6a <_dtoa_r+0x6c2>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	ee18 1a10 	vmov	r1, s16
 8007b4e:	f000 fbdf 	bl	8008310 <_Bfree>
 8007b52:	2300      	movs	r3, #0
 8007b54:	9800      	ldr	r0, [sp, #0]
 8007b56:	702b      	strb	r3, [r5, #0]
 8007b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	6018      	str	r0, [r3, #0]
 8007b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f43f acf1 	beq.w	8007548 <_dtoa_r+0xa0>
 8007b66:	601d      	str	r5, [r3, #0]
 8007b68:	e4ee      	b.n	8007548 <_dtoa_r+0xa0>
 8007b6a:	9f00      	ldr	r7, [sp, #0]
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	461d      	mov	r5, r3
 8007b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b74:	2a39      	cmp	r2, #57	; 0x39
 8007b76:	d106      	bne.n	8007b86 <_dtoa_r+0x6de>
 8007b78:	9a01      	ldr	r2, [sp, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d1f7      	bne.n	8007b6e <_dtoa_r+0x6c6>
 8007b7e:	9901      	ldr	r1, [sp, #4]
 8007b80:	2230      	movs	r2, #48	; 0x30
 8007b82:	3701      	adds	r7, #1
 8007b84:	700a      	strb	r2, [r1, #0]
 8007b86:	781a      	ldrb	r2, [r3, #0]
 8007b88:	3201      	adds	r2, #1
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e790      	b.n	8007ab0 <_dtoa_r+0x608>
 8007b8e:	4ba6      	ldr	r3, [pc, #664]	; (8007e28 <_dtoa_r+0x980>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	f7f8 fd31 	bl	80005f8 <__aeabi_dmul>
 8007b96:	2200      	movs	r2, #0
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	f7f8 ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d09d      	beq.n	8007ae2 <_dtoa_r+0x63a>
 8007ba6:	e7cf      	b.n	8007b48 <_dtoa_r+0x6a0>
 8007ba8:	9a08      	ldr	r2, [sp, #32]
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	f000 80d7 	beq.w	8007d5e <_dtoa_r+0x8b6>
 8007bb0:	9a06      	ldr	r2, [sp, #24]
 8007bb2:	2a01      	cmp	r2, #1
 8007bb4:	f300 80ba 	bgt.w	8007d2c <_dtoa_r+0x884>
 8007bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	f000 80b2 	beq.w	8007d24 <_dtoa_r+0x87c>
 8007bc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bc4:	9e07      	ldr	r6, [sp, #28]
 8007bc6:	9d04      	ldr	r5, [sp, #16]
 8007bc8:	9a04      	ldr	r2, [sp, #16]
 8007bca:	441a      	add	r2, r3
 8007bcc:	9204      	str	r2, [sp, #16]
 8007bce:	9a05      	ldr	r2, [sp, #20]
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	441a      	add	r2, r3
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	9205      	str	r2, [sp, #20]
 8007bd8:	f000 fc52 	bl	8008480 <__i2b>
 8007bdc:	4607      	mov	r7, r0
 8007bde:	2d00      	cmp	r5, #0
 8007be0:	dd0c      	ble.n	8007bfc <_dtoa_r+0x754>
 8007be2:	9b05      	ldr	r3, [sp, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dd09      	ble.n	8007bfc <_dtoa_r+0x754>
 8007be8:	42ab      	cmp	r3, r5
 8007bea:	9a04      	ldr	r2, [sp, #16]
 8007bec:	bfa8      	it	ge
 8007bee:	462b      	movge	r3, r5
 8007bf0:	1ad2      	subs	r2, r2, r3
 8007bf2:	9204      	str	r2, [sp, #16]
 8007bf4:	9a05      	ldr	r2, [sp, #20]
 8007bf6:	1aed      	subs	r5, r5, r3
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	9b07      	ldr	r3, [sp, #28]
 8007bfe:	b31b      	cbz	r3, 8007c48 <_dtoa_r+0x7a0>
 8007c00:	9b08      	ldr	r3, [sp, #32]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80af 	beq.w	8007d66 <_dtoa_r+0x8be>
 8007c08:	2e00      	cmp	r6, #0
 8007c0a:	dd13      	ble.n	8007c34 <_dtoa_r+0x78c>
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	4632      	mov	r2, r6
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 fcf5 	bl	8008600 <__pow5mult>
 8007c16:	ee18 2a10 	vmov	r2, s16
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 fc44 	bl	80084ac <__multiply>
 8007c24:	ee18 1a10 	vmov	r1, s16
 8007c28:	4680      	mov	r8, r0
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 fb70 	bl	8008310 <_Bfree>
 8007c30:	ee08 8a10 	vmov	s16, r8
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	1b9a      	subs	r2, r3, r6
 8007c38:	d006      	beq.n	8007c48 <_dtoa_r+0x7a0>
 8007c3a:	ee18 1a10 	vmov	r1, s16
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 fcde 	bl	8008600 <__pow5mult>
 8007c44:	ee08 0a10 	vmov	s16, r0
 8007c48:	2101      	movs	r1, #1
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f000 fc18 	bl	8008480 <__i2b>
 8007c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	4606      	mov	r6, r0
 8007c56:	f340 8088 	ble.w	8007d6a <_dtoa_r+0x8c2>
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4601      	mov	r1, r0
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 fcce 	bl	8008600 <__pow5mult>
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	4606      	mov	r6, r0
 8007c6a:	f340 8081 	ble.w	8007d70 <_dtoa_r+0x8c8>
 8007c6e:	f04f 0800 	mov.w	r8, #0
 8007c72:	6933      	ldr	r3, [r6, #16]
 8007c74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c78:	6918      	ldr	r0, [r3, #16]
 8007c7a:	f000 fbb1 	bl	80083e0 <__hi0bits>
 8007c7e:	f1c0 0020 	rsb	r0, r0, #32
 8007c82:	9b05      	ldr	r3, [sp, #20]
 8007c84:	4418      	add	r0, r3
 8007c86:	f010 001f 	ands.w	r0, r0, #31
 8007c8a:	f000 8092 	beq.w	8007db2 <_dtoa_r+0x90a>
 8007c8e:	f1c0 0320 	rsb	r3, r0, #32
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	f340 808a 	ble.w	8007dac <_dtoa_r+0x904>
 8007c98:	f1c0 001c 	rsb	r0, r0, #28
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	4403      	add	r3, r0
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	9b05      	ldr	r3, [sp, #20]
 8007ca4:	4403      	add	r3, r0
 8007ca6:	4405      	add	r5, r0
 8007ca8:	9305      	str	r3, [sp, #20]
 8007caa:	9b04      	ldr	r3, [sp, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	dd07      	ble.n	8007cc0 <_dtoa_r+0x818>
 8007cb0:	ee18 1a10 	vmov	r1, s16
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 fcfc 	bl	80086b4 <__lshift>
 8007cbc:	ee08 0a10 	vmov	s16, r0
 8007cc0:	9b05      	ldr	r3, [sp, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd05      	ble.n	8007cd2 <_dtoa_r+0x82a>
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 fcf2 	bl	80086b4 <__lshift>
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d06e      	beq.n	8007db6 <_dtoa_r+0x90e>
 8007cd8:	ee18 0a10 	vmov	r0, s16
 8007cdc:	4631      	mov	r1, r6
 8007cde:	f000 fd59 	bl	8008794 <__mcmp>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	da67      	bge.n	8007db6 <_dtoa_r+0x90e>
 8007ce6:	9b00      	ldr	r3, [sp, #0]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	ee18 1a10 	vmov	r1, s16
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	220a      	movs	r2, #10
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fb2d 	bl	8008354 <__multadd>
 8007cfa:	9b08      	ldr	r3, [sp, #32]
 8007cfc:	ee08 0a10 	vmov	s16, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 81b1 	beq.w	8008068 <_dtoa_r+0xbc0>
 8007d06:	2300      	movs	r3, #0
 8007d08:	4639      	mov	r1, r7
 8007d0a:	220a      	movs	r2, #10
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f000 fb21 	bl	8008354 <__multadd>
 8007d12:	9b02      	ldr	r3, [sp, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	4607      	mov	r7, r0
 8007d18:	f300 808e 	bgt.w	8007e38 <_dtoa_r+0x990>
 8007d1c:	9b06      	ldr	r3, [sp, #24]
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	dc51      	bgt.n	8007dc6 <_dtoa_r+0x91e>
 8007d22:	e089      	b.n	8007e38 <_dtoa_r+0x990>
 8007d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d2a:	e74b      	b.n	8007bc4 <_dtoa_r+0x71c>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1e5e      	subs	r6, r3, #1
 8007d30:	9b07      	ldr	r3, [sp, #28]
 8007d32:	42b3      	cmp	r3, r6
 8007d34:	bfbf      	itttt	lt
 8007d36:	9b07      	ldrlt	r3, [sp, #28]
 8007d38:	9607      	strlt	r6, [sp, #28]
 8007d3a:	1af2      	sublt	r2, r6, r3
 8007d3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d3e:	bfb6      	itet	lt
 8007d40:	189b      	addlt	r3, r3, r2
 8007d42:	1b9e      	subge	r6, r3, r6
 8007d44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d46:	9b03      	ldr	r3, [sp, #12]
 8007d48:	bfb8      	it	lt
 8007d4a:	2600      	movlt	r6, #0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	bfb7      	itett	lt
 8007d50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d58:	1a9d      	sublt	r5, r3, r2
 8007d5a:	2300      	movlt	r3, #0
 8007d5c:	e734      	b.n	8007bc8 <_dtoa_r+0x720>
 8007d5e:	9e07      	ldr	r6, [sp, #28]
 8007d60:	9d04      	ldr	r5, [sp, #16]
 8007d62:	9f08      	ldr	r7, [sp, #32]
 8007d64:	e73b      	b.n	8007bde <_dtoa_r+0x736>
 8007d66:	9a07      	ldr	r2, [sp, #28]
 8007d68:	e767      	b.n	8007c3a <_dtoa_r+0x792>
 8007d6a:	9b06      	ldr	r3, [sp, #24]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	dc18      	bgt.n	8007da2 <_dtoa_r+0x8fa>
 8007d70:	f1ba 0f00 	cmp.w	sl, #0
 8007d74:	d115      	bne.n	8007da2 <_dtoa_r+0x8fa>
 8007d76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d7a:	b993      	cbnz	r3, 8007da2 <_dtoa_r+0x8fa>
 8007d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d80:	0d1b      	lsrs	r3, r3, #20
 8007d82:	051b      	lsls	r3, r3, #20
 8007d84:	b183      	cbz	r3, 8007da8 <_dtoa_r+0x900>
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	9305      	str	r3, [sp, #20]
 8007d92:	f04f 0801 	mov.w	r8, #1
 8007d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f47f af6a 	bne.w	8007c72 <_dtoa_r+0x7ca>
 8007d9e:	2001      	movs	r0, #1
 8007da0:	e76f      	b.n	8007c82 <_dtoa_r+0x7da>
 8007da2:	f04f 0800 	mov.w	r8, #0
 8007da6:	e7f6      	b.n	8007d96 <_dtoa_r+0x8ee>
 8007da8:	4698      	mov	r8, r3
 8007daa:	e7f4      	b.n	8007d96 <_dtoa_r+0x8ee>
 8007dac:	f43f af7d 	beq.w	8007caa <_dtoa_r+0x802>
 8007db0:	4618      	mov	r0, r3
 8007db2:	301c      	adds	r0, #28
 8007db4:	e772      	b.n	8007c9c <_dtoa_r+0x7f4>
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	dc37      	bgt.n	8007e2c <_dtoa_r+0x984>
 8007dbc:	9b06      	ldr	r3, [sp, #24]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	dd34      	ble.n	8007e2c <_dtoa_r+0x984>
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	9302      	str	r3, [sp, #8]
 8007dc6:	9b02      	ldr	r3, [sp, #8]
 8007dc8:	b96b      	cbnz	r3, 8007de6 <_dtoa_r+0x93e>
 8007dca:	4631      	mov	r1, r6
 8007dcc:	2205      	movs	r2, #5
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 fac0 	bl	8008354 <__multadd>
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	ee18 0a10 	vmov	r0, s16
 8007ddc:	f000 fcda 	bl	8008794 <__mcmp>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f73f adbb 	bgt.w	800795c <_dtoa_r+0x4b4>
 8007de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de8:	9d01      	ldr	r5, [sp, #4]
 8007dea:	43db      	mvns	r3, r3
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	4631      	mov	r1, r6
 8007df4:	4620      	mov	r0, r4
 8007df6:	f000 fa8b 	bl	8008310 <_Bfree>
 8007dfa:	2f00      	cmp	r7, #0
 8007dfc:	f43f aea4 	beq.w	8007b48 <_dtoa_r+0x6a0>
 8007e00:	f1b8 0f00 	cmp.w	r8, #0
 8007e04:	d005      	beq.n	8007e12 <_dtoa_r+0x96a>
 8007e06:	45b8      	cmp	r8, r7
 8007e08:	d003      	beq.n	8007e12 <_dtoa_r+0x96a>
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f000 fa7f 	bl	8008310 <_Bfree>
 8007e12:	4639      	mov	r1, r7
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 fa7b 	bl	8008310 <_Bfree>
 8007e1a:	e695      	b.n	8007b48 <_dtoa_r+0x6a0>
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	4637      	mov	r7, r6
 8007e20:	e7e1      	b.n	8007de6 <_dtoa_r+0x93e>
 8007e22:	9700      	str	r7, [sp, #0]
 8007e24:	4637      	mov	r7, r6
 8007e26:	e599      	b.n	800795c <_dtoa_r+0x4b4>
 8007e28:	40240000 	.word	0x40240000
 8007e2c:	9b08      	ldr	r3, [sp, #32]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80ca 	beq.w	8007fc8 <_dtoa_r+0xb20>
 8007e34:	9b03      	ldr	r3, [sp, #12]
 8007e36:	9302      	str	r3, [sp, #8]
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	dd05      	ble.n	8007e48 <_dtoa_r+0x9a0>
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	462a      	mov	r2, r5
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fc37 	bl	80086b4 <__lshift>
 8007e46:	4607      	mov	r7, r0
 8007e48:	f1b8 0f00 	cmp.w	r8, #0
 8007e4c:	d05b      	beq.n	8007f06 <_dtoa_r+0xa5e>
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 fa1d 	bl	8008290 <_Balloc>
 8007e56:	4605      	mov	r5, r0
 8007e58:	b928      	cbnz	r0, 8007e66 <_dtoa_r+0x9be>
 8007e5a:	4b87      	ldr	r3, [pc, #540]	; (8008078 <_dtoa_r+0xbd0>)
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e62:	f7ff bb3b 	b.w	80074dc <_dtoa_r+0x34>
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	3202      	adds	r2, #2
 8007e6a:	0092      	lsls	r2, r2, #2
 8007e6c:	f107 010c 	add.w	r1, r7, #12
 8007e70:	300c      	adds	r0, #12
 8007e72:	f7fe fdf3 	bl	8006a5c <memcpy>
 8007e76:	2201      	movs	r2, #1
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fc1a 	bl	80086b4 <__lshift>
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	f103 0901 	add.w	r9, r3, #1
 8007e86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	9305      	str	r3, [sp, #20]
 8007e8e:	f00a 0301 	and.w	r3, sl, #1
 8007e92:	46b8      	mov	r8, r7
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	4607      	mov	r7, r0
 8007e98:	4631      	mov	r1, r6
 8007e9a:	ee18 0a10 	vmov	r0, s16
 8007e9e:	f7ff fa75 	bl	800738c <quorem>
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	9002      	str	r0, [sp, #8]
 8007ea6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007eaa:	ee18 0a10 	vmov	r0, s16
 8007eae:	f000 fc71 	bl	8008794 <__mcmp>
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	9003      	str	r0, [sp, #12]
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 fc87 	bl	80087cc <__mdiff>
 8007ebe:	68c2      	ldr	r2, [r0, #12]
 8007ec0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	bb02      	cbnz	r2, 8007f0a <_dtoa_r+0xa62>
 8007ec8:	4601      	mov	r1, r0
 8007eca:	ee18 0a10 	vmov	r0, s16
 8007ece:	f000 fc61 	bl	8008794 <__mcmp>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	9207      	str	r2, [sp, #28]
 8007eda:	f000 fa19 	bl	8008310 <_Bfree>
 8007ede:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007ee2:	ea43 0102 	orr.w	r1, r3, r2
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	464d      	mov	r5, r9
 8007eec:	d10f      	bne.n	8007f0e <_dtoa_r+0xa66>
 8007eee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ef2:	d02a      	beq.n	8007f4a <_dtoa_r+0xaa2>
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	dd02      	ble.n	8007f00 <_dtoa_r+0xa58>
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f00:	f88b a000 	strb.w	sl, [fp]
 8007f04:	e775      	b.n	8007df2 <_dtoa_r+0x94a>
 8007f06:	4638      	mov	r0, r7
 8007f08:	e7ba      	b.n	8007e80 <_dtoa_r+0x9d8>
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	e7e2      	b.n	8007ed4 <_dtoa_r+0xa2c>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	db04      	blt.n	8007f1e <_dtoa_r+0xa76>
 8007f14:	9906      	ldr	r1, [sp, #24]
 8007f16:	430b      	orrs	r3, r1
 8007f18:	9904      	ldr	r1, [sp, #16]
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	d122      	bne.n	8007f64 <_dtoa_r+0xabc>
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	ddee      	ble.n	8007f00 <_dtoa_r+0xa58>
 8007f22:	ee18 1a10 	vmov	r1, s16
 8007f26:	2201      	movs	r2, #1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fbc3 	bl	80086b4 <__lshift>
 8007f2e:	4631      	mov	r1, r6
 8007f30:	ee08 0a10 	vmov	s16, r0
 8007f34:	f000 fc2e 	bl	8008794 <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	dc03      	bgt.n	8007f44 <_dtoa_r+0xa9c>
 8007f3c:	d1e0      	bne.n	8007f00 <_dtoa_r+0xa58>
 8007f3e:	f01a 0f01 	tst.w	sl, #1
 8007f42:	d0dd      	beq.n	8007f00 <_dtoa_r+0xa58>
 8007f44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f48:	d1d7      	bne.n	8007efa <_dtoa_r+0xa52>
 8007f4a:	2339      	movs	r3, #57	; 0x39
 8007f4c:	f88b 3000 	strb.w	r3, [fp]
 8007f50:	462b      	mov	r3, r5
 8007f52:	461d      	mov	r5, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f5a:	2a39      	cmp	r2, #57	; 0x39
 8007f5c:	d071      	beq.n	8008042 <_dtoa_r+0xb9a>
 8007f5e:	3201      	adds	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	e746      	b.n	8007df2 <_dtoa_r+0x94a>
 8007f64:	2a00      	cmp	r2, #0
 8007f66:	dd07      	ble.n	8007f78 <_dtoa_r+0xad0>
 8007f68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f6c:	d0ed      	beq.n	8007f4a <_dtoa_r+0xaa2>
 8007f6e:	f10a 0301 	add.w	r3, sl, #1
 8007f72:	f88b 3000 	strb.w	r3, [fp]
 8007f76:	e73c      	b.n	8007df2 <_dtoa_r+0x94a>
 8007f78:	9b05      	ldr	r3, [sp, #20]
 8007f7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f7e:	4599      	cmp	r9, r3
 8007f80:	d047      	beq.n	8008012 <_dtoa_r+0xb6a>
 8007f82:	ee18 1a10 	vmov	r1, s16
 8007f86:	2300      	movs	r3, #0
 8007f88:	220a      	movs	r2, #10
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 f9e2 	bl	8008354 <__multadd>
 8007f90:	45b8      	cmp	r8, r7
 8007f92:	ee08 0a10 	vmov	s16, r0
 8007f96:	f04f 0300 	mov.w	r3, #0
 8007f9a:	f04f 020a 	mov.w	r2, #10
 8007f9e:	4641      	mov	r1, r8
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	d106      	bne.n	8007fb2 <_dtoa_r+0xb0a>
 8007fa4:	f000 f9d6 	bl	8008354 <__multadd>
 8007fa8:	4680      	mov	r8, r0
 8007faa:	4607      	mov	r7, r0
 8007fac:	f109 0901 	add.w	r9, r9, #1
 8007fb0:	e772      	b.n	8007e98 <_dtoa_r+0x9f0>
 8007fb2:	f000 f9cf 	bl	8008354 <__multadd>
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	4680      	mov	r8, r0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f9c8 	bl	8008354 <__multadd>
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	e7f1      	b.n	8007fac <_dtoa_r+0xb04>
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	9302      	str	r3, [sp, #8]
 8007fcc:	9d01      	ldr	r5, [sp, #4]
 8007fce:	ee18 0a10 	vmov	r0, s16
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	f7ff f9da 	bl	800738c <quorem>
 8007fd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fdc:	9b01      	ldr	r3, [sp, #4]
 8007fde:	f805 ab01 	strb.w	sl, [r5], #1
 8007fe2:	1aea      	subs	r2, r5, r3
 8007fe4:	9b02      	ldr	r3, [sp, #8]
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	dd09      	ble.n	8007ffe <_dtoa_r+0xb56>
 8007fea:	ee18 1a10 	vmov	r1, s16
 8007fee:	2300      	movs	r3, #0
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 f9ae 	bl	8008354 <__multadd>
 8007ff8:	ee08 0a10 	vmov	s16, r0
 8007ffc:	e7e7      	b.n	8007fce <_dtoa_r+0xb26>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	bfc8      	it	gt
 8008004:	461d      	movgt	r5, r3
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	bfd8      	it	le
 800800a:	2501      	movle	r5, #1
 800800c:	441d      	add	r5, r3
 800800e:	f04f 0800 	mov.w	r8, #0
 8008012:	ee18 1a10 	vmov	r1, s16
 8008016:	2201      	movs	r2, #1
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fb4b 	bl	80086b4 <__lshift>
 800801e:	4631      	mov	r1, r6
 8008020:	ee08 0a10 	vmov	s16, r0
 8008024:	f000 fbb6 	bl	8008794 <__mcmp>
 8008028:	2800      	cmp	r0, #0
 800802a:	dc91      	bgt.n	8007f50 <_dtoa_r+0xaa8>
 800802c:	d102      	bne.n	8008034 <_dtoa_r+0xb8c>
 800802e:	f01a 0f01 	tst.w	sl, #1
 8008032:	d18d      	bne.n	8007f50 <_dtoa_r+0xaa8>
 8008034:	462b      	mov	r3, r5
 8008036:	461d      	mov	r5, r3
 8008038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800803c:	2a30      	cmp	r2, #48	; 0x30
 800803e:	d0fa      	beq.n	8008036 <_dtoa_r+0xb8e>
 8008040:	e6d7      	b.n	8007df2 <_dtoa_r+0x94a>
 8008042:	9a01      	ldr	r2, [sp, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d184      	bne.n	8007f52 <_dtoa_r+0xaaa>
 8008048:	9b00      	ldr	r3, [sp, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	2331      	movs	r3, #49	; 0x31
 8008050:	7013      	strb	r3, [r2, #0]
 8008052:	e6ce      	b.n	8007df2 <_dtoa_r+0x94a>
 8008054:	4b09      	ldr	r3, [pc, #36]	; (800807c <_dtoa_r+0xbd4>)
 8008056:	f7ff ba95 	b.w	8007584 <_dtoa_r+0xdc>
 800805a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800805c:	2b00      	cmp	r3, #0
 800805e:	f47f aa6e 	bne.w	800753e <_dtoa_r+0x96>
 8008062:	4b07      	ldr	r3, [pc, #28]	; (8008080 <_dtoa_r+0xbd8>)
 8008064:	f7ff ba8e 	b.w	8007584 <_dtoa_r+0xdc>
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	dcae      	bgt.n	8007fcc <_dtoa_r+0xb24>
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	2b02      	cmp	r3, #2
 8008072:	f73f aea8 	bgt.w	8007dc6 <_dtoa_r+0x91e>
 8008076:	e7a9      	b.n	8007fcc <_dtoa_r+0xb24>
 8008078:	080095ef 	.word	0x080095ef
 800807c:	0800954c 	.word	0x0800954c
 8008080:	08009570 	.word	0x08009570

08008084 <std>:
 8008084:	2300      	movs	r3, #0
 8008086:	b510      	push	{r4, lr}
 8008088:	4604      	mov	r4, r0
 800808a:	e9c0 3300 	strd	r3, r3, [r0]
 800808e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008092:	6083      	str	r3, [r0, #8]
 8008094:	8181      	strh	r1, [r0, #12]
 8008096:	6643      	str	r3, [r0, #100]	; 0x64
 8008098:	81c2      	strh	r2, [r0, #14]
 800809a:	6183      	str	r3, [r0, #24]
 800809c:	4619      	mov	r1, r3
 800809e:	2208      	movs	r2, #8
 80080a0:	305c      	adds	r0, #92	; 0x5c
 80080a2:	f7fe fce9 	bl	8006a78 <memset>
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <std+0x38>)
 80080a8:	6263      	str	r3, [r4, #36]	; 0x24
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <std+0x3c>)
 80080ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80080ae:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <std+0x40>)
 80080b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080b2:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <std+0x44>)
 80080b4:	6224      	str	r4, [r4, #32]
 80080b6:	6323      	str	r3, [r4, #48]	; 0x30
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	bf00      	nop
 80080bc:	08008e59 	.word	0x08008e59
 80080c0:	08008e7b 	.word	0x08008e7b
 80080c4:	08008eb3 	.word	0x08008eb3
 80080c8:	08008ed7 	.word	0x08008ed7

080080cc <_cleanup_r>:
 80080cc:	4901      	ldr	r1, [pc, #4]	; (80080d4 <_cleanup_r+0x8>)
 80080ce:	f000 b8af 	b.w	8008230 <_fwalk_reent>
 80080d2:	bf00      	nop
 80080d4:	080091ed 	.word	0x080091ed

080080d8 <__sfmoreglue>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	2268      	movs	r2, #104	; 0x68
 80080dc:	1e4d      	subs	r5, r1, #1
 80080de:	4355      	muls	r5, r2
 80080e0:	460e      	mov	r6, r1
 80080e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080e6:	f000 fcd9 	bl	8008a9c <_malloc_r>
 80080ea:	4604      	mov	r4, r0
 80080ec:	b140      	cbz	r0, 8008100 <__sfmoreglue+0x28>
 80080ee:	2100      	movs	r1, #0
 80080f0:	e9c0 1600 	strd	r1, r6, [r0]
 80080f4:	300c      	adds	r0, #12
 80080f6:	60a0      	str	r0, [r4, #8]
 80080f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080fc:	f7fe fcbc 	bl	8006a78 <memset>
 8008100:	4620      	mov	r0, r4
 8008102:	bd70      	pop	{r4, r5, r6, pc}

08008104 <__sfp_lock_acquire>:
 8008104:	4801      	ldr	r0, [pc, #4]	; (800810c <__sfp_lock_acquire+0x8>)
 8008106:	f000 b8b8 	b.w	800827a <__retarget_lock_acquire_recursive>
 800810a:	bf00      	nop
 800810c:	2000052d 	.word	0x2000052d

08008110 <__sfp_lock_release>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__sfp_lock_release+0x8>)
 8008112:	f000 b8b3 	b.w	800827c <__retarget_lock_release_recursive>
 8008116:	bf00      	nop
 8008118:	2000052d 	.word	0x2000052d

0800811c <__sinit_lock_acquire>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__sinit_lock_acquire+0x8>)
 800811e:	f000 b8ac 	b.w	800827a <__retarget_lock_acquire_recursive>
 8008122:	bf00      	nop
 8008124:	2000052e 	.word	0x2000052e

08008128 <__sinit_lock_release>:
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <__sinit_lock_release+0x8>)
 800812a:	f000 b8a7 	b.w	800827c <__retarget_lock_release_recursive>
 800812e:	bf00      	nop
 8008130:	2000052e 	.word	0x2000052e

08008134 <__sinit>:
 8008134:	b510      	push	{r4, lr}
 8008136:	4604      	mov	r4, r0
 8008138:	f7ff fff0 	bl	800811c <__sinit_lock_acquire>
 800813c:	69a3      	ldr	r3, [r4, #24]
 800813e:	b11b      	cbz	r3, 8008148 <__sinit+0x14>
 8008140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008144:	f7ff bff0 	b.w	8008128 <__sinit_lock_release>
 8008148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800814c:	6523      	str	r3, [r4, #80]	; 0x50
 800814e:	4b13      	ldr	r3, [pc, #76]	; (800819c <__sinit+0x68>)
 8008150:	4a13      	ldr	r2, [pc, #76]	; (80081a0 <__sinit+0x6c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	62a2      	str	r2, [r4, #40]	; 0x28
 8008156:	42a3      	cmp	r3, r4
 8008158:	bf04      	itt	eq
 800815a:	2301      	moveq	r3, #1
 800815c:	61a3      	streq	r3, [r4, #24]
 800815e:	4620      	mov	r0, r4
 8008160:	f000 f820 	bl	80081a4 <__sfp>
 8008164:	6060      	str	r0, [r4, #4]
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f81c 	bl	80081a4 <__sfp>
 800816c:	60a0      	str	r0, [r4, #8]
 800816e:	4620      	mov	r0, r4
 8008170:	f000 f818 	bl	80081a4 <__sfp>
 8008174:	2200      	movs	r2, #0
 8008176:	60e0      	str	r0, [r4, #12]
 8008178:	2104      	movs	r1, #4
 800817a:	6860      	ldr	r0, [r4, #4]
 800817c:	f7ff ff82 	bl	8008084 <std>
 8008180:	68a0      	ldr	r0, [r4, #8]
 8008182:	2201      	movs	r2, #1
 8008184:	2109      	movs	r1, #9
 8008186:	f7ff ff7d 	bl	8008084 <std>
 800818a:	68e0      	ldr	r0, [r4, #12]
 800818c:	2202      	movs	r2, #2
 800818e:	2112      	movs	r1, #18
 8008190:	f7ff ff78 	bl	8008084 <std>
 8008194:	2301      	movs	r3, #1
 8008196:	61a3      	str	r3, [r4, #24]
 8008198:	e7d2      	b.n	8008140 <__sinit+0xc>
 800819a:	bf00      	nop
 800819c:	08009538 	.word	0x08009538
 80081a0:	080080cd 	.word	0x080080cd

080081a4 <__sfp>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	4607      	mov	r7, r0
 80081a8:	f7ff ffac 	bl	8008104 <__sfp_lock_acquire>
 80081ac:	4b1e      	ldr	r3, [pc, #120]	; (8008228 <__sfp+0x84>)
 80081ae:	681e      	ldr	r6, [r3, #0]
 80081b0:	69b3      	ldr	r3, [r6, #24]
 80081b2:	b913      	cbnz	r3, 80081ba <__sfp+0x16>
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff ffbd 	bl	8008134 <__sinit>
 80081ba:	3648      	adds	r6, #72	; 0x48
 80081bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	d503      	bpl.n	80081cc <__sfp+0x28>
 80081c4:	6833      	ldr	r3, [r6, #0]
 80081c6:	b30b      	cbz	r3, 800820c <__sfp+0x68>
 80081c8:	6836      	ldr	r6, [r6, #0]
 80081ca:	e7f7      	b.n	80081bc <__sfp+0x18>
 80081cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80081d0:	b9d5      	cbnz	r5, 8008208 <__sfp+0x64>
 80081d2:	4b16      	ldr	r3, [pc, #88]	; (800822c <__sfp+0x88>)
 80081d4:	60e3      	str	r3, [r4, #12]
 80081d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80081da:	6665      	str	r5, [r4, #100]	; 0x64
 80081dc:	f000 f84c 	bl	8008278 <__retarget_lock_init_recursive>
 80081e0:	f7ff ff96 	bl	8008110 <__sfp_lock_release>
 80081e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081ec:	6025      	str	r5, [r4, #0]
 80081ee:	61a5      	str	r5, [r4, #24]
 80081f0:	2208      	movs	r2, #8
 80081f2:	4629      	mov	r1, r5
 80081f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081f8:	f7fe fc3e 	bl	8006a78 <memset>
 80081fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008204:	4620      	mov	r0, r4
 8008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008208:	3468      	adds	r4, #104	; 0x68
 800820a:	e7d9      	b.n	80081c0 <__sfp+0x1c>
 800820c:	2104      	movs	r1, #4
 800820e:	4638      	mov	r0, r7
 8008210:	f7ff ff62 	bl	80080d8 <__sfmoreglue>
 8008214:	4604      	mov	r4, r0
 8008216:	6030      	str	r0, [r6, #0]
 8008218:	2800      	cmp	r0, #0
 800821a:	d1d5      	bne.n	80081c8 <__sfp+0x24>
 800821c:	f7ff ff78 	bl	8008110 <__sfp_lock_release>
 8008220:	230c      	movs	r3, #12
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	e7ee      	b.n	8008204 <__sfp+0x60>
 8008226:	bf00      	nop
 8008228:	08009538 	.word	0x08009538
 800822c:	ffff0001 	.word	0xffff0001

08008230 <_fwalk_reent>:
 8008230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	4606      	mov	r6, r0
 8008236:	4688      	mov	r8, r1
 8008238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800823c:	2700      	movs	r7, #0
 800823e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008242:	f1b9 0901 	subs.w	r9, r9, #1
 8008246:	d505      	bpl.n	8008254 <_fwalk_reent+0x24>
 8008248:	6824      	ldr	r4, [r4, #0]
 800824a:	2c00      	cmp	r4, #0
 800824c:	d1f7      	bne.n	800823e <_fwalk_reent+0xe>
 800824e:	4638      	mov	r0, r7
 8008250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008254:	89ab      	ldrh	r3, [r5, #12]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d907      	bls.n	800826a <_fwalk_reent+0x3a>
 800825a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800825e:	3301      	adds	r3, #1
 8008260:	d003      	beq.n	800826a <_fwalk_reent+0x3a>
 8008262:	4629      	mov	r1, r5
 8008264:	4630      	mov	r0, r6
 8008266:	47c0      	blx	r8
 8008268:	4307      	orrs	r7, r0
 800826a:	3568      	adds	r5, #104	; 0x68
 800826c:	e7e9      	b.n	8008242 <_fwalk_reent+0x12>
	...

08008270 <_localeconv_r>:
 8008270:	4800      	ldr	r0, [pc, #0]	; (8008274 <_localeconv_r+0x4>)
 8008272:	4770      	bx	lr
 8008274:	200001cc 	.word	0x200001cc

08008278 <__retarget_lock_init_recursive>:
 8008278:	4770      	bx	lr

0800827a <__retarget_lock_acquire_recursive>:
 800827a:	4770      	bx	lr

0800827c <__retarget_lock_release_recursive>:
 800827c:	4770      	bx	lr
	...

08008280 <malloc>:
 8008280:	4b02      	ldr	r3, [pc, #8]	; (800828c <malloc+0xc>)
 8008282:	4601      	mov	r1, r0
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	f000 bc09 	b.w	8008a9c <_malloc_r>
 800828a:	bf00      	nop
 800828c:	20000078 	.word	0x20000078

08008290 <_Balloc>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008294:	4604      	mov	r4, r0
 8008296:	460d      	mov	r5, r1
 8008298:	b976      	cbnz	r6, 80082b8 <_Balloc+0x28>
 800829a:	2010      	movs	r0, #16
 800829c:	f7ff fff0 	bl	8008280 <malloc>
 80082a0:	4602      	mov	r2, r0
 80082a2:	6260      	str	r0, [r4, #36]	; 0x24
 80082a4:	b920      	cbnz	r0, 80082b0 <_Balloc+0x20>
 80082a6:	4b18      	ldr	r3, [pc, #96]	; (8008308 <_Balloc+0x78>)
 80082a8:	4818      	ldr	r0, [pc, #96]	; (800830c <_Balloc+0x7c>)
 80082aa:	2166      	movs	r1, #102	; 0x66
 80082ac:	f000 feea 	bl	8009084 <__assert_func>
 80082b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082b4:	6006      	str	r6, [r0, #0]
 80082b6:	60c6      	str	r6, [r0, #12]
 80082b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082ba:	68f3      	ldr	r3, [r6, #12]
 80082bc:	b183      	cbz	r3, 80082e0 <_Balloc+0x50>
 80082be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082c6:	b9b8      	cbnz	r0, 80082f8 <_Balloc+0x68>
 80082c8:	2101      	movs	r1, #1
 80082ca:	fa01 f605 	lsl.w	r6, r1, r5
 80082ce:	1d72      	adds	r2, r6, #5
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 fb60 	bl	8008998 <_calloc_r>
 80082d8:	b160      	cbz	r0, 80082f4 <_Balloc+0x64>
 80082da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082de:	e00e      	b.n	80082fe <_Balloc+0x6e>
 80082e0:	2221      	movs	r2, #33	; 0x21
 80082e2:	2104      	movs	r1, #4
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fb57 	bl	8008998 <_calloc_r>
 80082ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ec:	60f0      	str	r0, [r6, #12]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e4      	bne.n	80082be <_Balloc+0x2e>
 80082f4:	2000      	movs	r0, #0
 80082f6:	bd70      	pop	{r4, r5, r6, pc}
 80082f8:	6802      	ldr	r2, [r0, #0]
 80082fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082fe:	2300      	movs	r3, #0
 8008300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008304:	e7f7      	b.n	80082f6 <_Balloc+0x66>
 8008306:	bf00      	nop
 8008308:	0800957d 	.word	0x0800957d
 800830c:	08009660 	.word	0x08009660

08008310 <_Bfree>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008314:	4605      	mov	r5, r0
 8008316:	460c      	mov	r4, r1
 8008318:	b976      	cbnz	r6, 8008338 <_Bfree+0x28>
 800831a:	2010      	movs	r0, #16
 800831c:	f7ff ffb0 	bl	8008280 <malloc>
 8008320:	4602      	mov	r2, r0
 8008322:	6268      	str	r0, [r5, #36]	; 0x24
 8008324:	b920      	cbnz	r0, 8008330 <_Bfree+0x20>
 8008326:	4b09      	ldr	r3, [pc, #36]	; (800834c <_Bfree+0x3c>)
 8008328:	4809      	ldr	r0, [pc, #36]	; (8008350 <_Bfree+0x40>)
 800832a:	218a      	movs	r1, #138	; 0x8a
 800832c:	f000 feaa 	bl	8009084 <__assert_func>
 8008330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008334:	6006      	str	r6, [r0, #0]
 8008336:	60c6      	str	r6, [r0, #12]
 8008338:	b13c      	cbz	r4, 800834a <_Bfree+0x3a>
 800833a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800833c:	6862      	ldr	r2, [r4, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008344:	6021      	str	r1, [r4, #0]
 8008346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	0800957d 	.word	0x0800957d
 8008350:	08009660 	.word	0x08009660

08008354 <__multadd>:
 8008354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008358:	690d      	ldr	r5, [r1, #16]
 800835a:	4607      	mov	r7, r0
 800835c:	460c      	mov	r4, r1
 800835e:	461e      	mov	r6, r3
 8008360:	f101 0c14 	add.w	ip, r1, #20
 8008364:	2000      	movs	r0, #0
 8008366:	f8dc 3000 	ldr.w	r3, [ip]
 800836a:	b299      	uxth	r1, r3
 800836c:	fb02 6101 	mla	r1, r2, r1, r6
 8008370:	0c1e      	lsrs	r6, r3, #16
 8008372:	0c0b      	lsrs	r3, r1, #16
 8008374:	fb02 3306 	mla	r3, r2, r6, r3
 8008378:	b289      	uxth	r1, r1
 800837a:	3001      	adds	r0, #1
 800837c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008380:	4285      	cmp	r5, r0
 8008382:	f84c 1b04 	str.w	r1, [ip], #4
 8008386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800838a:	dcec      	bgt.n	8008366 <__multadd+0x12>
 800838c:	b30e      	cbz	r6, 80083d2 <__multadd+0x7e>
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	42ab      	cmp	r3, r5
 8008392:	dc19      	bgt.n	80083c8 <__multadd+0x74>
 8008394:	6861      	ldr	r1, [r4, #4]
 8008396:	4638      	mov	r0, r7
 8008398:	3101      	adds	r1, #1
 800839a:	f7ff ff79 	bl	8008290 <_Balloc>
 800839e:	4680      	mov	r8, r0
 80083a0:	b928      	cbnz	r0, 80083ae <__multadd+0x5a>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <__multadd+0x84>)
 80083a6:	480d      	ldr	r0, [pc, #52]	; (80083dc <__multadd+0x88>)
 80083a8:	21b5      	movs	r1, #181	; 0xb5
 80083aa:	f000 fe6b 	bl	8009084 <__assert_func>
 80083ae:	6922      	ldr	r2, [r4, #16]
 80083b0:	3202      	adds	r2, #2
 80083b2:	f104 010c 	add.w	r1, r4, #12
 80083b6:	0092      	lsls	r2, r2, #2
 80083b8:	300c      	adds	r0, #12
 80083ba:	f7fe fb4f 	bl	8006a5c <memcpy>
 80083be:	4621      	mov	r1, r4
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ffa5 	bl	8008310 <_Bfree>
 80083c6:	4644      	mov	r4, r8
 80083c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083cc:	3501      	adds	r5, #1
 80083ce:	615e      	str	r6, [r3, #20]
 80083d0:	6125      	str	r5, [r4, #16]
 80083d2:	4620      	mov	r0, r4
 80083d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d8:	080095ef 	.word	0x080095ef
 80083dc:	08009660 	.word	0x08009660

080083e0 <__hi0bits>:
 80083e0:	0c03      	lsrs	r3, r0, #16
 80083e2:	041b      	lsls	r3, r3, #16
 80083e4:	b9d3      	cbnz	r3, 800841c <__hi0bits+0x3c>
 80083e6:	0400      	lsls	r0, r0, #16
 80083e8:	2310      	movs	r3, #16
 80083ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083ee:	bf04      	itt	eq
 80083f0:	0200      	lsleq	r0, r0, #8
 80083f2:	3308      	addeq	r3, #8
 80083f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80083f8:	bf04      	itt	eq
 80083fa:	0100      	lsleq	r0, r0, #4
 80083fc:	3304      	addeq	r3, #4
 80083fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008402:	bf04      	itt	eq
 8008404:	0080      	lsleq	r0, r0, #2
 8008406:	3302      	addeq	r3, #2
 8008408:	2800      	cmp	r0, #0
 800840a:	db05      	blt.n	8008418 <__hi0bits+0x38>
 800840c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008410:	f103 0301 	add.w	r3, r3, #1
 8008414:	bf08      	it	eq
 8008416:	2320      	moveq	r3, #32
 8008418:	4618      	mov	r0, r3
 800841a:	4770      	bx	lr
 800841c:	2300      	movs	r3, #0
 800841e:	e7e4      	b.n	80083ea <__hi0bits+0xa>

08008420 <__lo0bits>:
 8008420:	6803      	ldr	r3, [r0, #0]
 8008422:	f013 0207 	ands.w	r2, r3, #7
 8008426:	4601      	mov	r1, r0
 8008428:	d00b      	beq.n	8008442 <__lo0bits+0x22>
 800842a:	07da      	lsls	r2, r3, #31
 800842c:	d423      	bmi.n	8008476 <__lo0bits+0x56>
 800842e:	0798      	lsls	r0, r3, #30
 8008430:	bf49      	itett	mi
 8008432:	085b      	lsrmi	r3, r3, #1
 8008434:	089b      	lsrpl	r3, r3, #2
 8008436:	2001      	movmi	r0, #1
 8008438:	600b      	strmi	r3, [r1, #0]
 800843a:	bf5c      	itt	pl
 800843c:	600b      	strpl	r3, [r1, #0]
 800843e:	2002      	movpl	r0, #2
 8008440:	4770      	bx	lr
 8008442:	b298      	uxth	r0, r3
 8008444:	b9a8      	cbnz	r0, 8008472 <__lo0bits+0x52>
 8008446:	0c1b      	lsrs	r3, r3, #16
 8008448:	2010      	movs	r0, #16
 800844a:	b2da      	uxtb	r2, r3
 800844c:	b90a      	cbnz	r2, 8008452 <__lo0bits+0x32>
 800844e:	3008      	adds	r0, #8
 8008450:	0a1b      	lsrs	r3, r3, #8
 8008452:	071a      	lsls	r2, r3, #28
 8008454:	bf04      	itt	eq
 8008456:	091b      	lsreq	r3, r3, #4
 8008458:	3004      	addeq	r0, #4
 800845a:	079a      	lsls	r2, r3, #30
 800845c:	bf04      	itt	eq
 800845e:	089b      	lsreq	r3, r3, #2
 8008460:	3002      	addeq	r0, #2
 8008462:	07da      	lsls	r2, r3, #31
 8008464:	d403      	bmi.n	800846e <__lo0bits+0x4e>
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	f100 0001 	add.w	r0, r0, #1
 800846c:	d005      	beq.n	800847a <__lo0bits+0x5a>
 800846e:	600b      	str	r3, [r1, #0]
 8008470:	4770      	bx	lr
 8008472:	4610      	mov	r0, r2
 8008474:	e7e9      	b.n	800844a <__lo0bits+0x2a>
 8008476:	2000      	movs	r0, #0
 8008478:	4770      	bx	lr
 800847a:	2020      	movs	r0, #32
 800847c:	4770      	bx	lr
	...

08008480 <__i2b>:
 8008480:	b510      	push	{r4, lr}
 8008482:	460c      	mov	r4, r1
 8008484:	2101      	movs	r1, #1
 8008486:	f7ff ff03 	bl	8008290 <_Balloc>
 800848a:	4602      	mov	r2, r0
 800848c:	b928      	cbnz	r0, 800849a <__i2b+0x1a>
 800848e:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <__i2b+0x24>)
 8008490:	4805      	ldr	r0, [pc, #20]	; (80084a8 <__i2b+0x28>)
 8008492:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008496:	f000 fdf5 	bl	8009084 <__assert_func>
 800849a:	2301      	movs	r3, #1
 800849c:	6144      	str	r4, [r0, #20]
 800849e:	6103      	str	r3, [r0, #16]
 80084a0:	bd10      	pop	{r4, pc}
 80084a2:	bf00      	nop
 80084a4:	080095ef 	.word	0x080095ef
 80084a8:	08009660 	.word	0x08009660

080084ac <__multiply>:
 80084ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b0:	4691      	mov	r9, r2
 80084b2:	690a      	ldr	r2, [r1, #16]
 80084b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bfb8      	it	lt
 80084bc:	460b      	movlt	r3, r1
 80084be:	460c      	mov	r4, r1
 80084c0:	bfbc      	itt	lt
 80084c2:	464c      	movlt	r4, r9
 80084c4:	4699      	movlt	r9, r3
 80084c6:	6927      	ldr	r7, [r4, #16]
 80084c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084cc:	68a3      	ldr	r3, [r4, #8]
 80084ce:	6861      	ldr	r1, [r4, #4]
 80084d0:	eb07 060a 	add.w	r6, r7, sl
 80084d4:	42b3      	cmp	r3, r6
 80084d6:	b085      	sub	sp, #20
 80084d8:	bfb8      	it	lt
 80084da:	3101      	addlt	r1, #1
 80084dc:	f7ff fed8 	bl	8008290 <_Balloc>
 80084e0:	b930      	cbnz	r0, 80084f0 <__multiply+0x44>
 80084e2:	4602      	mov	r2, r0
 80084e4:	4b44      	ldr	r3, [pc, #272]	; (80085f8 <__multiply+0x14c>)
 80084e6:	4845      	ldr	r0, [pc, #276]	; (80085fc <__multiply+0x150>)
 80084e8:	f240 115d 	movw	r1, #349	; 0x15d
 80084ec:	f000 fdca 	bl	8009084 <__assert_func>
 80084f0:	f100 0514 	add.w	r5, r0, #20
 80084f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084f8:	462b      	mov	r3, r5
 80084fa:	2200      	movs	r2, #0
 80084fc:	4543      	cmp	r3, r8
 80084fe:	d321      	bcc.n	8008544 <__multiply+0x98>
 8008500:	f104 0314 	add.w	r3, r4, #20
 8008504:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008508:	f109 0314 	add.w	r3, r9, #20
 800850c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008510:	9202      	str	r2, [sp, #8]
 8008512:	1b3a      	subs	r2, r7, r4
 8008514:	3a15      	subs	r2, #21
 8008516:	f022 0203 	bic.w	r2, r2, #3
 800851a:	3204      	adds	r2, #4
 800851c:	f104 0115 	add.w	r1, r4, #21
 8008520:	428f      	cmp	r7, r1
 8008522:	bf38      	it	cc
 8008524:	2204      	movcc	r2, #4
 8008526:	9201      	str	r2, [sp, #4]
 8008528:	9a02      	ldr	r2, [sp, #8]
 800852a:	9303      	str	r3, [sp, #12]
 800852c:	429a      	cmp	r2, r3
 800852e:	d80c      	bhi.n	800854a <__multiply+0x9e>
 8008530:	2e00      	cmp	r6, #0
 8008532:	dd03      	ble.n	800853c <__multiply+0x90>
 8008534:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008538:	2b00      	cmp	r3, #0
 800853a:	d05a      	beq.n	80085f2 <__multiply+0x146>
 800853c:	6106      	str	r6, [r0, #16]
 800853e:	b005      	add	sp, #20
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	f843 2b04 	str.w	r2, [r3], #4
 8008548:	e7d8      	b.n	80084fc <__multiply+0x50>
 800854a:	f8b3 a000 	ldrh.w	sl, [r3]
 800854e:	f1ba 0f00 	cmp.w	sl, #0
 8008552:	d024      	beq.n	800859e <__multiply+0xf2>
 8008554:	f104 0e14 	add.w	lr, r4, #20
 8008558:	46a9      	mov	r9, r5
 800855a:	f04f 0c00 	mov.w	ip, #0
 800855e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008562:	f8d9 1000 	ldr.w	r1, [r9]
 8008566:	fa1f fb82 	uxth.w	fp, r2
 800856a:	b289      	uxth	r1, r1
 800856c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008570:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008574:	f8d9 2000 	ldr.w	r2, [r9]
 8008578:	4461      	add	r1, ip
 800857a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800857e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008582:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008586:	b289      	uxth	r1, r1
 8008588:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800858c:	4577      	cmp	r7, lr
 800858e:	f849 1b04 	str.w	r1, [r9], #4
 8008592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008596:	d8e2      	bhi.n	800855e <__multiply+0xb2>
 8008598:	9a01      	ldr	r2, [sp, #4]
 800859a:	f845 c002 	str.w	ip, [r5, r2]
 800859e:	9a03      	ldr	r2, [sp, #12]
 80085a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085a4:	3304      	adds	r3, #4
 80085a6:	f1b9 0f00 	cmp.w	r9, #0
 80085aa:	d020      	beq.n	80085ee <__multiply+0x142>
 80085ac:	6829      	ldr	r1, [r5, #0]
 80085ae:	f104 0c14 	add.w	ip, r4, #20
 80085b2:	46ae      	mov	lr, r5
 80085b4:	f04f 0a00 	mov.w	sl, #0
 80085b8:	f8bc b000 	ldrh.w	fp, [ip]
 80085bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085c0:	fb09 220b 	mla	r2, r9, fp, r2
 80085c4:	4492      	add	sl, r2
 80085c6:	b289      	uxth	r1, r1
 80085c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085cc:	f84e 1b04 	str.w	r1, [lr], #4
 80085d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085d4:	f8be 1000 	ldrh.w	r1, [lr]
 80085d8:	0c12      	lsrs	r2, r2, #16
 80085da:	fb09 1102 	mla	r1, r9, r2, r1
 80085de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085e2:	4567      	cmp	r7, ip
 80085e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085e8:	d8e6      	bhi.n	80085b8 <__multiply+0x10c>
 80085ea:	9a01      	ldr	r2, [sp, #4]
 80085ec:	50a9      	str	r1, [r5, r2]
 80085ee:	3504      	adds	r5, #4
 80085f0:	e79a      	b.n	8008528 <__multiply+0x7c>
 80085f2:	3e01      	subs	r6, #1
 80085f4:	e79c      	b.n	8008530 <__multiply+0x84>
 80085f6:	bf00      	nop
 80085f8:	080095ef 	.word	0x080095ef
 80085fc:	08009660 	.word	0x08009660

08008600 <__pow5mult>:
 8008600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008604:	4615      	mov	r5, r2
 8008606:	f012 0203 	ands.w	r2, r2, #3
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	d007      	beq.n	8008620 <__pow5mult+0x20>
 8008610:	4c25      	ldr	r4, [pc, #148]	; (80086a8 <__pow5mult+0xa8>)
 8008612:	3a01      	subs	r2, #1
 8008614:	2300      	movs	r3, #0
 8008616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800861a:	f7ff fe9b 	bl	8008354 <__multadd>
 800861e:	4607      	mov	r7, r0
 8008620:	10ad      	asrs	r5, r5, #2
 8008622:	d03d      	beq.n	80086a0 <__pow5mult+0xa0>
 8008624:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008626:	b97c      	cbnz	r4, 8008648 <__pow5mult+0x48>
 8008628:	2010      	movs	r0, #16
 800862a:	f7ff fe29 	bl	8008280 <malloc>
 800862e:	4602      	mov	r2, r0
 8008630:	6270      	str	r0, [r6, #36]	; 0x24
 8008632:	b928      	cbnz	r0, 8008640 <__pow5mult+0x40>
 8008634:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <__pow5mult+0xac>)
 8008636:	481e      	ldr	r0, [pc, #120]	; (80086b0 <__pow5mult+0xb0>)
 8008638:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800863c:	f000 fd22 	bl	8009084 <__assert_func>
 8008640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008644:	6004      	str	r4, [r0, #0]
 8008646:	60c4      	str	r4, [r0, #12]
 8008648:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800864c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008650:	b94c      	cbnz	r4, 8008666 <__pow5mult+0x66>
 8008652:	f240 2171 	movw	r1, #625	; 0x271
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ff12 	bl	8008480 <__i2b>
 800865c:	2300      	movs	r3, #0
 800865e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008662:	4604      	mov	r4, r0
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	f04f 0900 	mov.w	r9, #0
 800866a:	07eb      	lsls	r3, r5, #31
 800866c:	d50a      	bpl.n	8008684 <__pow5mult+0x84>
 800866e:	4639      	mov	r1, r7
 8008670:	4622      	mov	r2, r4
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ff1a 	bl	80084ac <__multiply>
 8008678:	4639      	mov	r1, r7
 800867a:	4680      	mov	r8, r0
 800867c:	4630      	mov	r0, r6
 800867e:	f7ff fe47 	bl	8008310 <_Bfree>
 8008682:	4647      	mov	r7, r8
 8008684:	106d      	asrs	r5, r5, #1
 8008686:	d00b      	beq.n	80086a0 <__pow5mult+0xa0>
 8008688:	6820      	ldr	r0, [r4, #0]
 800868a:	b938      	cbnz	r0, 800869c <__pow5mult+0x9c>
 800868c:	4622      	mov	r2, r4
 800868e:	4621      	mov	r1, r4
 8008690:	4630      	mov	r0, r6
 8008692:	f7ff ff0b 	bl	80084ac <__multiply>
 8008696:	6020      	str	r0, [r4, #0]
 8008698:	f8c0 9000 	str.w	r9, [r0]
 800869c:	4604      	mov	r4, r0
 800869e:	e7e4      	b.n	800866a <__pow5mult+0x6a>
 80086a0:	4638      	mov	r0, r7
 80086a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a6:	bf00      	nop
 80086a8:	080097b0 	.word	0x080097b0
 80086ac:	0800957d 	.word	0x0800957d
 80086b0:	08009660 	.word	0x08009660

080086b4 <__lshift>:
 80086b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b8:	460c      	mov	r4, r1
 80086ba:	6849      	ldr	r1, [r1, #4]
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	4607      	mov	r7, r0
 80086c6:	4691      	mov	r9, r2
 80086c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086cc:	f108 0601 	add.w	r6, r8, #1
 80086d0:	42b3      	cmp	r3, r6
 80086d2:	db0b      	blt.n	80086ec <__lshift+0x38>
 80086d4:	4638      	mov	r0, r7
 80086d6:	f7ff fddb 	bl	8008290 <_Balloc>
 80086da:	4605      	mov	r5, r0
 80086dc:	b948      	cbnz	r0, 80086f2 <__lshift+0x3e>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b2a      	ldr	r3, [pc, #168]	; (800878c <__lshift+0xd8>)
 80086e2:	482b      	ldr	r0, [pc, #172]	; (8008790 <__lshift+0xdc>)
 80086e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086e8:	f000 fccc 	bl	8009084 <__assert_func>
 80086ec:	3101      	adds	r1, #1
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	e7ee      	b.n	80086d0 <__lshift+0x1c>
 80086f2:	2300      	movs	r3, #0
 80086f4:	f100 0114 	add.w	r1, r0, #20
 80086f8:	f100 0210 	add.w	r2, r0, #16
 80086fc:	4618      	mov	r0, r3
 80086fe:	4553      	cmp	r3, sl
 8008700:	db37      	blt.n	8008772 <__lshift+0xbe>
 8008702:	6920      	ldr	r0, [r4, #16]
 8008704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008708:	f104 0314 	add.w	r3, r4, #20
 800870c:	f019 091f 	ands.w	r9, r9, #31
 8008710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008714:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008718:	d02f      	beq.n	800877a <__lshift+0xc6>
 800871a:	f1c9 0e20 	rsb	lr, r9, #32
 800871e:	468a      	mov	sl, r1
 8008720:	f04f 0c00 	mov.w	ip, #0
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	fa02 f209 	lsl.w	r2, r2, r9
 800872a:	ea42 020c 	orr.w	r2, r2, ip
 800872e:	f84a 2b04 	str.w	r2, [sl], #4
 8008732:	f853 2b04 	ldr.w	r2, [r3], #4
 8008736:	4298      	cmp	r0, r3
 8008738:	fa22 fc0e 	lsr.w	ip, r2, lr
 800873c:	d8f2      	bhi.n	8008724 <__lshift+0x70>
 800873e:	1b03      	subs	r3, r0, r4
 8008740:	3b15      	subs	r3, #21
 8008742:	f023 0303 	bic.w	r3, r3, #3
 8008746:	3304      	adds	r3, #4
 8008748:	f104 0215 	add.w	r2, r4, #21
 800874c:	4290      	cmp	r0, r2
 800874e:	bf38      	it	cc
 8008750:	2304      	movcc	r3, #4
 8008752:	f841 c003 	str.w	ip, [r1, r3]
 8008756:	f1bc 0f00 	cmp.w	ip, #0
 800875a:	d001      	beq.n	8008760 <__lshift+0xac>
 800875c:	f108 0602 	add.w	r6, r8, #2
 8008760:	3e01      	subs	r6, #1
 8008762:	4638      	mov	r0, r7
 8008764:	612e      	str	r6, [r5, #16]
 8008766:	4621      	mov	r1, r4
 8008768:	f7ff fdd2 	bl	8008310 <_Bfree>
 800876c:	4628      	mov	r0, r5
 800876e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008772:	f842 0f04 	str.w	r0, [r2, #4]!
 8008776:	3301      	adds	r3, #1
 8008778:	e7c1      	b.n	80086fe <__lshift+0x4a>
 800877a:	3904      	subs	r1, #4
 800877c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008780:	f841 2f04 	str.w	r2, [r1, #4]!
 8008784:	4298      	cmp	r0, r3
 8008786:	d8f9      	bhi.n	800877c <__lshift+0xc8>
 8008788:	e7ea      	b.n	8008760 <__lshift+0xac>
 800878a:	bf00      	nop
 800878c:	080095ef 	.word	0x080095ef
 8008790:	08009660 	.word	0x08009660

08008794 <__mcmp>:
 8008794:	b530      	push	{r4, r5, lr}
 8008796:	6902      	ldr	r2, [r0, #16]
 8008798:	690c      	ldr	r4, [r1, #16]
 800879a:	1b12      	subs	r2, r2, r4
 800879c:	d10e      	bne.n	80087bc <__mcmp+0x28>
 800879e:	f100 0314 	add.w	r3, r0, #20
 80087a2:	3114      	adds	r1, #20
 80087a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087b4:	42a5      	cmp	r5, r4
 80087b6:	d003      	beq.n	80087c0 <__mcmp+0x2c>
 80087b8:	d305      	bcc.n	80087c6 <__mcmp+0x32>
 80087ba:	2201      	movs	r2, #1
 80087bc:	4610      	mov	r0, r2
 80087be:	bd30      	pop	{r4, r5, pc}
 80087c0:	4283      	cmp	r3, r0
 80087c2:	d3f3      	bcc.n	80087ac <__mcmp+0x18>
 80087c4:	e7fa      	b.n	80087bc <__mcmp+0x28>
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ca:	e7f7      	b.n	80087bc <__mcmp+0x28>

080087cc <__mdiff>:
 80087cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	460c      	mov	r4, r1
 80087d2:	4606      	mov	r6, r0
 80087d4:	4611      	mov	r1, r2
 80087d6:	4620      	mov	r0, r4
 80087d8:	4690      	mov	r8, r2
 80087da:	f7ff ffdb 	bl	8008794 <__mcmp>
 80087de:	1e05      	subs	r5, r0, #0
 80087e0:	d110      	bne.n	8008804 <__mdiff+0x38>
 80087e2:	4629      	mov	r1, r5
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7ff fd53 	bl	8008290 <_Balloc>
 80087ea:	b930      	cbnz	r0, 80087fa <__mdiff+0x2e>
 80087ec:	4b3a      	ldr	r3, [pc, #232]	; (80088d8 <__mdiff+0x10c>)
 80087ee:	4602      	mov	r2, r0
 80087f0:	f240 2132 	movw	r1, #562	; 0x232
 80087f4:	4839      	ldr	r0, [pc, #228]	; (80088dc <__mdiff+0x110>)
 80087f6:	f000 fc45 	bl	8009084 <__assert_func>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	bfa4      	itt	ge
 8008806:	4643      	movge	r3, r8
 8008808:	46a0      	movge	r8, r4
 800880a:	4630      	mov	r0, r6
 800880c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008810:	bfa6      	itte	ge
 8008812:	461c      	movge	r4, r3
 8008814:	2500      	movge	r5, #0
 8008816:	2501      	movlt	r5, #1
 8008818:	f7ff fd3a 	bl	8008290 <_Balloc>
 800881c:	b920      	cbnz	r0, 8008828 <__mdiff+0x5c>
 800881e:	4b2e      	ldr	r3, [pc, #184]	; (80088d8 <__mdiff+0x10c>)
 8008820:	4602      	mov	r2, r0
 8008822:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008826:	e7e5      	b.n	80087f4 <__mdiff+0x28>
 8008828:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800882c:	6926      	ldr	r6, [r4, #16]
 800882e:	60c5      	str	r5, [r0, #12]
 8008830:	f104 0914 	add.w	r9, r4, #20
 8008834:	f108 0514 	add.w	r5, r8, #20
 8008838:	f100 0e14 	add.w	lr, r0, #20
 800883c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008840:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008844:	f108 0210 	add.w	r2, r8, #16
 8008848:	46f2      	mov	sl, lr
 800884a:	2100      	movs	r1, #0
 800884c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008850:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008854:	fa1f f883 	uxth.w	r8, r3
 8008858:	fa11 f18b 	uxtah	r1, r1, fp
 800885c:	0c1b      	lsrs	r3, r3, #16
 800885e:	eba1 0808 	sub.w	r8, r1, r8
 8008862:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008866:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800886a:	fa1f f888 	uxth.w	r8, r8
 800886e:	1419      	asrs	r1, r3, #16
 8008870:	454e      	cmp	r6, r9
 8008872:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008876:	f84a 3b04 	str.w	r3, [sl], #4
 800887a:	d8e7      	bhi.n	800884c <__mdiff+0x80>
 800887c:	1b33      	subs	r3, r6, r4
 800887e:	3b15      	subs	r3, #21
 8008880:	f023 0303 	bic.w	r3, r3, #3
 8008884:	3304      	adds	r3, #4
 8008886:	3415      	adds	r4, #21
 8008888:	42a6      	cmp	r6, r4
 800888a:	bf38      	it	cc
 800888c:	2304      	movcc	r3, #4
 800888e:	441d      	add	r5, r3
 8008890:	4473      	add	r3, lr
 8008892:	469e      	mov	lr, r3
 8008894:	462e      	mov	r6, r5
 8008896:	4566      	cmp	r6, ip
 8008898:	d30e      	bcc.n	80088b8 <__mdiff+0xec>
 800889a:	f10c 0203 	add.w	r2, ip, #3
 800889e:	1b52      	subs	r2, r2, r5
 80088a0:	f022 0203 	bic.w	r2, r2, #3
 80088a4:	3d03      	subs	r5, #3
 80088a6:	45ac      	cmp	ip, r5
 80088a8:	bf38      	it	cc
 80088aa:	2200      	movcc	r2, #0
 80088ac:	441a      	add	r2, r3
 80088ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088b2:	b17b      	cbz	r3, 80088d4 <__mdiff+0x108>
 80088b4:	6107      	str	r7, [r0, #16]
 80088b6:	e7a3      	b.n	8008800 <__mdiff+0x34>
 80088b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80088bc:	fa11 f288 	uxtah	r2, r1, r8
 80088c0:	1414      	asrs	r4, r2, #16
 80088c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088c6:	b292      	uxth	r2, r2
 80088c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088cc:	f84e 2b04 	str.w	r2, [lr], #4
 80088d0:	1421      	asrs	r1, r4, #16
 80088d2:	e7e0      	b.n	8008896 <__mdiff+0xca>
 80088d4:	3f01      	subs	r7, #1
 80088d6:	e7ea      	b.n	80088ae <__mdiff+0xe2>
 80088d8:	080095ef 	.word	0x080095ef
 80088dc:	08009660 	.word	0x08009660

080088e0 <__d2b>:
 80088e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088e4:	4689      	mov	r9, r1
 80088e6:	2101      	movs	r1, #1
 80088e8:	ec57 6b10 	vmov	r6, r7, d0
 80088ec:	4690      	mov	r8, r2
 80088ee:	f7ff fccf 	bl	8008290 <_Balloc>
 80088f2:	4604      	mov	r4, r0
 80088f4:	b930      	cbnz	r0, 8008904 <__d2b+0x24>
 80088f6:	4602      	mov	r2, r0
 80088f8:	4b25      	ldr	r3, [pc, #148]	; (8008990 <__d2b+0xb0>)
 80088fa:	4826      	ldr	r0, [pc, #152]	; (8008994 <__d2b+0xb4>)
 80088fc:	f240 310a 	movw	r1, #778	; 0x30a
 8008900:	f000 fbc0 	bl	8009084 <__assert_func>
 8008904:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008908:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800890c:	bb35      	cbnz	r5, 800895c <__d2b+0x7c>
 800890e:	2e00      	cmp	r6, #0
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	d028      	beq.n	8008966 <__d2b+0x86>
 8008914:	4668      	mov	r0, sp
 8008916:	9600      	str	r6, [sp, #0]
 8008918:	f7ff fd82 	bl	8008420 <__lo0bits>
 800891c:	9900      	ldr	r1, [sp, #0]
 800891e:	b300      	cbz	r0, 8008962 <__d2b+0x82>
 8008920:	9a01      	ldr	r2, [sp, #4]
 8008922:	f1c0 0320 	rsb	r3, r0, #32
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	430b      	orrs	r3, r1
 800892c:	40c2      	lsrs	r2, r0
 800892e:	6163      	str	r3, [r4, #20]
 8008930:	9201      	str	r2, [sp, #4]
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	61a3      	str	r3, [r4, #24]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bf14      	ite	ne
 800893a:	2202      	movne	r2, #2
 800893c:	2201      	moveq	r2, #1
 800893e:	6122      	str	r2, [r4, #16]
 8008940:	b1d5      	cbz	r5, 8008978 <__d2b+0x98>
 8008942:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008946:	4405      	add	r5, r0
 8008948:	f8c9 5000 	str.w	r5, [r9]
 800894c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008950:	f8c8 0000 	str.w	r0, [r8]
 8008954:	4620      	mov	r0, r4
 8008956:	b003      	add	sp, #12
 8008958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800895c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008960:	e7d5      	b.n	800890e <__d2b+0x2e>
 8008962:	6161      	str	r1, [r4, #20]
 8008964:	e7e5      	b.n	8008932 <__d2b+0x52>
 8008966:	a801      	add	r0, sp, #4
 8008968:	f7ff fd5a 	bl	8008420 <__lo0bits>
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	6163      	str	r3, [r4, #20]
 8008970:	2201      	movs	r2, #1
 8008972:	6122      	str	r2, [r4, #16]
 8008974:	3020      	adds	r0, #32
 8008976:	e7e3      	b.n	8008940 <__d2b+0x60>
 8008978:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800897c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008980:	f8c9 0000 	str.w	r0, [r9]
 8008984:	6918      	ldr	r0, [r3, #16]
 8008986:	f7ff fd2b 	bl	80083e0 <__hi0bits>
 800898a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800898e:	e7df      	b.n	8008950 <__d2b+0x70>
 8008990:	080095ef 	.word	0x080095ef
 8008994:	08009660 	.word	0x08009660

08008998 <_calloc_r>:
 8008998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800899a:	fba1 2402 	umull	r2, r4, r1, r2
 800899e:	b94c      	cbnz	r4, 80089b4 <_calloc_r+0x1c>
 80089a0:	4611      	mov	r1, r2
 80089a2:	9201      	str	r2, [sp, #4]
 80089a4:	f000 f87a 	bl	8008a9c <_malloc_r>
 80089a8:	9a01      	ldr	r2, [sp, #4]
 80089aa:	4605      	mov	r5, r0
 80089ac:	b930      	cbnz	r0, 80089bc <_calloc_r+0x24>
 80089ae:	4628      	mov	r0, r5
 80089b0:	b003      	add	sp, #12
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	220c      	movs	r2, #12
 80089b6:	6002      	str	r2, [r0, #0]
 80089b8:	2500      	movs	r5, #0
 80089ba:	e7f8      	b.n	80089ae <_calloc_r+0x16>
 80089bc:	4621      	mov	r1, r4
 80089be:	f7fe f85b 	bl	8006a78 <memset>
 80089c2:	e7f4      	b.n	80089ae <_calloc_r+0x16>

080089c4 <_free_r>:
 80089c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089c6:	2900      	cmp	r1, #0
 80089c8:	d044      	beq.n	8008a54 <_free_r+0x90>
 80089ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ce:	9001      	str	r0, [sp, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f1a1 0404 	sub.w	r4, r1, #4
 80089d6:	bfb8      	it	lt
 80089d8:	18e4      	addlt	r4, r4, r3
 80089da:	f000 fcdf 	bl	800939c <__malloc_lock>
 80089de:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <_free_r+0x94>)
 80089e0:	9801      	ldr	r0, [sp, #4]
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	b933      	cbnz	r3, 80089f4 <_free_r+0x30>
 80089e6:	6063      	str	r3, [r4, #4]
 80089e8:	6014      	str	r4, [r2, #0]
 80089ea:	b003      	add	sp, #12
 80089ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f0:	f000 bcda 	b.w	80093a8 <__malloc_unlock>
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	d908      	bls.n	8008a0a <_free_r+0x46>
 80089f8:	6825      	ldr	r5, [r4, #0]
 80089fa:	1961      	adds	r1, r4, r5
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf01      	itttt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	1949      	addeq	r1, r1, r5
 8008a06:	6021      	streq	r1, [r4, #0]
 8008a08:	e7ed      	b.n	80089e6 <_free_r+0x22>
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	b10b      	cbz	r3, 8008a14 <_free_r+0x50>
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	d9fa      	bls.n	8008a0a <_free_r+0x46>
 8008a14:	6811      	ldr	r1, [r2, #0]
 8008a16:	1855      	adds	r5, r2, r1
 8008a18:	42a5      	cmp	r5, r4
 8008a1a:	d10b      	bne.n	8008a34 <_free_r+0x70>
 8008a1c:	6824      	ldr	r4, [r4, #0]
 8008a1e:	4421      	add	r1, r4
 8008a20:	1854      	adds	r4, r2, r1
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	6011      	str	r1, [r2, #0]
 8008a26:	d1e0      	bne.n	80089ea <_free_r+0x26>
 8008a28:	681c      	ldr	r4, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	6053      	str	r3, [r2, #4]
 8008a2e:	4421      	add	r1, r4
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	e7da      	b.n	80089ea <_free_r+0x26>
 8008a34:	d902      	bls.n	8008a3c <_free_r+0x78>
 8008a36:	230c      	movs	r3, #12
 8008a38:	6003      	str	r3, [r0, #0]
 8008a3a:	e7d6      	b.n	80089ea <_free_r+0x26>
 8008a3c:	6825      	ldr	r5, [r4, #0]
 8008a3e:	1961      	adds	r1, r4, r5
 8008a40:	428b      	cmp	r3, r1
 8008a42:	bf04      	itt	eq
 8008a44:	6819      	ldreq	r1, [r3, #0]
 8008a46:	685b      	ldreq	r3, [r3, #4]
 8008a48:	6063      	str	r3, [r4, #4]
 8008a4a:	bf04      	itt	eq
 8008a4c:	1949      	addeq	r1, r1, r5
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	6054      	str	r4, [r2, #4]
 8008a52:	e7ca      	b.n	80089ea <_free_r+0x26>
 8008a54:	b003      	add	sp, #12
 8008a56:	bd30      	pop	{r4, r5, pc}
 8008a58:	20000530 	.word	0x20000530

08008a5c <sbrk_aligned>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4e0e      	ldr	r6, [pc, #56]	; (8008a98 <sbrk_aligned+0x3c>)
 8008a60:	460c      	mov	r4, r1
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	4605      	mov	r5, r0
 8008a66:	b911      	cbnz	r1, 8008a6e <sbrk_aligned+0x12>
 8008a68:	f000 f9e6 	bl	8008e38 <_sbrk_r>
 8008a6c:	6030      	str	r0, [r6, #0]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 f9e1 	bl	8008e38 <_sbrk_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d00a      	beq.n	8008a90 <sbrk_aligned+0x34>
 8008a7a:	1cc4      	adds	r4, r0, #3
 8008a7c:	f024 0403 	bic.w	r4, r4, #3
 8008a80:	42a0      	cmp	r0, r4
 8008a82:	d007      	beq.n	8008a94 <sbrk_aligned+0x38>
 8008a84:	1a21      	subs	r1, r4, r0
 8008a86:	4628      	mov	r0, r5
 8008a88:	f000 f9d6 	bl	8008e38 <_sbrk_r>
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d101      	bne.n	8008a94 <sbrk_aligned+0x38>
 8008a90:	f04f 34ff 	mov.w	r4, #4294967295
 8008a94:	4620      	mov	r0, r4
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	20000534 	.word	0x20000534

08008a9c <_malloc_r>:
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	1ccd      	adds	r5, r1, #3
 8008aa2:	f025 0503 	bic.w	r5, r5, #3
 8008aa6:	3508      	adds	r5, #8
 8008aa8:	2d0c      	cmp	r5, #12
 8008aaa:	bf38      	it	cc
 8008aac:	250c      	movcc	r5, #12
 8008aae:	2d00      	cmp	r5, #0
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	db01      	blt.n	8008ab8 <_malloc_r+0x1c>
 8008ab4:	42a9      	cmp	r1, r5
 8008ab6:	d905      	bls.n	8008ac4 <_malloc_r+0x28>
 8008ab8:	230c      	movs	r3, #12
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	2600      	movs	r6, #0
 8008abe:	4630      	mov	r0, r6
 8008ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac4:	4e2e      	ldr	r6, [pc, #184]	; (8008b80 <_malloc_r+0xe4>)
 8008ac6:	f000 fc69 	bl	800939c <__malloc_lock>
 8008aca:	6833      	ldr	r3, [r6, #0]
 8008acc:	461c      	mov	r4, r3
 8008ace:	bb34      	cbnz	r4, 8008b1e <_malloc_r+0x82>
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4638      	mov	r0, r7
 8008ad4:	f7ff ffc2 	bl	8008a5c <sbrk_aligned>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	4604      	mov	r4, r0
 8008adc:	d14d      	bne.n	8008b7a <_malloc_r+0xde>
 8008ade:	6834      	ldr	r4, [r6, #0]
 8008ae0:	4626      	mov	r6, r4
 8008ae2:	2e00      	cmp	r6, #0
 8008ae4:	d140      	bne.n	8008b68 <_malloc_r+0xcc>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	4631      	mov	r1, r6
 8008aea:	4638      	mov	r0, r7
 8008aec:	eb04 0803 	add.w	r8, r4, r3
 8008af0:	f000 f9a2 	bl	8008e38 <_sbrk_r>
 8008af4:	4580      	cmp	r8, r0
 8008af6:	d13a      	bne.n	8008b6e <_malloc_r+0xd2>
 8008af8:	6821      	ldr	r1, [r4, #0]
 8008afa:	3503      	adds	r5, #3
 8008afc:	1a6d      	subs	r5, r5, r1
 8008afe:	f025 0503 	bic.w	r5, r5, #3
 8008b02:	3508      	adds	r5, #8
 8008b04:	2d0c      	cmp	r5, #12
 8008b06:	bf38      	it	cc
 8008b08:	250c      	movcc	r5, #12
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7ff ffa5 	bl	8008a5c <sbrk_aligned>
 8008b12:	3001      	adds	r0, #1
 8008b14:	d02b      	beq.n	8008b6e <_malloc_r+0xd2>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	442b      	add	r3, r5
 8008b1a:	6023      	str	r3, [r4, #0]
 8008b1c:	e00e      	b.n	8008b3c <_malloc_r+0xa0>
 8008b1e:	6822      	ldr	r2, [r4, #0]
 8008b20:	1b52      	subs	r2, r2, r5
 8008b22:	d41e      	bmi.n	8008b62 <_malloc_r+0xc6>
 8008b24:	2a0b      	cmp	r2, #11
 8008b26:	d916      	bls.n	8008b56 <_malloc_r+0xba>
 8008b28:	1961      	adds	r1, r4, r5
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	6025      	str	r5, [r4, #0]
 8008b2e:	bf18      	it	ne
 8008b30:	6059      	strne	r1, [r3, #4]
 8008b32:	6863      	ldr	r3, [r4, #4]
 8008b34:	bf08      	it	eq
 8008b36:	6031      	streq	r1, [r6, #0]
 8008b38:	5162      	str	r2, [r4, r5]
 8008b3a:	604b      	str	r3, [r1, #4]
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	f104 060b 	add.w	r6, r4, #11
 8008b42:	f000 fc31 	bl	80093a8 <__malloc_unlock>
 8008b46:	f026 0607 	bic.w	r6, r6, #7
 8008b4a:	1d23      	adds	r3, r4, #4
 8008b4c:	1af2      	subs	r2, r6, r3
 8008b4e:	d0b6      	beq.n	8008abe <_malloc_r+0x22>
 8008b50:	1b9b      	subs	r3, r3, r6
 8008b52:	50a3      	str	r3, [r4, r2]
 8008b54:	e7b3      	b.n	8008abe <_malloc_r+0x22>
 8008b56:	6862      	ldr	r2, [r4, #4]
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	bf0c      	ite	eq
 8008b5c:	6032      	streq	r2, [r6, #0]
 8008b5e:	605a      	strne	r2, [r3, #4]
 8008b60:	e7ec      	b.n	8008b3c <_malloc_r+0xa0>
 8008b62:	4623      	mov	r3, r4
 8008b64:	6864      	ldr	r4, [r4, #4]
 8008b66:	e7b2      	b.n	8008ace <_malloc_r+0x32>
 8008b68:	4634      	mov	r4, r6
 8008b6a:	6876      	ldr	r6, [r6, #4]
 8008b6c:	e7b9      	b.n	8008ae2 <_malloc_r+0x46>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	4638      	mov	r0, r7
 8008b74:	f000 fc18 	bl	80093a8 <__malloc_unlock>
 8008b78:	e7a1      	b.n	8008abe <_malloc_r+0x22>
 8008b7a:	6025      	str	r5, [r4, #0]
 8008b7c:	e7de      	b.n	8008b3c <_malloc_r+0xa0>
 8008b7e:	bf00      	nop
 8008b80:	20000530 	.word	0x20000530

08008b84 <__sfputc_r>:
 8008b84:	6893      	ldr	r3, [r2, #8]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	b410      	push	{r4}
 8008b8c:	6093      	str	r3, [r2, #8]
 8008b8e:	da08      	bge.n	8008ba2 <__sfputc_r+0x1e>
 8008b90:	6994      	ldr	r4, [r2, #24]
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	db01      	blt.n	8008b9a <__sfputc_r+0x16>
 8008b96:	290a      	cmp	r1, #10
 8008b98:	d103      	bne.n	8008ba2 <__sfputc_r+0x1e>
 8008b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b9e:	f000 b99f 	b.w	8008ee0 <__swbuf_r>
 8008ba2:	6813      	ldr	r3, [r2, #0]
 8008ba4:	1c58      	adds	r0, r3, #1
 8008ba6:	6010      	str	r0, [r2, #0]
 8008ba8:	7019      	strb	r1, [r3, #0]
 8008baa:	4608      	mov	r0, r1
 8008bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <__sfputs_r>:
 8008bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	4614      	mov	r4, r2
 8008bba:	18d5      	adds	r5, r2, r3
 8008bbc:	42ac      	cmp	r4, r5
 8008bbe:	d101      	bne.n	8008bc4 <__sfputs_r+0x12>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	e007      	b.n	8008bd4 <__sfputs_r+0x22>
 8008bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc8:	463a      	mov	r2, r7
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff ffda 	bl	8008b84 <__sfputc_r>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d1f3      	bne.n	8008bbc <__sfputs_r+0xa>
 8008bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bd8 <_vfiprintf_r>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	460d      	mov	r5, r1
 8008bde:	b09d      	sub	sp, #116	; 0x74
 8008be0:	4614      	mov	r4, r2
 8008be2:	4698      	mov	r8, r3
 8008be4:	4606      	mov	r6, r0
 8008be6:	b118      	cbz	r0, 8008bf0 <_vfiprintf_r+0x18>
 8008be8:	6983      	ldr	r3, [r0, #24]
 8008bea:	b90b      	cbnz	r3, 8008bf0 <_vfiprintf_r+0x18>
 8008bec:	f7ff faa2 	bl	8008134 <__sinit>
 8008bf0:	4b89      	ldr	r3, [pc, #548]	; (8008e18 <_vfiprintf_r+0x240>)
 8008bf2:	429d      	cmp	r5, r3
 8008bf4:	d11b      	bne.n	8008c2e <_vfiprintf_r+0x56>
 8008bf6:	6875      	ldr	r5, [r6, #4]
 8008bf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	d405      	bmi.n	8008c0a <_vfiprintf_r+0x32>
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	059a      	lsls	r2, r3, #22
 8008c02:	d402      	bmi.n	8008c0a <_vfiprintf_r+0x32>
 8008c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c06:	f7ff fb38 	bl	800827a <__retarget_lock_acquire_recursive>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	071b      	lsls	r3, r3, #28
 8008c0e:	d501      	bpl.n	8008c14 <_vfiprintf_r+0x3c>
 8008c10:	692b      	ldr	r3, [r5, #16]
 8008c12:	b9eb      	cbnz	r3, 8008c50 <_vfiprintf_r+0x78>
 8008c14:	4629      	mov	r1, r5
 8008c16:	4630      	mov	r0, r6
 8008c18:	f000 f9c6 	bl	8008fa8 <__swsetup_r>
 8008c1c:	b1c0      	cbz	r0, 8008c50 <_vfiprintf_r+0x78>
 8008c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c20:	07dc      	lsls	r4, r3, #31
 8008c22:	d50e      	bpl.n	8008c42 <_vfiprintf_r+0x6a>
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b01d      	add	sp, #116	; 0x74
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	4b7b      	ldr	r3, [pc, #492]	; (8008e1c <_vfiprintf_r+0x244>)
 8008c30:	429d      	cmp	r5, r3
 8008c32:	d101      	bne.n	8008c38 <_vfiprintf_r+0x60>
 8008c34:	68b5      	ldr	r5, [r6, #8]
 8008c36:	e7df      	b.n	8008bf8 <_vfiprintf_r+0x20>
 8008c38:	4b79      	ldr	r3, [pc, #484]	; (8008e20 <_vfiprintf_r+0x248>)
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	bf08      	it	eq
 8008c3e:	68f5      	ldreq	r5, [r6, #12]
 8008c40:	e7da      	b.n	8008bf8 <_vfiprintf_r+0x20>
 8008c42:	89ab      	ldrh	r3, [r5, #12]
 8008c44:	0598      	lsls	r0, r3, #22
 8008c46:	d4ed      	bmi.n	8008c24 <_vfiprintf_r+0x4c>
 8008c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c4a:	f7ff fb17 	bl	800827c <__retarget_lock_release_recursive>
 8008c4e:	e7e9      	b.n	8008c24 <_vfiprintf_r+0x4c>
 8008c50:	2300      	movs	r3, #0
 8008c52:	9309      	str	r3, [sp, #36]	; 0x24
 8008c54:	2320      	movs	r3, #32
 8008c56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c5e:	2330      	movs	r3, #48	; 0x30
 8008c60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e24 <_vfiprintf_r+0x24c>
 8008c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c68:	f04f 0901 	mov.w	r9, #1
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	469a      	mov	sl, r3
 8008c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c74:	b10a      	cbz	r2, 8008c7a <_vfiprintf_r+0xa2>
 8008c76:	2a25      	cmp	r2, #37	; 0x25
 8008c78:	d1f9      	bne.n	8008c6e <_vfiprintf_r+0x96>
 8008c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c7e:	d00b      	beq.n	8008c98 <_vfiprintf_r+0xc0>
 8008c80:	465b      	mov	r3, fp
 8008c82:	4622      	mov	r2, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff ff93 	bl	8008bb2 <__sfputs_r>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	f000 80aa 	beq.w	8008de6 <_vfiprintf_r+0x20e>
 8008c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c94:	445a      	add	r2, fp
 8008c96:	9209      	str	r2, [sp, #36]	; 0x24
 8008c98:	f89a 3000 	ldrb.w	r3, [sl]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80a2 	beq.w	8008de6 <_vfiprintf_r+0x20e>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cac:	f10a 0a01 	add.w	sl, sl, #1
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	9307      	str	r3, [sp, #28]
 8008cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8008cba:	4654      	mov	r4, sl
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc2:	4858      	ldr	r0, [pc, #352]	; (8008e24 <_vfiprintf_r+0x24c>)
 8008cc4:	f7f7 fa8c 	bl	80001e0 <memchr>
 8008cc8:	9a04      	ldr	r2, [sp, #16]
 8008cca:	b9d8      	cbnz	r0, 8008d04 <_vfiprintf_r+0x12c>
 8008ccc:	06d1      	lsls	r1, r2, #27
 8008cce:	bf44      	itt	mi
 8008cd0:	2320      	movmi	r3, #32
 8008cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cd6:	0713      	lsls	r3, r2, #28
 8008cd8:	bf44      	itt	mi
 8008cda:	232b      	movmi	r3, #43	; 0x2b
 8008cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ce6:	d015      	beq.n	8008d14 <_vfiprintf_r+0x13c>
 8008ce8:	9a07      	ldr	r2, [sp, #28]
 8008cea:	4654      	mov	r4, sl
 8008cec:	2000      	movs	r0, #0
 8008cee:	f04f 0c0a 	mov.w	ip, #10
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cf8:	3b30      	subs	r3, #48	; 0x30
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	d94e      	bls.n	8008d9c <_vfiprintf_r+0x1c4>
 8008cfe:	b1b0      	cbz	r0, 8008d2e <_vfiprintf_r+0x156>
 8008d00:	9207      	str	r2, [sp, #28]
 8008d02:	e014      	b.n	8008d2e <_vfiprintf_r+0x156>
 8008d04:	eba0 0308 	sub.w	r3, r0, r8
 8008d08:	fa09 f303 	lsl.w	r3, r9, r3
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	9304      	str	r3, [sp, #16]
 8008d10:	46a2      	mov	sl, r4
 8008d12:	e7d2      	b.n	8008cba <_vfiprintf_r+0xe2>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	1d19      	adds	r1, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	9103      	str	r1, [sp, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bfbb      	ittet	lt
 8008d20:	425b      	neglt	r3, r3
 8008d22:	f042 0202 	orrlt.w	r2, r2, #2
 8008d26:	9307      	strge	r3, [sp, #28]
 8008d28:	9307      	strlt	r3, [sp, #28]
 8008d2a:	bfb8      	it	lt
 8008d2c:	9204      	strlt	r2, [sp, #16]
 8008d2e:	7823      	ldrb	r3, [r4, #0]
 8008d30:	2b2e      	cmp	r3, #46	; 0x2e
 8008d32:	d10c      	bne.n	8008d4e <_vfiprintf_r+0x176>
 8008d34:	7863      	ldrb	r3, [r4, #1]
 8008d36:	2b2a      	cmp	r3, #42	; 0x2a
 8008d38:	d135      	bne.n	8008da6 <_vfiprintf_r+0x1ce>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	1d1a      	adds	r2, r3, #4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	9203      	str	r2, [sp, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	bfb8      	it	lt
 8008d46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d4a:	3402      	adds	r4, #2
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e34 <_vfiprintf_r+0x25c>
 8008d52:	7821      	ldrb	r1, [r4, #0]
 8008d54:	2203      	movs	r2, #3
 8008d56:	4650      	mov	r0, sl
 8008d58:	f7f7 fa42 	bl	80001e0 <memchr>
 8008d5c:	b140      	cbz	r0, 8008d70 <_vfiprintf_r+0x198>
 8008d5e:	2340      	movs	r3, #64	; 0x40
 8008d60:	eba0 000a 	sub.w	r0, r0, sl
 8008d64:	fa03 f000 	lsl.w	r0, r3, r0
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	4303      	orrs	r3, r0
 8008d6c:	3401      	adds	r4, #1
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d74:	482c      	ldr	r0, [pc, #176]	; (8008e28 <_vfiprintf_r+0x250>)
 8008d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d7a:	2206      	movs	r2, #6
 8008d7c:	f7f7 fa30 	bl	80001e0 <memchr>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d03f      	beq.n	8008e04 <_vfiprintf_r+0x22c>
 8008d84:	4b29      	ldr	r3, [pc, #164]	; (8008e2c <_vfiprintf_r+0x254>)
 8008d86:	bb1b      	cbnz	r3, 8008dd0 <_vfiprintf_r+0x1f8>
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	3307      	adds	r3, #7
 8008d8c:	f023 0307 	bic.w	r3, r3, #7
 8008d90:	3308      	adds	r3, #8
 8008d92:	9303      	str	r3, [sp, #12]
 8008d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d96:	443b      	add	r3, r7
 8008d98:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9a:	e767      	b.n	8008c6c <_vfiprintf_r+0x94>
 8008d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da0:	460c      	mov	r4, r1
 8008da2:	2001      	movs	r0, #1
 8008da4:	e7a5      	b.n	8008cf2 <_vfiprintf_r+0x11a>
 8008da6:	2300      	movs	r3, #0
 8008da8:	3401      	adds	r4, #1
 8008daa:	9305      	str	r3, [sp, #20]
 8008dac:	4619      	mov	r1, r3
 8008dae:	f04f 0c0a 	mov.w	ip, #10
 8008db2:	4620      	mov	r0, r4
 8008db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008db8:	3a30      	subs	r2, #48	; 0x30
 8008dba:	2a09      	cmp	r2, #9
 8008dbc:	d903      	bls.n	8008dc6 <_vfiprintf_r+0x1ee>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0c5      	beq.n	8008d4e <_vfiprintf_r+0x176>
 8008dc2:	9105      	str	r1, [sp, #20]
 8008dc4:	e7c3      	b.n	8008d4e <_vfiprintf_r+0x176>
 8008dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dca:	4604      	mov	r4, r0
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e7f0      	b.n	8008db2 <_vfiprintf_r+0x1da>
 8008dd0:	ab03      	add	r3, sp, #12
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	4b16      	ldr	r3, [pc, #88]	; (8008e30 <_vfiprintf_r+0x258>)
 8008dd8:	a904      	add	r1, sp, #16
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7fd fef4 	bl	8006bc8 <_printf_float>
 8008de0:	4607      	mov	r7, r0
 8008de2:	1c78      	adds	r0, r7, #1
 8008de4:	d1d6      	bne.n	8008d94 <_vfiprintf_r+0x1bc>
 8008de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008de8:	07d9      	lsls	r1, r3, #31
 8008dea:	d405      	bmi.n	8008df8 <_vfiprintf_r+0x220>
 8008dec:	89ab      	ldrh	r3, [r5, #12]
 8008dee:	059a      	lsls	r2, r3, #22
 8008df0:	d402      	bmi.n	8008df8 <_vfiprintf_r+0x220>
 8008df2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008df4:	f7ff fa42 	bl	800827c <__retarget_lock_release_recursive>
 8008df8:	89ab      	ldrh	r3, [r5, #12]
 8008dfa:	065b      	lsls	r3, r3, #25
 8008dfc:	f53f af12 	bmi.w	8008c24 <_vfiprintf_r+0x4c>
 8008e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e02:	e711      	b.n	8008c28 <_vfiprintf_r+0x50>
 8008e04:	ab03      	add	r3, sp, #12
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <_vfiprintf_r+0x258>)
 8008e0c:	a904      	add	r1, sp, #16
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7fe f97e 	bl	8007110 <_printf_i>
 8008e14:	e7e4      	b.n	8008de0 <_vfiprintf_r+0x208>
 8008e16:	bf00      	nop
 8008e18:	08009620 	.word	0x08009620
 8008e1c:	08009640 	.word	0x08009640
 8008e20:	08009600 	.word	0x08009600
 8008e24:	080097bc 	.word	0x080097bc
 8008e28:	080097c6 	.word	0x080097c6
 8008e2c:	08006bc9 	.word	0x08006bc9
 8008e30:	08008bb3 	.word	0x08008bb3
 8008e34:	080097c2 	.word	0x080097c2

08008e38 <_sbrk_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d06      	ldr	r5, [pc, #24]	; (8008e54 <_sbrk_r+0x1c>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7f8 ff72 	bl	8001d2c <_sbrk>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_sbrk_r+0x1a>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_sbrk_r+0x1a>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	20000538 	.word	0x20000538

08008e58 <__sread>:
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e60:	f000 faa8 	bl	80093b4 <_read_r>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	bfab      	itete	ge
 8008e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e6c:	181b      	addge	r3, r3, r0
 8008e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e72:	bfac      	ite	ge
 8008e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e76:	81a3      	strhlt	r3, [r4, #12]
 8008e78:	bd10      	pop	{r4, pc}

08008e7a <__swrite>:
 8008e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7e:	461f      	mov	r7, r3
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	05db      	lsls	r3, r3, #23
 8008e84:	4605      	mov	r5, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	4616      	mov	r6, r2
 8008e8a:	d505      	bpl.n	8008e98 <__swrite+0x1e>
 8008e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e90:	2302      	movs	r3, #2
 8008e92:	2200      	movs	r2, #0
 8008e94:	f000 f9f8 	bl	8009288 <_lseek_r>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	4632      	mov	r2, r6
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eae:	f000 b869 	b.w	8008f84 <_write_r>

08008eb2 <__sseek>:
 8008eb2:	b510      	push	{r4, lr}
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eba:	f000 f9e5 	bl	8009288 <_lseek_r>
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	bf15      	itete	ne
 8008ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ece:	81a3      	strheq	r3, [r4, #12]
 8008ed0:	bf18      	it	ne
 8008ed2:	81a3      	strhne	r3, [r4, #12]
 8008ed4:	bd10      	pop	{r4, pc}

08008ed6 <__sclose>:
 8008ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eda:	f000 b8f1 	b.w	80090c0 <_close_r>
	...

08008ee0 <__swbuf_r>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	460e      	mov	r6, r1
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	b118      	cbz	r0, 8008ef2 <__swbuf_r+0x12>
 8008eea:	6983      	ldr	r3, [r0, #24]
 8008eec:	b90b      	cbnz	r3, 8008ef2 <__swbuf_r+0x12>
 8008eee:	f7ff f921 	bl	8008134 <__sinit>
 8008ef2:	4b21      	ldr	r3, [pc, #132]	; (8008f78 <__swbuf_r+0x98>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	d12b      	bne.n	8008f50 <__swbuf_r+0x70>
 8008ef8:	686c      	ldr	r4, [r5, #4]
 8008efa:	69a3      	ldr	r3, [r4, #24]
 8008efc:	60a3      	str	r3, [r4, #8]
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	071a      	lsls	r2, r3, #28
 8008f02:	d52f      	bpl.n	8008f64 <__swbuf_r+0x84>
 8008f04:	6923      	ldr	r3, [r4, #16]
 8008f06:	b36b      	cbz	r3, 8008f64 <__swbuf_r+0x84>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	6820      	ldr	r0, [r4, #0]
 8008f0c:	1ac0      	subs	r0, r0, r3
 8008f0e:	6963      	ldr	r3, [r4, #20]
 8008f10:	b2f6      	uxtb	r6, r6
 8008f12:	4283      	cmp	r3, r0
 8008f14:	4637      	mov	r7, r6
 8008f16:	dc04      	bgt.n	8008f22 <__swbuf_r+0x42>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f000 f966 	bl	80091ec <_fflush_r>
 8008f20:	bb30      	cbnz	r0, 8008f70 <__swbuf_r+0x90>
 8008f22:	68a3      	ldr	r3, [r4, #8]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	60a3      	str	r3, [r4, #8]
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	6022      	str	r2, [r4, #0]
 8008f2e:	701e      	strb	r6, [r3, #0]
 8008f30:	6963      	ldr	r3, [r4, #20]
 8008f32:	3001      	adds	r0, #1
 8008f34:	4283      	cmp	r3, r0
 8008f36:	d004      	beq.n	8008f42 <__swbuf_r+0x62>
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	07db      	lsls	r3, r3, #31
 8008f3c:	d506      	bpl.n	8008f4c <__swbuf_r+0x6c>
 8008f3e:	2e0a      	cmp	r6, #10
 8008f40:	d104      	bne.n	8008f4c <__swbuf_r+0x6c>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f000 f951 	bl	80091ec <_fflush_r>
 8008f4a:	b988      	cbnz	r0, 8008f70 <__swbuf_r+0x90>
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <__swbuf_r+0x9c>)
 8008f52:	429c      	cmp	r4, r3
 8008f54:	d101      	bne.n	8008f5a <__swbuf_r+0x7a>
 8008f56:	68ac      	ldr	r4, [r5, #8]
 8008f58:	e7cf      	b.n	8008efa <__swbuf_r+0x1a>
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <__swbuf_r+0xa0>)
 8008f5c:	429c      	cmp	r4, r3
 8008f5e:	bf08      	it	eq
 8008f60:	68ec      	ldreq	r4, [r5, #12]
 8008f62:	e7ca      	b.n	8008efa <__swbuf_r+0x1a>
 8008f64:	4621      	mov	r1, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	f000 f81e 	bl	8008fa8 <__swsetup_r>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d0cb      	beq.n	8008f08 <__swbuf_r+0x28>
 8008f70:	f04f 37ff 	mov.w	r7, #4294967295
 8008f74:	e7ea      	b.n	8008f4c <__swbuf_r+0x6c>
 8008f76:	bf00      	nop
 8008f78:	08009620 	.word	0x08009620
 8008f7c:	08009640 	.word	0x08009640
 8008f80:	08009600 	.word	0x08009600

08008f84 <_write_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d07      	ldr	r5, [pc, #28]	; (8008fa4 <_write_r+0x20>)
 8008f88:	4604      	mov	r4, r0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	602a      	str	r2, [r5, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	f7f8 fe79 	bl	8001c8a <_write>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_write_r+0x1e>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_write_r+0x1e>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20000538 	.word	0x20000538

08008fa8 <__swsetup_r>:
 8008fa8:	4b32      	ldr	r3, [pc, #200]	; (8009074 <__swsetup_r+0xcc>)
 8008faa:	b570      	push	{r4, r5, r6, lr}
 8008fac:	681d      	ldr	r5, [r3, #0]
 8008fae:	4606      	mov	r6, r0
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	b125      	cbz	r5, 8008fbe <__swsetup_r+0x16>
 8008fb4:	69ab      	ldr	r3, [r5, #24]
 8008fb6:	b913      	cbnz	r3, 8008fbe <__swsetup_r+0x16>
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f7ff f8bb 	bl	8008134 <__sinit>
 8008fbe:	4b2e      	ldr	r3, [pc, #184]	; (8009078 <__swsetup_r+0xd0>)
 8008fc0:	429c      	cmp	r4, r3
 8008fc2:	d10f      	bne.n	8008fe4 <__swsetup_r+0x3c>
 8008fc4:	686c      	ldr	r4, [r5, #4]
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fcc:	0719      	lsls	r1, r3, #28
 8008fce:	d42c      	bmi.n	800902a <__swsetup_r+0x82>
 8008fd0:	06dd      	lsls	r5, r3, #27
 8008fd2:	d411      	bmi.n	8008ff8 <__swsetup_r+0x50>
 8008fd4:	2309      	movs	r3, #9
 8008fd6:	6033      	str	r3, [r6, #0]
 8008fd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe2:	e03e      	b.n	8009062 <__swsetup_r+0xba>
 8008fe4:	4b25      	ldr	r3, [pc, #148]	; (800907c <__swsetup_r+0xd4>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d101      	bne.n	8008fee <__swsetup_r+0x46>
 8008fea:	68ac      	ldr	r4, [r5, #8]
 8008fec:	e7eb      	b.n	8008fc6 <__swsetup_r+0x1e>
 8008fee:	4b24      	ldr	r3, [pc, #144]	; (8009080 <__swsetup_r+0xd8>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	bf08      	it	eq
 8008ff4:	68ec      	ldreq	r4, [r5, #12]
 8008ff6:	e7e6      	b.n	8008fc6 <__swsetup_r+0x1e>
 8008ff8:	0758      	lsls	r0, r3, #29
 8008ffa:	d512      	bpl.n	8009022 <__swsetup_r+0x7a>
 8008ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ffe:	b141      	cbz	r1, 8009012 <__swsetup_r+0x6a>
 8009000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009004:	4299      	cmp	r1, r3
 8009006:	d002      	beq.n	800900e <__swsetup_r+0x66>
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff fcdb 	bl	80089c4 <_free_r>
 800900e:	2300      	movs	r3, #0
 8009010:	6363      	str	r3, [r4, #52]	; 0x34
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	2300      	movs	r3, #0
 800901c:	6063      	str	r3, [r4, #4]
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	f043 0308 	orr.w	r3, r3, #8
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	6923      	ldr	r3, [r4, #16]
 800902c:	b94b      	cbnz	r3, 8009042 <__swsetup_r+0x9a>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009038:	d003      	beq.n	8009042 <__swsetup_r+0x9a>
 800903a:	4621      	mov	r1, r4
 800903c:	4630      	mov	r0, r6
 800903e:	f000 f95b 	bl	80092f8 <__smakebuf_r>
 8009042:	89a0      	ldrh	r0, [r4, #12]
 8009044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009048:	f010 0301 	ands.w	r3, r0, #1
 800904c:	d00a      	beq.n	8009064 <__swsetup_r+0xbc>
 800904e:	2300      	movs	r3, #0
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	6963      	ldr	r3, [r4, #20]
 8009054:	425b      	negs	r3, r3
 8009056:	61a3      	str	r3, [r4, #24]
 8009058:	6923      	ldr	r3, [r4, #16]
 800905a:	b943      	cbnz	r3, 800906e <__swsetup_r+0xc6>
 800905c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009060:	d1ba      	bne.n	8008fd8 <__swsetup_r+0x30>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	0781      	lsls	r1, r0, #30
 8009066:	bf58      	it	pl
 8009068:	6963      	ldrpl	r3, [r4, #20]
 800906a:	60a3      	str	r3, [r4, #8]
 800906c:	e7f4      	b.n	8009058 <__swsetup_r+0xb0>
 800906e:	2000      	movs	r0, #0
 8009070:	e7f7      	b.n	8009062 <__swsetup_r+0xba>
 8009072:	bf00      	nop
 8009074:	20000078 	.word	0x20000078
 8009078:	08009620 	.word	0x08009620
 800907c:	08009640 	.word	0x08009640
 8009080:	08009600 	.word	0x08009600

08009084 <__assert_func>:
 8009084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009086:	4614      	mov	r4, r2
 8009088:	461a      	mov	r2, r3
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <__assert_func+0x2c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4605      	mov	r5, r0
 8009090:	68d8      	ldr	r0, [r3, #12]
 8009092:	b14c      	cbz	r4, 80090a8 <__assert_func+0x24>
 8009094:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <__assert_func+0x30>)
 8009096:	9100      	str	r1, [sp, #0]
 8009098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800909c:	4906      	ldr	r1, [pc, #24]	; (80090b8 <__assert_func+0x34>)
 800909e:	462b      	mov	r3, r5
 80090a0:	f000 f8e0 	bl	8009264 <fiprintf>
 80090a4:	f000 f9a5 	bl	80093f2 <abort>
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <__assert_func+0x38>)
 80090aa:	461c      	mov	r4, r3
 80090ac:	e7f3      	b.n	8009096 <__assert_func+0x12>
 80090ae:	bf00      	nop
 80090b0:	20000078 	.word	0x20000078
 80090b4:	080097cd 	.word	0x080097cd
 80090b8:	080097da 	.word	0x080097da
 80090bc:	08009808 	.word	0x08009808

080090c0 <_close_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	; (80090dc <_close_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f8 fdf9 	bl	8001cc2 <_close>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_close_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_close_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20000538 	.word	0x20000538

080090e0 <__sflush_r>:
 80090e0:	898a      	ldrh	r2, [r1, #12]
 80090e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e6:	4605      	mov	r5, r0
 80090e8:	0710      	lsls	r0, r2, #28
 80090ea:	460c      	mov	r4, r1
 80090ec:	d458      	bmi.n	80091a0 <__sflush_r+0xc0>
 80090ee:	684b      	ldr	r3, [r1, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dc05      	bgt.n	8009100 <__sflush_r+0x20>
 80090f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dc02      	bgt.n	8009100 <__sflush_r+0x20>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009102:	2e00      	cmp	r6, #0
 8009104:	d0f9      	beq.n	80090fa <__sflush_r+0x1a>
 8009106:	2300      	movs	r3, #0
 8009108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800910c:	682f      	ldr	r7, [r5, #0]
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	d032      	beq.n	8009178 <__sflush_r+0x98>
 8009112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	075a      	lsls	r2, r3, #29
 8009118:	d505      	bpl.n	8009126 <__sflush_r+0x46>
 800911a:	6863      	ldr	r3, [r4, #4]
 800911c:	1ac0      	subs	r0, r0, r3
 800911e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009120:	b10b      	cbz	r3, 8009126 <__sflush_r+0x46>
 8009122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009124:	1ac0      	subs	r0, r0, r3
 8009126:	2300      	movs	r3, #0
 8009128:	4602      	mov	r2, r0
 800912a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800912c:	6a21      	ldr	r1, [r4, #32]
 800912e:	4628      	mov	r0, r5
 8009130:	47b0      	blx	r6
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	d106      	bne.n	8009146 <__sflush_r+0x66>
 8009138:	6829      	ldr	r1, [r5, #0]
 800913a:	291d      	cmp	r1, #29
 800913c:	d82c      	bhi.n	8009198 <__sflush_r+0xb8>
 800913e:	4a2a      	ldr	r2, [pc, #168]	; (80091e8 <__sflush_r+0x108>)
 8009140:	40ca      	lsrs	r2, r1
 8009142:	07d6      	lsls	r6, r2, #31
 8009144:	d528      	bpl.n	8009198 <__sflush_r+0xb8>
 8009146:	2200      	movs	r2, #0
 8009148:	6062      	str	r2, [r4, #4]
 800914a:	04d9      	lsls	r1, r3, #19
 800914c:	6922      	ldr	r2, [r4, #16]
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	d504      	bpl.n	800915c <__sflush_r+0x7c>
 8009152:	1c42      	adds	r2, r0, #1
 8009154:	d101      	bne.n	800915a <__sflush_r+0x7a>
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	b903      	cbnz	r3, 800915c <__sflush_r+0x7c>
 800915a:	6560      	str	r0, [r4, #84]	; 0x54
 800915c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800915e:	602f      	str	r7, [r5, #0]
 8009160:	2900      	cmp	r1, #0
 8009162:	d0ca      	beq.n	80090fa <__sflush_r+0x1a>
 8009164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009168:	4299      	cmp	r1, r3
 800916a:	d002      	beq.n	8009172 <__sflush_r+0x92>
 800916c:	4628      	mov	r0, r5
 800916e:	f7ff fc29 	bl	80089c4 <_free_r>
 8009172:	2000      	movs	r0, #0
 8009174:	6360      	str	r0, [r4, #52]	; 0x34
 8009176:	e7c1      	b.n	80090fc <__sflush_r+0x1c>
 8009178:	6a21      	ldr	r1, [r4, #32]
 800917a:	2301      	movs	r3, #1
 800917c:	4628      	mov	r0, r5
 800917e:	47b0      	blx	r6
 8009180:	1c41      	adds	r1, r0, #1
 8009182:	d1c7      	bne.n	8009114 <__sflush_r+0x34>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0c4      	beq.n	8009114 <__sflush_r+0x34>
 800918a:	2b1d      	cmp	r3, #29
 800918c:	d001      	beq.n	8009192 <__sflush_r+0xb2>
 800918e:	2b16      	cmp	r3, #22
 8009190:	d101      	bne.n	8009196 <__sflush_r+0xb6>
 8009192:	602f      	str	r7, [r5, #0]
 8009194:	e7b1      	b.n	80090fa <__sflush_r+0x1a>
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	e7ad      	b.n	80090fc <__sflush_r+0x1c>
 80091a0:	690f      	ldr	r7, [r1, #16]
 80091a2:	2f00      	cmp	r7, #0
 80091a4:	d0a9      	beq.n	80090fa <__sflush_r+0x1a>
 80091a6:	0793      	lsls	r3, r2, #30
 80091a8:	680e      	ldr	r6, [r1, #0]
 80091aa:	bf08      	it	eq
 80091ac:	694b      	ldreq	r3, [r1, #20]
 80091ae:	600f      	str	r7, [r1, #0]
 80091b0:	bf18      	it	ne
 80091b2:	2300      	movne	r3, #0
 80091b4:	eba6 0807 	sub.w	r8, r6, r7
 80091b8:	608b      	str	r3, [r1, #8]
 80091ba:	f1b8 0f00 	cmp.w	r8, #0
 80091be:	dd9c      	ble.n	80090fa <__sflush_r+0x1a>
 80091c0:	6a21      	ldr	r1, [r4, #32]
 80091c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091c4:	4643      	mov	r3, r8
 80091c6:	463a      	mov	r2, r7
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b0      	blx	r6
 80091cc:	2800      	cmp	r0, #0
 80091ce:	dc06      	bgt.n	80091de <__sflush_r+0xfe>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	e78e      	b.n	80090fc <__sflush_r+0x1c>
 80091de:	4407      	add	r7, r0
 80091e0:	eba8 0800 	sub.w	r8, r8, r0
 80091e4:	e7e9      	b.n	80091ba <__sflush_r+0xda>
 80091e6:	bf00      	nop
 80091e8:	20400001 	.word	0x20400001

080091ec <_fflush_r>:
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	690b      	ldr	r3, [r1, #16]
 80091f0:	4605      	mov	r5, r0
 80091f2:	460c      	mov	r4, r1
 80091f4:	b913      	cbnz	r3, 80091fc <_fflush_r+0x10>
 80091f6:	2500      	movs	r5, #0
 80091f8:	4628      	mov	r0, r5
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	b118      	cbz	r0, 8009206 <_fflush_r+0x1a>
 80091fe:	6983      	ldr	r3, [r0, #24]
 8009200:	b90b      	cbnz	r3, 8009206 <_fflush_r+0x1a>
 8009202:	f7fe ff97 	bl	8008134 <__sinit>
 8009206:	4b14      	ldr	r3, [pc, #80]	; (8009258 <_fflush_r+0x6c>)
 8009208:	429c      	cmp	r4, r3
 800920a:	d11b      	bne.n	8009244 <_fflush_r+0x58>
 800920c:	686c      	ldr	r4, [r5, #4]
 800920e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0ef      	beq.n	80091f6 <_fflush_r+0xa>
 8009216:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009218:	07d0      	lsls	r0, r2, #31
 800921a:	d404      	bmi.n	8009226 <_fflush_r+0x3a>
 800921c:	0599      	lsls	r1, r3, #22
 800921e:	d402      	bmi.n	8009226 <_fflush_r+0x3a>
 8009220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009222:	f7ff f82a 	bl	800827a <__retarget_lock_acquire_recursive>
 8009226:	4628      	mov	r0, r5
 8009228:	4621      	mov	r1, r4
 800922a:	f7ff ff59 	bl	80090e0 <__sflush_r>
 800922e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009230:	07da      	lsls	r2, r3, #31
 8009232:	4605      	mov	r5, r0
 8009234:	d4e0      	bmi.n	80091f8 <_fflush_r+0xc>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	059b      	lsls	r3, r3, #22
 800923a:	d4dd      	bmi.n	80091f8 <_fflush_r+0xc>
 800923c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800923e:	f7ff f81d 	bl	800827c <__retarget_lock_release_recursive>
 8009242:	e7d9      	b.n	80091f8 <_fflush_r+0xc>
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <_fflush_r+0x70>)
 8009246:	429c      	cmp	r4, r3
 8009248:	d101      	bne.n	800924e <_fflush_r+0x62>
 800924a:	68ac      	ldr	r4, [r5, #8]
 800924c:	e7df      	b.n	800920e <_fflush_r+0x22>
 800924e:	4b04      	ldr	r3, [pc, #16]	; (8009260 <_fflush_r+0x74>)
 8009250:	429c      	cmp	r4, r3
 8009252:	bf08      	it	eq
 8009254:	68ec      	ldreq	r4, [r5, #12]
 8009256:	e7da      	b.n	800920e <_fflush_r+0x22>
 8009258:	08009620 	.word	0x08009620
 800925c:	08009640 	.word	0x08009640
 8009260:	08009600 	.word	0x08009600

08009264 <fiprintf>:
 8009264:	b40e      	push	{r1, r2, r3}
 8009266:	b503      	push	{r0, r1, lr}
 8009268:	4601      	mov	r1, r0
 800926a:	ab03      	add	r3, sp, #12
 800926c:	4805      	ldr	r0, [pc, #20]	; (8009284 <fiprintf+0x20>)
 800926e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009272:	6800      	ldr	r0, [r0, #0]
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	f7ff fcaf 	bl	8008bd8 <_vfiprintf_r>
 800927a:	b002      	add	sp, #8
 800927c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009280:	b003      	add	sp, #12
 8009282:	4770      	bx	lr
 8009284:	20000078 	.word	0x20000078

08009288 <_lseek_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d07      	ldr	r5, [pc, #28]	; (80092a8 <_lseek_r+0x20>)
 800928c:	4604      	mov	r4, r0
 800928e:	4608      	mov	r0, r1
 8009290:	4611      	mov	r1, r2
 8009292:	2200      	movs	r2, #0
 8009294:	602a      	str	r2, [r5, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	f7f8 fd3a 	bl	8001d10 <_lseek>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_lseek_r+0x1e>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_lseek_r+0x1e>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20000538 	.word	0x20000538

080092ac <__swhatbuf_r>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	460e      	mov	r6, r1
 80092b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b4:	2900      	cmp	r1, #0
 80092b6:	b096      	sub	sp, #88	; 0x58
 80092b8:	4614      	mov	r4, r2
 80092ba:	461d      	mov	r5, r3
 80092bc:	da08      	bge.n	80092d0 <__swhatbuf_r+0x24>
 80092be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	602a      	str	r2, [r5, #0]
 80092c6:	061a      	lsls	r2, r3, #24
 80092c8:	d410      	bmi.n	80092ec <__swhatbuf_r+0x40>
 80092ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ce:	e00e      	b.n	80092ee <__swhatbuf_r+0x42>
 80092d0:	466a      	mov	r2, sp
 80092d2:	f000 f895 	bl	8009400 <_fstat_r>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	dbf1      	blt.n	80092be <__swhatbuf_r+0x12>
 80092da:	9a01      	ldr	r2, [sp, #4]
 80092dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092e4:	425a      	negs	r2, r3
 80092e6:	415a      	adcs	r2, r3
 80092e8:	602a      	str	r2, [r5, #0]
 80092ea:	e7ee      	b.n	80092ca <__swhatbuf_r+0x1e>
 80092ec:	2340      	movs	r3, #64	; 0x40
 80092ee:	2000      	movs	r0, #0
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	b016      	add	sp, #88	; 0x58
 80092f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080092f8 <__smakebuf_r>:
 80092f8:	898b      	ldrh	r3, [r1, #12]
 80092fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092fc:	079d      	lsls	r5, r3, #30
 80092fe:	4606      	mov	r6, r0
 8009300:	460c      	mov	r4, r1
 8009302:	d507      	bpl.n	8009314 <__smakebuf_r+0x1c>
 8009304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	2301      	movs	r3, #1
 800930e:	6163      	str	r3, [r4, #20]
 8009310:	b002      	add	sp, #8
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	ab01      	add	r3, sp, #4
 8009316:	466a      	mov	r2, sp
 8009318:	f7ff ffc8 	bl	80092ac <__swhatbuf_r>
 800931c:	9900      	ldr	r1, [sp, #0]
 800931e:	4605      	mov	r5, r0
 8009320:	4630      	mov	r0, r6
 8009322:	f7ff fbbb 	bl	8008a9c <_malloc_r>
 8009326:	b948      	cbnz	r0, 800933c <__smakebuf_r+0x44>
 8009328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932c:	059a      	lsls	r2, r3, #22
 800932e:	d4ef      	bmi.n	8009310 <__smakebuf_r+0x18>
 8009330:	f023 0303 	bic.w	r3, r3, #3
 8009334:	f043 0302 	orr.w	r3, r3, #2
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	e7e3      	b.n	8009304 <__smakebuf_r+0xc>
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <__smakebuf_r+0x7c>)
 800933e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	6020      	str	r0, [r4, #0]
 8009344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	9b00      	ldr	r3, [sp, #0]
 800934c:	6163      	str	r3, [r4, #20]
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	6120      	str	r0, [r4, #16]
 8009352:	b15b      	cbz	r3, 800936c <__smakebuf_r+0x74>
 8009354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009358:	4630      	mov	r0, r6
 800935a:	f000 f863 	bl	8009424 <_isatty_r>
 800935e:	b128      	cbz	r0, 800936c <__smakebuf_r+0x74>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	f043 0301 	orr.w	r3, r3, #1
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	89a0      	ldrh	r0, [r4, #12]
 800936e:	4305      	orrs	r5, r0
 8009370:	81a5      	strh	r5, [r4, #12]
 8009372:	e7cd      	b.n	8009310 <__smakebuf_r+0x18>
 8009374:	080080cd 	.word	0x080080cd

08009378 <__ascii_mbtowc>:
 8009378:	b082      	sub	sp, #8
 800937a:	b901      	cbnz	r1, 800937e <__ascii_mbtowc+0x6>
 800937c:	a901      	add	r1, sp, #4
 800937e:	b142      	cbz	r2, 8009392 <__ascii_mbtowc+0x1a>
 8009380:	b14b      	cbz	r3, 8009396 <__ascii_mbtowc+0x1e>
 8009382:	7813      	ldrb	r3, [r2, #0]
 8009384:	600b      	str	r3, [r1, #0]
 8009386:	7812      	ldrb	r2, [r2, #0]
 8009388:	1e10      	subs	r0, r2, #0
 800938a:	bf18      	it	ne
 800938c:	2001      	movne	r0, #1
 800938e:	b002      	add	sp, #8
 8009390:	4770      	bx	lr
 8009392:	4610      	mov	r0, r2
 8009394:	e7fb      	b.n	800938e <__ascii_mbtowc+0x16>
 8009396:	f06f 0001 	mvn.w	r0, #1
 800939a:	e7f8      	b.n	800938e <__ascii_mbtowc+0x16>

0800939c <__malloc_lock>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__malloc_lock+0x8>)
 800939e:	f7fe bf6c 	b.w	800827a <__retarget_lock_acquire_recursive>
 80093a2:	bf00      	nop
 80093a4:	2000052c 	.word	0x2000052c

080093a8 <__malloc_unlock>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__malloc_unlock+0x8>)
 80093aa:	f7fe bf67 	b.w	800827c <__retarget_lock_release_recursive>
 80093ae:	bf00      	nop
 80093b0:	2000052c 	.word	0x2000052c

080093b4 <_read_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4d07      	ldr	r5, [pc, #28]	; (80093d4 <_read_r+0x20>)
 80093b8:	4604      	mov	r4, r0
 80093ba:	4608      	mov	r0, r1
 80093bc:	4611      	mov	r1, r2
 80093be:	2200      	movs	r2, #0
 80093c0:	602a      	str	r2, [r5, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	f7f8 fc44 	bl	8001c50 <_read>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_read_r+0x1e>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_read_r+0x1e>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20000538 	.word	0x20000538

080093d8 <__ascii_wctomb>:
 80093d8:	b149      	cbz	r1, 80093ee <__ascii_wctomb+0x16>
 80093da:	2aff      	cmp	r2, #255	; 0xff
 80093dc:	bf85      	ittet	hi
 80093de:	238a      	movhi	r3, #138	; 0x8a
 80093e0:	6003      	strhi	r3, [r0, #0]
 80093e2:	700a      	strbls	r2, [r1, #0]
 80093e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80093e8:	bf98      	it	ls
 80093ea:	2001      	movls	r0, #1
 80093ec:	4770      	bx	lr
 80093ee:	4608      	mov	r0, r1
 80093f0:	4770      	bx	lr

080093f2 <abort>:
 80093f2:	b508      	push	{r3, lr}
 80093f4:	2006      	movs	r0, #6
 80093f6:	f000 f84d 	bl	8009494 <raise>
 80093fa:	2001      	movs	r0, #1
 80093fc:	f7f8 fc1e 	bl	8001c3c <_exit>

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	602b      	str	r3, [r5, #0]
 800940e:	f7f8 fc64 	bl	8001cda <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	682b      	ldr	r3, [r5, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	20000538 	.word	0x20000538

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d06      	ldr	r5, [pc, #24]	; (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	602b      	str	r3, [r5, #0]
 8009430:	f7f8 fc63 	bl	8001cfa <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20000538 	.word	0x20000538

08009444 <_raise_r>:
 8009444:	291f      	cmp	r1, #31
 8009446:	b538      	push	{r3, r4, r5, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	460d      	mov	r5, r1
 800944c:	d904      	bls.n	8009458 <_raise_r+0x14>
 800944e:	2316      	movs	r3, #22
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	f04f 30ff 	mov.w	r0, #4294967295
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800945a:	b112      	cbz	r2, 8009462 <_raise_r+0x1e>
 800945c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009460:	b94b      	cbnz	r3, 8009476 <_raise_r+0x32>
 8009462:	4620      	mov	r0, r4
 8009464:	f000 f830 	bl	80094c8 <_getpid_r>
 8009468:	462a      	mov	r2, r5
 800946a:	4601      	mov	r1, r0
 800946c:	4620      	mov	r0, r4
 800946e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009472:	f000 b817 	b.w	80094a4 <_kill_r>
 8009476:	2b01      	cmp	r3, #1
 8009478:	d00a      	beq.n	8009490 <_raise_r+0x4c>
 800947a:	1c59      	adds	r1, r3, #1
 800947c:	d103      	bne.n	8009486 <_raise_r+0x42>
 800947e:	2316      	movs	r3, #22
 8009480:	6003      	str	r3, [r0, #0]
 8009482:	2001      	movs	r0, #1
 8009484:	e7e7      	b.n	8009456 <_raise_r+0x12>
 8009486:	2400      	movs	r4, #0
 8009488:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800948c:	4628      	mov	r0, r5
 800948e:	4798      	blx	r3
 8009490:	2000      	movs	r0, #0
 8009492:	e7e0      	b.n	8009456 <_raise_r+0x12>

08009494 <raise>:
 8009494:	4b02      	ldr	r3, [pc, #8]	; (80094a0 <raise+0xc>)
 8009496:	4601      	mov	r1, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f7ff bfd3 	b.w	8009444 <_raise_r>
 800949e:	bf00      	nop
 80094a0:	20000078 	.word	0x20000078

080094a4 <_kill_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d07      	ldr	r5, [pc, #28]	; (80094c4 <_kill_r+0x20>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4604      	mov	r4, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	4611      	mov	r1, r2
 80094b0:	602b      	str	r3, [r5, #0]
 80094b2:	f7f8 fbb3 	bl	8001c1c <_kill>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d102      	bne.n	80094c0 <_kill_r+0x1c>
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	b103      	cbz	r3, 80094c0 <_kill_r+0x1c>
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	bd38      	pop	{r3, r4, r5, pc}
 80094c2:	bf00      	nop
 80094c4:	20000538 	.word	0x20000538

080094c8 <_getpid_r>:
 80094c8:	f7f8 bba0 	b.w	8001c0c <_getpid>

080094cc <_init>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr

080094d8 <_fini>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr
